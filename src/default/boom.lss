
boom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  0000129e  00001332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000129e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800220  00800220  00001452  2**0
                  ALLOC
  3 .stab         00001230  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004cb  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00002b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002cc  00000000  00000000  00002bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000156d  00000000  00000000  00002ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000072d  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001637  00000000  00000000  00004b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000250  00000000  00000000  0000618c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000495  00000000  00000000  000063dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c04  00000000  00000000  00006871  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000127  00000000  00000000  00007475  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  0000759c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e9       	ldi	r30, 0x9E	; 158
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 32       	cpi	r26, 0x20	; 32
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a0 e2       	ldi	r26, 0x20	; 32
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 33       	cpi	r26, 0x3D	; 61
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 f7 03 	call	0x7ee	; 0x7ee <main>
      c6:	0c 94 4d 09 	jmp	0x129a	; 0x129a <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <StrCmp>:
	for (char i = 0; i < len; i++){
		if (origin[i] != copy[i]){
			return 1;
		}
	}
	return 0;
      ce:	26 2f       	mov	r18, r22
      d0:	37 2f       	mov	r19, r23
      d2:	d9 01       	movw	r26, r18
//----------------------------------------------------------------

char StrCmp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
      d4:	e8 2f       	mov	r30, r24
      d6:	f9 2f       	mov	r31, r25
      d8:	04 c0       	rjmp	.+8      	; 0xe2 <StrCmp+0x14>
		if (origin[i] != copy[i]){
      da:	21 91       	ld	r18, Z+
      dc:	9d 91       	ld	r25, X+
      de:	29 17       	cp	r18, r25
      e0:	31 f4       	brne	.+12     	; 0xee <StrCmp+0x20>
//----------------------------------------------------------------

char StrCmp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
      e2:	9e 2f       	mov	r25, r30
      e4:	98 1b       	sub	r25, r24
      e6:	94 17       	cp	r25, r20
      e8:	c0 f3       	brcs	.-16     	; 0xda <StrCmp+0xc>
		if (origin[i] != copy[i]){
			return 1;
		}
	}
	return 0;
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	08 95       	ret
char StrCmp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
		if (origin[i] != copy[i]){
			return 1;
      ee:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
      f0:	08 95       	ret

000000f2 <StrCp>:
//--------------------------------

void StrCp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
      f2:	28 2f       	mov	r18, r24
      f4:	39 2f       	mov	r19, r25
      f6:	d9 01       	movw	r26, r18
      f8:	86 2f       	mov	r24, r22
      fa:	97 2f       	mov	r25, r23
      fc:	fc 01       	movw	r30, r24
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	03 c0       	rjmp	.+6      	; 0x108 <StrCp+0x16>
		copy[i] = origin[i];
     102:	9d 91       	ld	r25, X+
     104:	91 93       	st	Z+, r25
//--------------------------------

void StrCp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
     106:	8f 5f       	subi	r24, 0xFF	; 255
     108:	84 17       	cp	r24, r20
     10a:	d8 f3       	brcs	.-10     	; 0x102 <StrCp+0x10>
		copy[i] = origin[i];
	}	
}
     10c:	08 95       	ret

0000010e <SetupTIMER1>:
     // will occur every:
     //   1<<CS10                  4096 mkS  (no prescale Fclk)
     //   1<<CS11                  32.768 mS (Fclk/8)
     //  (1<<CS11)|(1<<CS10)       262.144 mS (Fclk/64)
     //   1<<CS12                  1048.576 mS (Fclk/256)
     TCCR1B = (1<<CS12);
     10e:	84 e0       	ldi	r24, 0x04	; 4
     110:	8e bd       	out	0x2e, r24	; 46
     TCNT1 = 65536-62439;        //примерно 1 секунда
     112:	89 e1       	ldi	r24, 0x19	; 25
     114:	9c e0       	ldi	r25, 0x0C	; 12
     116:	9d bd       	out	0x2d, r25	; 45
     118:	8c bd       	out	0x2c, r24	; 44
     /* Enable timer 1 overflow interrupt. */
     TIMSK |= (1<<TOIE1);
     11a:	87 b7       	in	r24, 0x37	; 55
     11c:	84 60       	ori	r24, 0x04	; 4
     11e:	87 bf       	out	0x37, r24	; 55

	
 	 sei();
     120:	78 94       	sei
}
     122:	08 95       	ret

00000124 <SetupTIMER3>:
     // will occur every:
     //   1<<CS10                  4096 mkS  (no prescale Fclk)
     //   1<<CS11                  32.768 mS (Fclk/8)
     //  (1<<CS11)|(1<<CS10)       262.144 mS (Fclk/64)
     //   1<<CS12                  1048.576 mS (Fclk/256)
     TCCR3B = (1<<CS12);
     124:	84 e0       	ldi	r24, 0x04	; 4
     126:	80 93 8a 00 	sts	0x008A, r24
     TCNT3 = 65536-62439;        //примерно 1 секунда
     12a:	89 e1       	ldi	r24, 0x19	; 25
     12c:	9c e0       	ldi	r25, 0x0C	; 12
     12e:	90 93 89 00 	sts	0x0089, r25
     132:	80 93 88 00 	sts	0x0088, r24
     /* Enable timer 1 overflow interrupt. */
     ETIMSK |= (1<<TOIE3);
     136:	ed e7       	ldi	r30, 0x7D	; 125
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	84 60       	ori	r24, 0x04	; 4
     13e:	80 83       	st	Z, r24

 	 sei();
     140:	78 94       	sei
}
     142:	08 95       	ret

00000144 <GetButton>:
	if (!(BUTTONPIN & 0b00000001) && all_released){
		all_released = 0;
		return 1;	
	}
*/	
	if (!(BUTTONPIN & 0b00000010) && all_released){
     144:	c9 99       	sbic	0x19, 1	; 25
     146:	08 c0       	rjmp	.+16     	; 0x158 <GetButton+0x14>
     148:	80 91 2c 02 	lds	r24, 0x022C
     14c:	88 23       	and	r24, r24
     14e:	21 f0       	breq	.+8      	; 0x158 <GetButton+0x14>
		all_released = 0;
     150:	10 92 2c 02 	sts	0x022C, r1
		return 2;	
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	08 95       	ret
	}

	if (!(BUTTONPIN & 0b00000100) && all_released){
     158:	ca 99       	sbic	0x19, 2	; 25
     15a:	08 c0       	rjmp	.+16     	; 0x16c <GetButton+0x28>
     15c:	80 91 2c 02 	lds	r24, 0x022C
     160:	88 23       	and	r24, r24
     162:	21 f0       	breq	.+8      	; 0x16c <GetButton+0x28>
		all_released = 0;
     164:	10 92 2c 02 	sts	0x022C, r1
		return 3;	
     168:	83 e0       	ldi	r24, 0x03	; 3
     16a:	08 95       	ret
	}

	if (!(BUTTONPIN & 0b00001000) && all_released){
     16c:	cb 99       	sbic	0x19, 3	; 25
     16e:	08 c0       	rjmp	.+16     	; 0x180 <GetButton+0x3c>
     170:	80 91 2c 02 	lds	r24, 0x022C
     174:	88 23       	and	r24, r24
     176:	21 f0       	breq	.+8      	; 0x180 <GetButton+0x3c>
		all_released = 0;
     178:	10 92 2c 02 	sts	0x022C, r1
		return 4;	
     17c:	84 e0       	ldi	r24, 0x04	; 4
     17e:	08 95       	ret
	}

	if (!(BUTTONPIN & 0b00010000) && all_released){
     180:	cc 99       	sbic	0x19, 4	; 25
     182:	08 c0       	rjmp	.+16     	; 0x194 <GetButton+0x50>
     184:	80 91 2c 02 	lds	r24, 0x022C
     188:	88 23       	and	r24, r24
     18a:	21 f0       	breq	.+8      	; 0x194 <GetButton+0x50>
		all_released = 0;
     18c:	10 92 2c 02 	sts	0x022C, r1
		return 5;	
     190:	85 e0       	ldi	r24, 0x05	; 5
     192:	08 95       	ret
	}

	if (    (/*(PINA & 0b00000001)
			|*/(PINA & 0b00000010)
     194:	69 b3       	in	r22, 0x19	; 25
			|(PINA & 0b00000100)
     196:	89 b3       	in	r24, 0x19	; 25
			|(PINA & 0b00001000)
     198:	49 b3       	in	r20, 0x19	; 25
			|(PINA & 0b00010000)) == 30)//31)
     19a:	29 b3       	in	r18, 0x19	; 25
		return 5;	
	}

	if (    (/*(PINA & 0b00000001)
			|*/(PINA & 0b00000010)
			|(PINA & 0b00000100)
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	84 70       	andi	r24, 0x04	; 4
     1a0:	90 70       	andi	r25, 0x00	; 0
		all_released = 0;
		return 5;	
	}

	if (    (/*(PINA & 0b00000001)
			|*/(PINA & 0b00000010)
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	62 70       	andi	r22, 0x02	; 2
     1a6:	70 70       	andi	r23, 0x00	; 0
			|(PINA & 0b00000100)
     1a8:	86 2b       	or	r24, r22
     1aa:	97 2b       	or	r25, r23
			|(PINA & 0b00001000)
     1ac:	50 e0       	ldi	r21, 0x00	; 0
     1ae:	48 70       	andi	r20, 0x08	; 8
     1b0:	50 70       	andi	r21, 0x00	; 0
     1b2:	84 2b       	or	r24, r20
     1b4:	95 2b       	or	r25, r21
			|(PINA & 0b00010000)) == 30)//31)
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	20 71       	andi	r18, 0x10	; 16
     1ba:	30 70       	andi	r19, 0x00	; 0
     1bc:	82 2b       	or	r24, r18
     1be:	93 2b       	or	r25, r19
	if (!(BUTTONPIN & 0b00010000) && all_released){
		all_released = 0;
		return 5;	
	}

	if (    (/*(PINA & 0b00000001)
     1c0:	8e 31       	cpi	r24, 0x1E	; 30
     1c2:	91 05       	cpc	r25, r1
     1c4:	29 f4       	brne	.+10     	; 0x1d0 <GetButton+0x8c>
			|*/(PINA & 0b00000010)
			|(PINA & 0b00000100)
			|(PINA & 0b00001000)
			|(PINA & 0b00010000)) == 30)//31)
	all_released = 1; //all bottons are released
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	80 93 2c 02 	sts	0x022C, r24

	return 0;
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret
     1d0:	80 e0       	ldi	r24, 0x00	; 0
}
     1d2:	08 95       	ret

000001d4 <PrintToSevenSeg>:

//---------------------------------------------------------------

char PrintToSevenSeg(long value)
{
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
     1e0:	60 97       	sbiw	r28, 0x10	; 16
     1e2:	0f b6       	in	r0, 0x3f	; 63
     1e4:	f8 94       	cli
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	0f be       	out	0x3f, r0	; 63
     1ea:	cd bf       	out	0x3d, r28	; 61
	char stext	 [TEXTLEN];

	sprintf(stext,"%d",value);
     1ec:	2d b7       	in	r18, 0x3d	; 61
     1ee:	3e b7       	in	r19, 0x3e	; 62
     1f0:	28 50       	subi	r18, 0x08	; 8
     1f2:	30 40       	sbci	r19, 0x00	; 0
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	f8 94       	cli
     1f8:	3e bf       	out	0x3e, r19	; 62
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	2d bf       	out	0x3d, r18	; 61
     1fe:	ed b7       	in	r30, 0x3d	; 61
     200:	fe b7       	in	r31, 0x3e	; 62
     202:	31 96       	adiw	r30, 0x01	; 1
     204:	8e 01       	movw	r16, r28
     206:	0f 5f       	subi	r16, 0xFF	; 255
     208:	1f 4f       	sbci	r17, 0xFF	; 255
     20a:	ad b7       	in	r26, 0x3d	; 61
     20c:	be b7       	in	r27, 0x3e	; 62
     20e:	12 96       	adiw	r26, 0x02	; 2
     210:	1c 93       	st	X, r17
     212:	0e 93       	st	-X, r16
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	31 e0       	ldi	r19, 0x01	; 1
     21a:	33 83       	std	Z+3, r19	; 0x03
     21c:	22 83       	std	Z+2, r18	; 0x02
     21e:	64 83       	std	Z+4, r22	; 0x04
     220:	75 83       	std	Z+5, r23	; 0x05
     222:	86 83       	std	Z+6, r24	; 0x06
     224:	97 83       	std	Z+7, r25	; 0x07
     226:	0e 94 33 06 	call	0xc66	; 0xc66 <sprintf>

	LCDSendCommand(DD_RAM_ADDR);
     22a:	2d b7       	in	r18, 0x3d	; 61
     22c:	3e b7       	in	r19, 0x3e	; 62
     22e:	28 5f       	subi	r18, 0xF8	; 248
     230:	3f 4f       	sbci	r19, 0xFF	; 255
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	3e bf       	out	0x3e, r19	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	2d bf       	out	0x3d, r18	; 61
     23c:	80 e8       	ldi	r24, 0x80	; 128
     23e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>

	LCDSendTxt(stext);
     242:	c8 01       	movw	r24, r16
     244:	0e 94 ba 04 	call	0x974	; 0x974 <LCDSendTxt>

	return 0;
}
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	60 96       	adiw	r28, 0x10	; 16
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	cf 91       	pop	r28
     258:	df 91       	pop	r29
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	08 95       	ret

00000260 <GameOver>:

//---------------------------------------------------------------

void GameOver()
{
	is_game = 0;
     260:	10 92 21 02 	sts	0x0221, r1
	is_timer = 0;
     264:	10 92 22 02 	sts	0x0222, r1
	LCDSendCommand(CLR_DISP); 
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
	LCDSendUnsafeCounteredTxt(GAMEOVER, TEXTLEN);
     26e:	83 e0       	ldi	r24, 0x03	; 3
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	60 e1       	ldi	r22, 0x10	; 16
     274:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCDSendUnsafeCounteredTxt>

	// reinit timer

	timer_cur = timer_init_val;
     278:	80 91 1b 02 	lds	r24, 0x021B
     27c:	90 91 1c 02 	lds	r25, 0x021C
     280:	a0 91 1d 02 	lds	r26, 0x021D
     284:	b0 91 1e 02 	lds	r27, 0x021E
     288:	80 93 24 02 	sts	0x0224, r24
     28c:	90 93 25 02 	sts	0x0225, r25
     290:	a0 93 26 02 	sts	0x0226, r26
     294:	b0 93 27 02 	sts	0x0227, r27

	UPBIT(PORTA,6);	
     298:	de 9a       	sbi	0x1b, 6	; 27
}
     29a:	08 95       	ret

0000029c <GamePaused>:

//---------------------------------------------------------------

void GamePaused()
{
	is_timer = 0;
     29c:	10 92 22 02 	sts	0x0222, r1

	UPBIT(PORTA,6);
     2a0:	de 9a       	sbi	0x1b, 6	; 27
}
     2a2:	08 95       	ret

000002a4 <MakeBoom>:

//---------------------------------------------------------------

void MakeBoom()
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
	is_timer = 0;
     2a8:	10 92 22 02 	sts	0x0222, r1
	is_game = 0;
     2ac:	10 92 21 02 	sts	0x0221, r1

	timer_cur = timer_init_val;
     2b0:	80 91 1b 02 	lds	r24, 0x021B
     2b4:	90 91 1c 02 	lds	r25, 0x021C
     2b8:	a0 91 1d 02 	lds	r26, 0x021D
     2bc:	b0 91 1e 02 	lds	r27, 0x021E
     2c0:	80 93 24 02 	sts	0x0224, r24
     2c4:	90 93 25 02 	sts	0x0225, r25
     2c8:	a0 93 26 02 	sts	0x0226, r26
     2cc:	b0 93 27 02 	sts	0x0227, r27

	LCDSendCommand(CLR_DISP);
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
	LCDSendTxt(" BOOM BOOM BOOM "); 
     2d6:	c4 e1       	ldi	r28, 0x14	; 20
     2d8:	d1 e0       	ldi	r29, 0x01	; 1
     2da:	ce 01       	movw	r24, r28
     2dc:	0e 94 ba 04 	call	0x974	; 0x974 <LCDSendTxt>
	LCDSendCommand(DD_RAM_ADDR2);
     2e0:	80 ec       	ldi	r24, 0xC0	; 192
     2e2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
	LCDSendTxt(" BOOM BOOM BOOM ");
     2e6:	ce 01       	movw	r24, r28
     2e8:	0e 94 ba 04 	call	0x974	; 0x974 <LCDSendTxt>

	UPBIT(PORTA,6);	
     2ec:	de 9a       	sbi	0x1b, 6	; 27
	
}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <CheckKey>:
//---------------------------------------------------------------

char CheckKey ()
{
	static char was_released = 0;
	if (!(BUTTONPIN & 0b00000001) && was_released){
     2f4:	c8 99       	sbic	0x19, 0	; 25
     2f6:	08 c0       	rjmp	.+16     	; 0x308 <CheckKey+0x14>
     2f8:	80 91 2b 02 	lds	r24, 0x022B
     2fc:	88 23       	and	r24, r24
     2fe:	21 f0       	breq	.+8      	; 0x308 <CheckKey+0x14>
		was_released = 0;
     300:	10 92 2b 02 	sts	0x022B, r1
		return 1;	
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	08 95       	ret
	}
	
	if (PINA & 0b00000001)
     308:	c8 9b       	sbis	0x19, 0	; 25
     30a:	05 c0       	rjmp	.+10     	; 0x316 <CheckKey+0x22>
		was_released = 1;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 2b 02 	sts	0x022B, r24

	return 0;
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	08 95       	ret
     316:	80 e0       	ldi	r24, 0x00	; 0
}
     318:	08 95       	ret

0000031a <CheckState>:
//---------------------------------------------------------------

char CheckState(char is_key_state)
{

	if (is_key_state == 1){ // first key, now just one 
     31a:	81 30       	cpi	r24, 0x01	; 1
     31c:	01 f5       	brne	.+64     	; 0x35e <CheckState+0x44>
		if (is_game){
     31e:	80 91 21 02 	lds	r24, 0x0221
     322:	88 23       	and	r24, r24
     324:	29 f0       	breq	.+10     	; 0x330 <CheckState+0x16>
			GameOver();
     326:	0e 94 30 01 	call	0x260	; 0x260 <GameOver>
			is_key = 0;
     32a:	10 92 23 02 	sts	0x0223, r1
     32e:	15 c0       	rjmp	.+42     	; 0x35a <CheckState+0x40>
			return 1;
		}else{
			is_key = 0;
     330:	10 92 23 02 	sts	0x0223, r1
			menu_pos = EADMIN;
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	80 93 ea 01 	sts	0x01EA, r24
			LCDSendCommand(CLR_DISP); 
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
			LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
     340:	80 91 ea 01 	lds	r24, 0x01EA
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	24 e0       	ldi	r18, 0x04	; 4
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	2a 95       	dec	r18
     34e:	e1 f7       	brne	.-8      	; 0x348 <CheckState+0x2e>
     350:	86 58       	subi	r24, 0x86	; 134
     352:	9e 4f       	sbci	r25, 0xFE	; 254
     354:	60 e1       	ldi	r22, 0x10	; 16
     356:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCDSendUnsafeCounteredTxt>
			return 1;				
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	08 95       	ret
		}
	}
	return 0;
     35e:	80 e0       	ldi	r24, 0x00	; 0
}
     360:	08 95       	ret

00000362 <MenuSelect>:

//---------------------------------------------------------------

char MenuSelect(char key)
{	
     362:	1f 93       	push	r17
	static char pos = 0;
	static char addrr = 0;

	if (key != OKBUT && key != NOBUT){ // some digit
     364:	82 30       	cpi	r24, 0x02	; 2
     366:	09 f4       	brne	.+2      	; 0x36a <MenuSelect+0x8>
     368:	6b c0       	rjmp	.+214    	; 0x440 <MenuSelect+0xde>
     36a:	84 30       	cpi	r24, 0x04	; 4
     36c:	31 f1       	breq	.+76     	; 0x3ba <MenuSelect+0x58>

		if (pos == TEXTLEN)
     36e:	90 91 2a 02 	lds	r25, 0x022A
     372:	90 31       	cpi	r25, 0x10	; 16
     374:	19 f4       	brne	.+6      	; 0x37c <MenuSelect+0x1a>
			pos--;
     376:	9f e0       	ldi	r25, 0x0F	; 15
     378:	90 93 2a 02 	sts	0x022A, r25

		curtext[pos++] = key + 48; // from digit to asci simbol of digit
     37c:	90 91 2a 02 	lds	r25, 0x022A
     380:	e9 2f       	mov	r30, r25
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	e3 5d       	subi	r30, 0xD3	; 211
     386:	fd 4f       	sbci	r31, 0xFD	; 253
     388:	80 5d       	subi	r24, 0xD0	; 208
     38a:	80 83       	st	Z, r24
     38c:	89 2f       	mov	r24, r25
     38e:	8f 5f       	subi	r24, 0xFF	; 255
     390:	80 93 2a 02 	sts	0x022A, r24

		for (char i = pos; i < TEXTLEN; i++){
			curtext[i] = ' ';
     394:	90 e2       	ldi	r25, 0x20	; 32
		if (pos == TEXTLEN)
			pos--;

		curtext[pos++] = key + 48; // from digit to asci simbol of digit

		for (char i = pos; i < TEXTLEN; i++){
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <MenuSelect+0x42>
			curtext[i] = ' ';
     398:	e8 2f       	mov	r30, r24
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	e3 5d       	subi	r30, 0xD3	; 211
     39e:	fd 4f       	sbci	r31, 0xFD	; 253
     3a0:	90 83       	st	Z, r25
		if (pos == TEXTLEN)
			pos--;

		curtext[pos++] = key + 48; // from digit to asci simbol of digit

		for (char i = pos; i < TEXTLEN; i++){
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	80 31       	cpi	r24, 0x10	; 16
     3a6:	c0 f3       	brcs	.-16     	; 0x398 <MenuSelect+0x36>
			curtext[i] = ' ';
		}

		LCDSendCommand(DD_RAM_ADDR2);
     3a8:	80 ec       	ldi	r24, 0xC0	; 192
     3aa:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
		LCDSendUnsafeCounteredTxt(curtext, TEXTLEN);
     3ae:	8d e2       	ldi	r24, 0x2D	; 45
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	60 e1       	ldi	r22, 0x10	; 16
     3b4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCDSendUnsafeCounteredTxt>
     3b8:	1d c1       	rjmp	.+570    	; 0x5f4 <MenuSelect+0x292>

	}else{ // command buttons
		if (key == NOBUT)
		{
			if (is_timer){ // game already started
     3ba:	80 91 22 02 	lds	r24, 0x0222
     3be:	88 23       	and	r24, r24
     3c0:	d9 f0       	breq	.+54     	; 0x3f8 <MenuSelect+0x96>
				menu_pos = ESTOP;
     3c2:	10 92 ea 01 	sts	0x01EA, r1
				LCDSendCommand(CLR_DISP); 
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
				LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
     3cc:	80 91 ea 01 	lds	r24, 0x01EA
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	44 e0       	ldi	r20, 0x04	; 4
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	4a 95       	dec	r20
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <MenuSelect+0x72>
     3dc:	86 58       	subi	r24, 0x86	; 134
     3de:	9e 4f       	sbci	r25, 0xFE	; 254
     3e0:	60 e1       	ldi	r22, 0x10	; 16
     3e2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCDSendUnsafeCounteredTxt>
     3e6:	ed e2       	ldi	r30, 0x2D	; 45
     3e8:	f2 e0       	ldi	r31, 0x02	; 2
				for (char i = 0; i < TEXTLEN; i++)
					curtext[i] = ' ';
     3ea:	80 e2       	ldi	r24, 0x20	; 32
     3ec:	81 93       	st	Z+, r24
		{
			if (is_timer){ // game already started
				menu_pos = ESTOP;
				LCDSendCommand(CLR_DISP); 
				LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
				for (char i = 0; i < TEXTLEN; i++)
     3ee:	92 e0       	ldi	r25, 0x02	; 2
     3f0:	ed 33       	cpi	r30, 0x3D	; 61
     3f2:	f9 07       	cpc	r31, r25
     3f4:	d9 f7       	brne	.-10     	; 0x3ec <MenuSelect+0x8a>
     3f6:	20 c0       	rjmp	.+64     	; 0x438 <MenuSelect+0xd6>
					curtext[i] = ' ';
				pos = 0;
			}else{ // game not started
				if (is_admin){
     3f8:	80 91 20 02 	lds	r24, 0x0220
     3fc:	88 23       	and	r24, r24
     3fe:	49 f0       	breq	.+18     	; 0x412 <MenuSelect+0xb0>
					if (++menu_pos == MENUCOUNT)
     400:	80 91 ea 01 	lds	r24, 0x01EA
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	80 93 ea 01 	sts	0x01EA, r24
     40a:	87 30       	cpi	r24, 0x07	; 7
     40c:	29 f4       	brne	.+10     	; 0x418 <MenuSelect+0xb6>
						menu_pos = SADMIN; 
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	01 c0       	rjmp	.+2      	; 0x414 <MenuSelect+0xb2>
				}else{
					menu_pos = ESTART; 
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 ea 01 	sts	0x01EA, r24
				}
			
				LCDSendCommand(CLR_DISP); 
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
				LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
     41e:	80 91 ea 01 	lds	r24, 0x01EA
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	34 e0       	ldi	r19, 0x04	; 4
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	3a 95       	dec	r19
     42c:	e1 f7       	brne	.-8      	; 0x426 <MenuSelect+0xc4>
     42e:	86 58       	subi	r24, 0x86	; 134
     430:	9e 4f       	sbci	r25, 0xFE	; 254
     432:	60 e1       	ldi	r22, 0x10	; 16
     434:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCDSendUnsafeCounteredTxt>
     438:	ed e2       	ldi	r30, 0x2D	; 45
     43a:	f2 e0       	ldi	r31, 0x02	; 2
			}

		}

		for (char i = 0; i < TEXTLEN; i++)
			curtext[i] = ' ';
     43c:	80 e2       	ldi	r24, 0x20	; 32
     43e:	d3 c0       	rjmp	.+422    	; 0x5e6 <MenuSelect+0x284>
			
				LCDSendCommand(CLR_DISP); 
				LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
			}
		}else{ // OKBUT try to enter some value
			switch (menu_pos){
     440:	10 91 ea 01 	lds	r17, 0x01EA
     444:	13 30       	cpi	r17, 0x03	; 3
     446:	09 f4       	brne	.+2      	; 0x44a <MenuSelect+0xe8>
     448:	5a c0       	rjmp	.+180    	; 0x4fe <MenuSelect+0x19c>
     44a:	14 30       	cpi	r17, 0x04	; 4
     44c:	28 f4       	brcc	.+10     	; 0x458 <MenuSelect+0xf6>
     44e:	11 30       	cpi	r17, 0x01	; 1
     450:	f9 f0       	breq	.+62     	; 0x490 <MenuSelect+0x12e>
     452:	12 30       	cpi	r17, 0x02	; 2
     454:	c0 f5       	brcc	.+112    	; 0x4c6 <MenuSelect+0x164>
     456:	09 c0       	rjmp	.+18     	; 0x46a <MenuSelect+0x108>
     458:	15 30       	cpi	r17, 0x05	; 5
     45a:	09 f4       	brne	.+2      	; 0x45e <MenuSelect+0xfc>
     45c:	77 c0       	rjmp	.+238    	; 0x54c <MenuSelect+0x1ea>
     45e:	15 30       	cpi	r17, 0x05	; 5
     460:	08 f4       	brcc	.+2      	; 0x464 <MenuSelect+0x102>
     462:	65 c0       	rjmp	.+202    	; 0x52e <MenuSelect+0x1cc>
     464:	16 30       	cpi	r17, 0x06	; 6
     466:	41 f7       	brne	.-48     	; 0x438 <MenuSelect+0xd6>
     468:	89 c0       	rjmp	.+274    	; 0x57c <MenuSelect+0x21a>

				case ESTOP:
					if ( StrCmp(curtext, stopcode, TEXTLEN) ){
     46a:	8d e2       	ldi	r24, 0x2D	; 45
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	6b e0       	ldi	r22, 0x0B	; 11
     470:	72 e0       	ldi	r23, 0x02	; 2
     472:	40 e1       	ldi	r20, 0x10	; 16
     474:	0e 94 67 00 	call	0xce	; 0xce <StrCmp>
     478:	88 23       	and	r24, r24
     47a:	99 f4       	brne	.+38     	; 0x4a2 <MenuSelect+0x140>
						LCDSendCommand(DD_RAM_ADDR2);
						LCDSendTxt(WRONGCODE);
					}else{
						LCDSendCommand(DD_RAM_ADDR2);
     47c:	80 ec       	ldi	r24, 0xC0	; 192
     47e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
						LCDSendTxt(CODEOK);
     482:	86 e3       	ldi	r24, 0x36	; 54
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 ba 04 	call	0x974	; 0x974 <LCDSendTxt>
						GamePaused();
     48a:	0e 94 4e 01 	call	0x29c	; 0x29c <GamePaused>
     48e:	d4 cf       	rjmp	.-88     	; 0x438 <MenuSelect+0xd6>
					}
					break;

				case ESTART:
					if ( StrCmp(curtext, startcode, TEXTLEN) ){
     490:	8d e2       	ldi	r24, 0x2D	; 45
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	6b ef       	ldi	r22, 0xFB	; 251
     496:	71 e0       	ldi	r23, 0x01	; 1
     498:	40 e1       	ldi	r20, 0x10	; 16
     49a:	0e 94 67 00 	call	0xce	; 0xce <StrCmp>
     49e:	88 23       	and	r24, r24
     4a0:	31 f0       	breq	.+12     	; 0x4ae <MenuSelect+0x14c>
						LCDSendCommand(DD_RAM_ADDR2);
     4a2:	80 ec       	ldi	r24, 0xC0	; 192
     4a4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
						LCDSendTxt(WRONGCODE);
     4a8:	85 e2       	ldi	r24, 0x25	; 37
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	1a c0       	rjmp	.+52     	; 0x4e2 <MenuSelect+0x180>
					}else{
						LCDSendCommand(DD_RAM_ADDR2);
     4ae:	80 ec       	ldi	r24, 0xC0	; 192
     4b0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
						LCDSendTxt(CODEOK);
     4b4:	86 e3       	ldi	r24, 0x36	; 54
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 ba 04 	call	0x974	; 0x974 <LCDSendTxt>
						is_timer = 1;
     4bc:	10 93 22 02 	sts	0x0222, r17
						is_game = 1;
     4c0:	10 93 21 02 	sts	0x0221, r17
     4c4:	b9 cf       	rjmp	.-142    	; 0x438 <MenuSelect+0xd6>
					}
					break;

				case EADMIN:
					if ( StrCmp(curtext, adminpass, TEXTLEN) ){
     4c6:	8d e2       	ldi	r24, 0x2D	; 45
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	6b ee       	ldi	r22, 0xEB	; 235
     4cc:	71 e0       	ldi	r23, 0x01	; 1
     4ce:	40 e1       	ldi	r20, 0x10	; 16
     4d0:	0e 94 67 00 	call	0xce	; 0xce <StrCmp>
     4d4:	88 23       	and	r24, r24
     4d6:	41 f0       	breq	.+16     	; 0x4e8 <MenuSelect+0x186>
						LCDSendCommand(DD_RAM_ADDR2);
     4d8:	80 ec       	ldi	r24, 0xC0	; 192
     4da:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
						LCDSendTxt(WRONGPASS);
     4de:	87 e4       	ldi	r24, 0x47	; 71
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 ba 04 	call	0x974	; 0x974 <LCDSendTxt>
     4e6:	a8 cf       	rjmp	.-176    	; 0x438 <MenuSelect+0xd6>
					}else{
						LCDSendCommand(DD_RAM_ADDR2);
     4e8:	80 ec       	ldi	r24, 0xC0	; 192
     4ea:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
						LCDSendTxt(CORRECTPASS);
     4ee:	88 e5       	ldi	r24, 0x58	; 88
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 ba 04 	call	0x974	; 0x974 <LCDSendTxt>
						is_admin = 1;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	80 93 20 02 	sts	0x0220, r24
     4fc:	9d cf       	rjmp	.-198    	; 0x438 <MenuSelect+0xd6>
					}
					break;

				case SADMIN:
					StrCp(curtext, adminpass, TEXTLEN);
     4fe:	8d e2       	ldi	r24, 0x2D	; 45
     500:	92 e0       	ldi	r25, 0x02	; 2
     502:	6b ee       	ldi	r22, 0xEB	; 235
     504:	71 e0       	ldi	r23, 0x01	; 1
     506:	40 e1       	ldi	r20, 0x10	; 16
     508:	0e 94 79 00 	call	0xf2	; 0xf2 <StrCp>

					addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_ADMPASS;
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	80 93 29 02 	sts	0x0229, r24
					eeprom_write_block (adminpass, addrr, TEXTLEN);
     512:	8b ee       	ldi	r24, 0xEB	; 235
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	40 e1       	ldi	r20, 0x10	; 16
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	0e 94 89 08 	call	0x1112	; 0x1112 <__eewr_block_m128>

					LCDSendCommand(DD_RAM_ADDR2);
     522:	80 ec       	ldi	r24, 0xC0	; 192
     524:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
					LCDSendTxt(CORRECTPASS);
     528:	88 e5       	ldi	r24, 0x58	; 88
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	da cf       	rjmp	.-76     	; 0x4e2 <MenuSelect+0x180>
					break;

				case SSTART:
					StrCp(curtext, startcode, TEXTLEN);
     52e:	8d e2       	ldi	r24, 0x2D	; 45
     530:	92 e0       	ldi	r25, 0x02	; 2
     532:	6b ef       	ldi	r22, 0xFB	; 251
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	40 e1       	ldi	r20, 0x10	; 16
     538:	0e 94 79 00 	call	0xf2	; 0xf2 <StrCp>

					addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STARTCODE;
     53c:	81 e1       	ldi	r24, 0x11	; 17
     53e:	80 93 29 02 	sts	0x0229, r24
					eeprom_write_block (startcode, addrr, TEXTLEN);
     542:	8b ef       	ldi	r24, 0xFB	; 251
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	61 e1       	ldi	r22, 0x11	; 17
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	0e c0       	rjmp	.+28     	; 0x568 <MenuSelect+0x206>
					LCDSendCommand(DD_RAM_ADDR2);
					LCDSendTxt(CODEOK);
					break;

				case SSTOP:
					StrCp(curtext, stopcode, TEXTLEN);
     54c:	8d e2       	ldi	r24, 0x2D	; 45
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	6b e0       	ldi	r22, 0x0B	; 11
     552:	72 e0       	ldi	r23, 0x02	; 2
     554:	40 e1       	ldi	r20, 0x10	; 16
     556:	0e 94 79 00 	call	0xf2	; 0xf2 <StrCp>

					addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STOPCODE;
     55a:	81 e2       	ldi	r24, 0x21	; 33
     55c:	80 93 29 02 	sts	0x0229, r24
					eeprom_write_block (stopcode, addrr, TEXTLEN);
     560:	8b e0       	ldi	r24, 0x0B	; 11
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	61 e2       	ldi	r22, 0x21	; 33
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	40 e1       	ldi	r20, 0x10	; 16
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	0e 94 89 08 	call	0x1112	; 0x1112 <__eewr_block_m128>
	
					LCDSendCommand(DD_RAM_ADDR2);
     570:	80 ec       	ldi	r24, 0xC0	; 192
     572:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
					LCDSendTxt(CODEOK);
     576:	86 e3       	ldi	r24, 0x36	; 54
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	b3 cf       	rjmp	.-154    	; 0x4e2 <MenuSelect+0x180>
					break;
     57c:	ed e2       	ldi	r30, 0x2D	; 45
     57e:	f2 e0       	ldi	r31, 0x02	; 2

				case STIMER:

					for (char i = 0; i < TEXTLEN; i++)
						if (curtext[i] == ' ')
     580:	80 81       	ld	r24, Z
     582:	80 32       	cpi	r24, 0x20	; 32
     584:	09 f4       	brne	.+2      	; 0x588 <MenuSelect+0x226>
							curtext[i] = 0;	
     586:	10 82       	st	Z, r1
     588:	31 96       	adiw	r30, 0x01	; 1
					LCDSendTxt(CODEOK);
					break;

				case STIMER:

					for (char i = 0; i < TEXTLEN; i++)
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	ed 33       	cpi	r30, 0x3D	; 61
     58e:	f8 07       	cpc	r31, r24
     590:	b9 f7       	brne	.-18     	; 0x580 <MenuSelect+0x21e>
						if (curtext[i] == ' ')
							curtext[i] = 0;	
					timer_init_val = atoi(curtext);
     592:	cf 01       	movw	r24, r30
     594:	40 97       	sbiw	r24, 0x10	; 16
     596:	0e 94 0d 06 	call	0xc1a	; 0xc1a <atoi>
     59a:	ac 01       	movw	r20, r24
     59c:	66 27       	eor	r22, r22
     59e:	57 fd       	sbrc	r21, 7
     5a0:	60 95       	com	r22
     5a2:	76 2f       	mov	r23, r22
     5a4:	40 93 1b 02 	sts	0x021B, r20
     5a8:	50 93 1c 02 	sts	0x021C, r21
     5ac:	60 93 1d 02 	sts	0x021D, r22
     5b0:	70 93 1e 02 	sts	0x021E, r23
					timer_cur = timer_init_val;
     5b4:	40 93 24 02 	sts	0x0224, r20
     5b8:	50 93 25 02 	sts	0x0225, r21
     5bc:	60 93 26 02 	sts	0x0226, r22
     5c0:	70 93 27 02 	sts	0x0227, r23

					addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_TIMER;
     5c4:	81 e3       	ldi	r24, 0x31	; 49
     5c6:	80 93 29 02 	sts	0x0229, r24
					eeprom_write_dword (addrr, timer_init_val);
     5ca:	81 e3       	ldi	r24, 0x31	; 49
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 a0 08 	call	0x1140	; 0x1140 <__eewr_dword_m128>

					LCDSendCommand(DD_RAM_ADDR2);
     5d2:	80 ec       	ldi	r24, 0xC0	; 192
     5d4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
					LCDSendTxt(TIMEROK);
     5d8:	89 e6       	ldi	r24, 0x69	; 105
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 ba 04 	call	0x974	; 0x974 <LCDSendTxt>
					is_admin = 0;
     5e0:	10 92 20 02 	sts	0x0220, r1
					break;
     5e4:	29 cf       	rjmp	.-430    	; 0x438 <MenuSelect+0xd6>
			}

		}

		for (char i = 0; i < TEXTLEN; i++)
			curtext[i] = ' ';
     5e6:	81 93       	st	Z+, r24

			}

		}

		for (char i = 0; i < TEXTLEN; i++)
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	ed 33       	cpi	r30, 0x3D	; 61
     5ec:	f9 07       	cpc	r31, r25
     5ee:	d9 f7       	brne	.-10     	; 0x5e6 <MenuSelect+0x284>
			curtext[i] = ' ';
		pos = 0;
     5f0:	10 92 2a 02 	sts	0x022A, r1
			
	}

	return 0;
}
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	1f 91       	pop	r17
     5f8:	08 95       	ret

000005fa <Port_Init>:

//---------------------------------------------------------------

void Port_Init()
{
	PORTA = 0b00000000;		DDRA = 0b11000000;
     5fa:	1b ba       	out	0x1b, r1	; 27
     5fc:	80 ec       	ldi	r24, 0xC0	; 192
     5fe:	8a bb       	out	0x1a, r24	; 26
//	PORTB = 0b00000000;		DDRB = 0b00000000;
	LCDPORT = 0b00000000;	DDRC = 0b11110111;
     600:	15 ba       	out	0x15, r1	; 21
     602:	87 ef       	ldi	r24, 0xF7	; 247
     604:	84 bb       	out	0x14, r24	; 20
//	PORTD = 0b11000000;		DDRD = 0b00001000;
//	PORTE = 0b00000000;		DDRE = 0b00110000;
//	PORTF = 0b00000000;		DDRF = 0b00000000;	
//	PORTG = 0b00000000;		DDRG = 0b00000000;
}
     606:	08 95       	ret

00000608 <__vector_14>:

//---------------------------------------------------------------

ISR (TIMER1_OVF_vect)
{
     608:	1f 92       	push	r1
     60a:	0f 92       	push	r0
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	0f 92       	push	r0
     610:	0b b6       	in	r0, 0x3b	; 59
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
	static char key = 0;
	TCNT1 = 65536- 6244; //  31220;
     62e:	8c e9       	ldi	r24, 0x9C	; 156
     630:	97 ee       	ldi	r25, 0xE7	; 231
     632:	9d bd       	out	0x2d, r25	; 45
     634:	8c bd       	out	0x2c, r24	; 44
    TCCR1B = (1<<CS12);
     636:	84 e0       	ldi	r24, 0x04	; 4
     638:	8e bd       	out	0x2e, r24	; 46
    TIMSK |= (1<<TOIE1);
     63a:	87 b7       	in	r24, 0x37	; 55
     63c:	84 60       	ori	r24, 0x04	; 4
     63e:	87 bf       	out	0x37, r24	; 55

	PrintToSevenSeg(timer_cur);
     640:	60 91 24 02 	lds	r22, 0x0224
     644:	70 91 25 02 	lds	r23, 0x0225
     648:	80 91 26 02 	lds	r24, 0x0226
     64c:	90 91 27 02 	lds	r25, 0x0227
     650:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <PrintToSevenSeg>

	if (!is_key)
     654:	80 91 23 02 	lds	r24, 0x0223
     658:	88 23       	and	r24, r24
     65a:	29 f4       	brne	.+10     	; 0x666 <__vector_14+0x5e>
		is_key = CheckKey();
     65c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <CheckKey>
     660:	80 93 23 02 	sts	0x0223, r24
     664:	02 c0       	rjmp	.+4      	; 0x66a <__vector_14+0x62>
	else
		CheckState(is_key);
     666:	0e 94 8d 01 	call	0x31a	; 0x31a <CheckState>

	key = GetButton();
     66a:	0e 94 a2 00 	call	0x144	; 0x144 <GetButton>
     66e:	80 93 28 02 	sts	0x0228, r24
	if (key)
     672:	88 23       	and	r24, r24
     674:	11 f0       	breq	.+4      	; 0x67a <__vector_14+0x72>
		MenuSelect(key);
     676:	0e 94 b1 01 	call	0x362	; 0x362 <MenuSelect>

}
     67a:	ff 91       	pop	r31
     67c:	ef 91       	pop	r30
     67e:	bf 91       	pop	r27
     680:	af 91       	pop	r26
     682:	9f 91       	pop	r25
     684:	8f 91       	pop	r24
     686:	7f 91       	pop	r23
     688:	6f 91       	pop	r22
     68a:	5f 91       	pop	r21
     68c:	4f 91       	pop	r20
     68e:	3f 91       	pop	r19
     690:	2f 91       	pop	r18
     692:	0f 90       	pop	r0
     694:	0b be       	out	0x3b, r0	; 59
     696:	0f 90       	pop	r0
     698:	0f be       	out	0x3f, r0	; 63
     69a:	0f 90       	pop	r0
     69c:	1f 90       	pop	r1
     69e:	18 95       	reti

000006a0 <__vector_29>:

//---------------------------------------------------------------

ISR (TIMER3_OVF_vect)
{
     6a0:	1f 92       	push	r1
     6a2:	0f 92       	push	r0
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	0f 92       	push	r0
     6a8:	0b b6       	in	r0, 0x3b	; 59
     6aa:	0f 92       	push	r0
     6ac:	11 24       	eor	r1, r1
     6ae:	2f 93       	push	r18
     6b0:	3f 93       	push	r19
     6b2:	4f 93       	push	r20
     6b4:	5f 93       	push	r21
     6b6:	6f 93       	push	r22
     6b8:	7f 93       	push	r23
     6ba:	8f 93       	push	r24
     6bc:	9f 93       	push	r25
     6be:	af 93       	push	r26
     6c0:	bf 93       	push	r27
     6c2:	ef 93       	push	r30
     6c4:	ff 93       	push	r31
	TCNT3 = 65536- 62439; 
     6c6:	89 e1       	ldi	r24, 0x19	; 25
     6c8:	9c e0       	ldi	r25, 0x0C	; 12
     6ca:	90 93 89 00 	sts	0x0089, r25
     6ce:	80 93 88 00 	sts	0x0088, r24
//    TCCR3B = (1<<CS12);
    ETIMSK |= (1<<TOIE3);
     6d2:	80 91 7d 00 	lds	r24, 0x007D
     6d6:	84 60       	ori	r24, 0x04	; 4
     6d8:	80 93 7d 00 	sts	0x007D, r24


	if (is_timer){
     6dc:	80 91 22 02 	lds	r24, 0x0222
     6e0:	88 23       	and	r24, r24
     6e2:	e9 f0       	breq	.+58     	; 0x71e <__vector_29+0x7e>
		if (!(--timer_cur))
     6e4:	80 91 24 02 	lds	r24, 0x0224
     6e8:	90 91 25 02 	lds	r25, 0x0225
     6ec:	a0 91 26 02 	lds	r26, 0x0226
     6f0:	b0 91 27 02 	lds	r27, 0x0227
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	a1 09       	sbc	r26, r1
     6f8:	b1 09       	sbc	r27, r1
     6fa:	80 93 24 02 	sts	0x0224, r24
     6fe:	90 93 25 02 	sts	0x0225, r25
     702:	a0 93 26 02 	sts	0x0226, r26
     706:	b0 93 27 02 	sts	0x0227, r27
     70a:	00 97       	sbiw	r24, 0x00	; 0
     70c:	a1 05       	cpc	r26, r1
     70e:	b1 05       	cpc	r27, r1
     710:	11 f4       	brne	.+4      	; 0x716 <__vector_29+0x76>
			MakeBoom();	
     712:	0e 94 52 01 	call	0x2a4	; 0x2a4 <MakeBoom>
		
		INVBIT(PORTA,6);
     716:	8b b3       	in	r24, 0x1b	; 27
     718:	90 e4       	ldi	r25, 0x40	; 64
     71a:	89 27       	eor	r24, r25
     71c:	8b bb       	out	0x1b, r24	; 27
	}	
}
     71e:	ff 91       	pop	r31
     720:	ef 91       	pop	r30
     722:	bf 91       	pop	r27
     724:	af 91       	pop	r26
     726:	9f 91       	pop	r25
     728:	8f 91       	pop	r24
     72a:	7f 91       	pop	r23
     72c:	6f 91       	pop	r22
     72e:	5f 91       	pop	r21
     730:	4f 91       	pop	r20
     732:	3f 91       	pop	r19
     734:	2f 91       	pop	r18
     736:	0f 90       	pop	r0
     738:	0b be       	out	0x3b, r0	; 59
     73a:	0f 90       	pop	r0
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	0f 90       	pop	r0
     740:	1f 90       	pop	r1
     742:	18 95       	reti

00000744 <GetSavedData>:
{
	char addr = 0;

	//get admin pass
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_ADMPASS;
	eeprom_read_block (adminpass, addr, TEXTLEN);
     744:	8b ee       	ldi	r24, 0xEB	; 235
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	40 e1       	ldi	r20, 0x10	; 16
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__eerd_block_m128>

	//get start code
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STARTCODE;
	eeprom_read_block (startcode, addr, TEXTLEN);
     754:	8b ef       	ldi	r24, 0xFB	; 251
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	61 e1       	ldi	r22, 0x11	; 17
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	40 e1       	ldi	r20, 0x10	; 16
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__eerd_block_m128>

	//get stop code
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STOPCODE;
	eeprom_read_block (stopcode, addr, TEXTLEN);
     764:	8b e0       	ldi	r24, 0x0B	; 11
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	61 e2       	ldi	r22, 0x21	; 33
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	40 e1       	ldi	r20, 0x10	; 16
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__eerd_block_m128>
	

	// get timer initial value
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_TIMER;
	timer_init_val = eeprom_read_dword(addr);
     774:	81 e3       	ldi	r24, 0x31	; 49
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 83 08 	call	0x1106	; 0x1106 <__eerd_dword_m128>
     77c:	60 93 1b 02 	sts	0x021B, r22
     780:	70 93 1c 02 	sts	0x021C, r23
     784:	80 93 1d 02 	sts	0x021D, r24
     788:	90 93 1e 02 	sts	0x021E, r25
	

	timer_cur = timer_init_val;
     78c:	60 93 24 02 	sts	0x0224, r22
     790:	70 93 25 02 	sts	0x0225, r23
     794:	80 93 26 02 	sts	0x0226, r24
     798:	90 93 27 02 	sts	0x0227, r25
	return 0;
}
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	08 95       	ret

000007a0 <CheckResset>:

//---------------------------------------------------------------

void CheckResset()
{
	if (!(BUTTONPIN & 0b00000001)){
     7a0:	c8 99       	sbic	0x19, 0	; 25
     7a2:	24 c0       	rjmp	.+72     	; 0x7ec <CheckResset+0x4c>
		char addrr;

		addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_ADMPASS;
		eeprom_write_block (adminpass, addrr, TEXTLEN);
     7a4:	8b ee       	ldi	r24, 0xEB	; 235
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	40 e1       	ldi	r20, 0x10	; 16
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	0e 94 89 08 	call	0x1112	; 0x1112 <__eewr_block_m128>

		addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STARTCODE;
		eeprom_write_block (startcode, addrr, TEXTLEN);
     7b4:	8b ef       	ldi	r24, 0xFB	; 251
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	61 e1       	ldi	r22, 0x11	; 17
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	40 e1       	ldi	r20, 0x10	; 16
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	0e 94 89 08 	call	0x1112	; 0x1112 <__eewr_block_m128>

		addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STOPCODE;
		eeprom_write_block (stopcode, addrr, TEXTLEN);
     7c4:	8b e0       	ldi	r24, 0x0B	; 11
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	61 e2       	ldi	r22, 0x21	; 33
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	40 e1       	ldi	r20, 0x10	; 16
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	0e 94 89 08 	call	0x1112	; 0x1112 <__eewr_block_m128>

		addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_TIMER;
		eeprom_write_dword (addrr, timer_init_val);
     7d4:	40 91 1b 02 	lds	r20, 0x021B
     7d8:	50 91 1c 02 	lds	r21, 0x021C
     7dc:	60 91 1d 02 	lds	r22, 0x021D
     7e0:	70 91 1e 02 	lds	r23, 0x021E
     7e4:	81 e3       	ldi	r24, 0x31	; 49
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 a0 08 	call	0x1140	; 0x1140 <__eewr_dword_m128>
     7ec:	08 95       	ret

000007ee <main>:
//---------------------------------------------------------------


int main()
{
	Port_Init();
     7ee:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Port_Init>

	CheckResset();
     7f2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <CheckResset>





	GetSavedData();
     7f6:	0e 94 a2 03 	call	0x744	; 0x744 <GetSavedData>
	LCD_Init();
     7fa:	0e 94 20 04 	call	0x840	; 0x840 <LCD_Init>
	//LCDSendCommand(DISP_OFF);
	LCDSendCommand(DISP_ON);
     7fe:	8c e0       	ldi	r24, 0x0C	; 12
     800:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>

	LCDSendCommand(CLR_DISP);
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>

	LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
     80a:	80 91 ea 01 	lds	r24, 0x01EA
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	54 e0       	ldi	r21, 0x04	; 4
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	5a 95       	dec	r21
     818:	e1 f7       	brne	.-8      	; 0x812 <main+0x24>
     81a:	86 58       	subi	r24, 0x86	; 134
     81c:	9e 4f       	sbci	r25, 0xFE	; 254
     81e:	60 e1       	ldi	r22, 0x10	; 16
     820:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCDSendUnsafeCounteredTxt>

	SetupTIMER1();
     824:	0e 94 87 00 	call	0x10e	; 0x10e <SetupTIMER1>
	SetupTIMER3();
     828:	0e 94 92 00 	call	0x124	; 0x124 <SetupTIMER3>
     82c:	ff cf       	rjmp	.-2      	; 0x82c <main+0x3e>

0000082e <E_Pulse>:

/*****************************L C D**************************/

void E_Pulse()
{
	LCDPORT = LCDPORT | 0b00000100;	//set E to high
     82e:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     830:	8f e9       	ldi	r24, 0x9F	; 159
     832:	9f e0       	ldi	r25, 0x0F	; 15
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <E_Pulse+0x6>
     838:	00 c0       	rjmp	.+0      	; 0x83a <E_Pulse+0xc>
     83a:	00 00       	nop
	_delay_ms(1) ;				//delay ~110ms
	LCDPORT = LCDPORT & 0b11111011;	//set E to low
     83c:	aa 98       	cbi	0x15, 2	; 21
}
     83e:	08 95       	ret

00000840 <LCD_Init>:

void LCD_Init()
{
     840:	1f 93       	push	r17
	//LCD initialization
	//step by step (from Gosho) - from DATASHEET

	LCDPORT = LCDPORT & 0b11111110;
     842:	a8 98       	cbi	0x15, 0	; 21
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	93 ec       	ldi	r25, 0xC3	; 195
     848:	a9 e0       	ldi	r26, 0x09	; 9
     84a:	81 50       	subi	r24, 0x01	; 1
     84c:	90 40       	sbci	r25, 0x00	; 0
     84e:	a0 40       	sbci	r26, 0x00	; 0
     850:	e1 f7       	brne	.-8      	; 0x84a <LCD_Init+0xa>
     852:	00 c0       	rjmp	.+0      	; 0x854 <LCD_Init+0x14>
     854:	00 00       	nop
	
	_delay_ms(200);


	LCDPORT = 0b00110000;						//set D4, D5 port to 1
     856:	10 e3       	ldi	r17, 0x30	; 48
     858:	15 bb       	out	0x15, r17	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     85a:	90 e1       	ldi	r25, 0x10	; 16
     85c:	9a 95       	dec	r25
     85e:	f1 f7       	brne	.-4      	; 0x85c <LCD_Init+0x1c>
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     860:	0e 94 17 04 	call	0x82e	; 0x82e <E_Pulse>
     864:	a0 e1       	ldi	r26, 0x10	; 16
     866:	aa 95       	dec	r26
     868:	f1 f7       	brne	.-4      	; 0x866 <LCD_Init+0x26>
	PORTDELAY 

	LCDPORT = 0b00110000;						//set D4, D5 port to 1
     86a:	15 bb       	out	0x15, r17	; 21
     86c:	b0 e1       	ldi	r27, 0x10	; 16
     86e:	ba 95       	dec	r27
     870:	f1 f7       	brne	.-4      	; 0x86e <LCD_Init+0x2e>
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     872:	0e 94 17 04 	call	0x82e	; 0x82e <E_Pulse>
     876:	80 e1       	ldi	r24, 0x10	; 16
     878:	8a 95       	dec	r24
     87a:	f1 f7       	brne	.-4      	; 0x878 <LCD_Init+0x38>
	PORTDELAY

	LCDPORT = 0b00110000;						//set D4, D5 port to 1
     87c:	15 bb       	out	0x15, r17	; 21
     87e:	90 e1       	ldi	r25, 0x10	; 16
     880:	9a 95       	dec	r25
     882:	f1 f7       	brne	.-4      	; 0x880 <LCD_Init+0x40>
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     884:	0e 94 17 04 	call	0x82e	; 0x82e <E_Pulse>
     888:	a0 e1       	ldi	r26, 0x10	; 16
     88a:	aa 95       	dec	r26
     88c:	f1 f7       	brne	.-4      	; 0x88a <LCD_Init+0x4a>
	PORTDELAY

	LCDPORT = 0b00100000;						//set D4 to 0, D5 port to 1
     88e:	80 e2       	ldi	r24, 0x20	; 32
     890:	85 bb       	out	0x15, r24	; 21
     892:	b0 e1       	ldi	r27, 0x10	; 16
     894:	ba 95       	dec	r27
     896:	f1 f7       	brne	.-4      	; 0x894 <LCD_Init+0x54>
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     898:	0e 94 17 04 	call	0x82e	; 0x82e <E_Pulse>
}
     89c:	1f 91       	pop	r17
     89e:	08 95       	ret

000008a0 <LCDSendCommand>:

void LCDSendCommand(unsigned char a)
{
     8a0:	df 93       	push	r29
     8a2:	cf 93       	push	r28
     8a4:	0f 92       	push	r0
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
	unsigned char data = 0b00001111 | a;					//get high 4 bits
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     8aa:	25 b3       	in	r18, 0x15	; 21
	E_Pulse();								//high->low to E port (pulse)
}

void LCDSendCommand(unsigned char a)
{
	unsigned char data = 0b00001111 | a;					//get high 4 bits
     8ac:	98 2f       	mov	r25, r24
     8ae:	9f 60       	ori	r25, 0x0F	; 15
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     8b0:	20 6f       	ori	r18, 0xF0	; 240
     8b2:	92 23       	and	r25, r18
     8b4:	95 bb       	out	0x15, r25	; 21
     8b6:	90 e1       	ldi	r25, 0x10	; 16
     8b8:	9a 95       	dec	r25
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <LCDSendCommand+0x18>
	PORTDELAY
	LCDPORT = LCDPORT & 0b11111110;				//set RS port to 0
     8bc:	a8 98       	cbi	0x15, 0	; 21
     8be:	e0 e1       	ldi	r30, 0x10	; 16
     8c0:	ea 95       	dec	r30
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <LCDSendCommand+0x20>
	PORTDELAY
	E_Pulse(); 
     8c4:	89 83       	std	Y+1, r24	; 0x01
     8c6:	0e 94 17 04 	call	0x82e	; 0x82e <E_Pulse>
     8ca:	ef ec       	ldi	r30, 0xCF	; 207
     8cc:	f7 e0       	ldi	r31, 0x07	; 7
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <LCDSendCommand+0x2e>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <LCDSendCommand+0x34>
     8d4:	00 00       	nop
	
	_delay_us(500);                             //pulse to set D4-D7 bits

	data = a<<4;							//get low 4 bits
	LCDPORT = (LCDPORT & 0b00001111) | data;	//set D4-D7
     8d6:	95 b3       	in	r25, 0x15	; 21
	PORTDELAY
	E_Pulse(); 
	
	_delay_us(500);                             //pulse to set D4-D7 bits

	data = a<<4;							//get low 4 bits
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	82 95       	swap	r24
     8dc:	80 7f       	andi	r24, 0xF0	; 240
	LCDPORT = (LCDPORT & 0b00001111) | data;	//set D4-D7
     8de:	9f 70       	andi	r25, 0x0F	; 15
     8e0:	89 2b       	or	r24, r25
     8e2:	85 bb       	out	0x15, r24	; 21
     8e4:	f0 e1       	ldi	r31, 0x10	; 16
     8e6:	fa 95       	dec	r31
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <LCDSendCommand+0x46>
	PORTDELAY
	LCDPORT = LCDPORT & 0b11111110;				//set RS port to 0 -> display set to command mode
     8ea:	a8 98       	cbi	0x15, 0	; 21
     8ec:	80 e1       	ldi	r24, 0x10	; 16
     8ee:	8a 95       	dec	r24
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <LCDSendCommand+0x4e>
	PORTDELAY
	E_Pulse();                              //pulse to set d4-d7 bits
     8f2:	0e 94 17 04 	call	0x82e	; 0x82e <E_Pulse>
     8f6:	ef ec       	ldi	r30, 0xCF	; 207
     8f8:	f7 e0       	ldi	r31, 0x07	; 7
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <LCDSendCommand+0x5a>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <LCDSendCommand+0x60>
     900:	00 00       	nop

	_delay_us(500);

}
     902:	0f 90       	pop	r0
     904:	cf 91       	pop	r28
     906:	df 91       	pop	r29
     908:	08 95       	ret

0000090a <LCDSendChar>:

void LCDSendChar(unsigned char a)
{
     90a:	df 93       	push	r29
     90c:	cf 93       	push	r28
     90e:	0f 92       	push	r0
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
	unsigned char data = 0b00001111 | a;					//get high 4 bits
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     914:	25 b3       	in	r18, 0x15	; 21

}

void LCDSendChar(unsigned char a)
{
	unsigned char data = 0b00001111 | a;					//get high 4 bits
     916:	98 2f       	mov	r25, r24
     918:	9f 60       	ori	r25, 0x0F	; 15
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     91a:	20 6f       	ori	r18, 0xF0	; 240
     91c:	92 23       	and	r25, r18
     91e:	95 bb       	out	0x15, r25	; 21
     920:	90 e1       	ldi	r25, 0x10	; 16
     922:	9a 95       	dec	r25
     924:	f1 f7       	brne	.-4      	; 0x922 <LCDSendChar+0x18>
	PORTDELAY
	LCDPORT = LCDPORT | 0b00000001;				//set RS port to 1
     926:	a8 9a       	sbi	0x15, 0	; 21
     928:	e0 e1       	ldi	r30, 0x10	; 16
     92a:	ea 95       	dec	r30
     92c:	f1 f7       	brne	.-4      	; 0x92a <LCDSendChar+0x20>
	PORTDELAY
	E_Pulse();                              //pulse to set D4-D7 bits
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	0e 94 17 04 	call	0x82e	; 0x82e <E_Pulse>
     934:	ef ec       	ldi	r30, 0xCF	; 207
     936:	f7 e0       	ldi	r31, 0x07	; 7
     938:	31 97       	sbiw	r30, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <LCDSendChar+0x2e>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <LCDSendChar+0x34>
     93e:	00 00       	nop

	_delay_us(500);

	data = a<<4;							//get low 4 bits
	LCDPORT = (LCDPORT & 0b00001111) | data;	//clear D4-D7
     940:	95 b3       	in	r25, 0x15	; 21
	PORTDELAY
	E_Pulse();                              //pulse to set D4-D7 bits

	_delay_us(500);

	data = a<<4;							//get low 4 bits
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	82 95       	swap	r24
     946:	80 7f       	andi	r24, 0xF0	; 240
	LCDPORT = (LCDPORT & 0b00001111) | data;	//clear D4-D7
     948:	9f 70       	andi	r25, 0x0F	; 15
     94a:	89 2b       	or	r24, r25
     94c:	85 bb       	out	0x15, r24	; 21
     94e:	f0 e1       	ldi	r31, 0x10	; 16
     950:	fa 95       	dec	r31
     952:	f1 f7       	brne	.-4      	; 0x950 <LCDSendChar+0x46>
	PORTDELAY
	LCDPORT = LCDPORT | 0b00000001;				//set RS port to 1 -> display set to command mode
     954:	a8 9a       	sbi	0x15, 0	; 21
     956:	80 e1       	ldi	r24, 0x10	; 16
     958:	8a 95       	dec	r24
     95a:	f1 f7       	brne	.-4      	; 0x958 <LCDSendChar+0x4e>
	PORTDELAY
	E_Pulse();                              //pulse to set d4-d7 bits
     95c:	0e 94 17 04 	call	0x82e	; 0x82e <E_Pulse>
     960:	ef ec       	ldi	r30, 0xCF	; 207
     962:	f7 e0       	ldi	r31, 0x07	; 7
     964:	31 97       	sbiw	r30, 0x01	; 1
     966:	f1 f7       	brne	.-4      	; 0x964 <LCDSendChar+0x5a>
     968:	00 c0       	rjmp	.+0      	; 0x96a <LCDSendChar+0x60>
     96a:	00 00       	nop

	_delay_us(500);
}
     96c:	0f 90       	pop	r0
     96e:	cf 91       	pop	r28
     970:	df 91       	pop	r29
     972:	08 95       	ret

00000974 <LCDSendTxt>:

void LCDSendTxt(char* a)
{
     974:	cf 92       	push	r12
     976:	df 92       	push	r13
     978:	ff 92       	push	r15
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	df 93       	push	r29
     980:	cf 93       	push	r28
     982:	0f 92       	push	r0
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	f8 2e       	mov	r15, r24

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < strlen(a); Temp++)
     98a:	0f 2d       	mov	r16, r15
     98c:	19 2f       	mov	r17, r25
     98e:	cc 24       	eor	r12, r12
     990:	dd 24       	eor	r13, r13
     992:	0d c0       	rjmp	.+26     	; 0x9ae <LCDSendTxt+0x3a>
  {
    LCDSendChar(a[Temp]);
     994:	f8 01       	movw	r30, r16
     996:	81 91       	ld	r24, Z+
     998:	8f 01       	movw	r16, r30
     99a:	99 83       	std	Y+1, r25	; 0x01
     99c:	0e 94 85 04 	call	0x90a	; 0x90a <LCDSendChar>
     9a0:	f0 e1       	ldi	r31, 0x10	; 16
     9a2:	fa 95       	dec	r31
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <LCDSendTxt+0x2e>
{

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < strlen(a); Temp++)
     9a6:	08 94       	sec
     9a8:	c1 1c       	adc	r12, r1
     9aa:	d1 1c       	adc	r13, r1
     9ac:	99 81       	ldd	r25, Y+1	; 0x01
     9ae:	af 2d       	mov	r26, r15
     9b0:	b9 2f       	mov	r27, r25
     9b2:	fd 01       	movw	r30, r26
     9b4:	01 90       	ld	r0, Z+
     9b6:	00 20       	and	r0, r0
     9b8:	e9 f7       	brne	.-6      	; 0x9b4 <LCDSendTxt+0x40>
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	ea 1b       	sub	r30, r26
     9be:	fb 0b       	sbc	r31, r27
     9c0:	ce 16       	cp	r12, r30
     9c2:	df 06       	cpc	r13, r31
     9c4:	38 f3       	brcs	.-50     	; 0x994 <LCDSendTxt+0x20>
  {
    LCDSendChar(a[Temp]);
	TEXTDELAY
  }
}
     9c6:	0f 90       	pop	r0
     9c8:	cf 91       	pop	r28
     9ca:	df 91       	pop	r29
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	df 90       	pop	r13
     9d4:	cf 90       	pop	r12
     9d6:	08 95       	ret

000009d8 <LCDSendUnsafeCounteredTxt>:

void LCDSendUnsafeCounteredTxt(char* a, char count)
{
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < count; Temp++)
     9e4:	08 2f       	mov	r16, r24
     9e6:	19 2f       	mov	r17, r25
     9e8:	c0 e0       	ldi	r28, 0x00	; 0
     9ea:	d0 e0       	ldi	r29, 0x00	; 0
     9ec:	e6 2e       	mov	r14, r22
     9ee:	ff 24       	eor	r15, r15
     9f0:	09 c0       	rjmp	.+18     	; 0xa04 <LCDSendUnsafeCounteredTxt+0x2c>
  {
    LCDSendChar(a[Temp]);
     9f2:	f8 01       	movw	r30, r16
     9f4:	81 91       	ld	r24, Z+
     9f6:	8f 01       	movw	r16, r30
     9f8:	0e 94 85 04 	call	0x90a	; 0x90a <LCDSendChar>
     9fc:	f0 e1       	ldi	r31, 0x10	; 16
     9fe:	fa 95       	dec	r31
     a00:	f1 f7       	brne	.-4      	; 0x9fe <LCDSendUnsafeCounteredTxt+0x26>
{

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < count; Temp++)
     a02:	21 96       	adiw	r28, 0x01	; 1
     a04:	ce 15       	cp	r28, r14
     a06:	df 05       	cpc	r29, r15
     a08:	a4 f3       	brlt	.-24     	; 0x9f2 <LCDSendUnsafeCounteredTxt+0x1a>
  {
    LCDSendChar(a[Temp]);
	TEXTDELAY
  }
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	08 95       	ret

00000a18 <LCDSendInt>:


void LCDSendInt(long a)
{
     a18:	4f 92       	push	r4
     a1a:	5f 92       	push	r5
     a1c:	6f 92       	push	r6
     a1e:	7f 92       	push	r7
     a20:	8f 92       	push	r8
     a22:	9f 92       	push	r9
     a24:	af 92       	push	r10
     a26:	bf 92       	push	r11
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	1f 93       	push	r17
     a32:	df 93       	push	r29
     a34:	cf 93       	push	r28
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	a8 97       	sbiw	r28, 0x28	; 40
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	6b 01       	movw	r12, r22
     a48:	7c 01       	movw	r14, r24
	int C[20];
	unsigned char Temp=0, NumLen = 0;
	if (a < 0)
     a4a:	97 ff       	sbrs	r25, 7
     a4c:	0b c0       	rjmp	.+22     	; 0xa64 <LCDSendInt+0x4c>
	{
		LCDSendChar('-');
     a4e:	8d e2       	ldi	r24, 0x2D	; 45
     a50:	0e 94 85 04 	call	0x90a	; 0x90a <LCDSendChar>
		a = -a;
     a54:	f0 94       	com	r15
     a56:	e0 94       	com	r14
     a58:	d0 94       	com	r13
     a5a:	c0 94       	com	r12
     a5c:	c1 1c       	adc	r12, r1
     a5e:	d1 1c       	adc	r13, r1
     a60:	e1 1c       	adc	r14, r1
     a62:	f1 1c       	adc	r15, r1
  }
}


void LCDSendInt(long a)
{
     a64:	10 e0       	ldi	r17, 0x00	; 0
		a = -a;
	}
	do
	{	
		Temp++;
		C[Temp] = a % 10;
     a66:	2e 01       	movw	r4, r28
     a68:	08 94       	sec
     a6a:	41 1c       	adc	r4, r1
     a6c:	51 1c       	adc	r5, r1
     a6e:	2a e0       	ldi	r18, 0x0A	; 10
     a70:	62 2e       	mov	r6, r18
     a72:	71 2c       	mov	r7, r1
     a74:	81 2c       	mov	r8, r1
     a76:	91 2c       	mov	r9, r1
		LCDSendChar('-');
		a = -a;
	}
	do
	{	
		Temp++;
     a78:	1f 5f       	subi	r17, 0xFF	; 255
		C[Temp] = a % 10;
     a7a:	a1 2e       	mov	r10, r17
     a7c:	bb 24       	eor	r11, r11
     a7e:	aa 0c       	add	r10, r10
     a80:	bb 1c       	adc	r11, r11
     a82:	a4 0c       	add	r10, r4
     a84:	b5 1c       	adc	r11, r5
     a86:	c7 01       	movw	r24, r14
     a88:	b6 01       	movw	r22, r12
     a8a:	a4 01       	movw	r20, r8
     a8c:	93 01       	movw	r18, r6
     a8e:	0e 94 bc 05 	call	0xb78	; 0xb78 <__divmodsi4>
     a92:	f5 01       	movw	r30, r10
     a94:	71 83       	std	Z+1, r23	; 0x01
     a96:	60 83       	st	Z, r22
		a = a/10;
     a98:	69 01       	movw	r12, r18
     a9a:	7a 01       	movw	r14, r20
	}
	while (a);
     a9c:	c1 14       	cp	r12, r1
     a9e:	d1 04       	cpc	r13, r1
     aa0:	e1 04       	cpc	r14, r1
     aa2:	f1 04       	cpc	r15, r1
     aa4:	49 f7       	brne	.-46     	; 0xa78 <LCDSendInt+0x60>
     aa6:	0c c0       	rjmp	.+24     	; 0xac0 <LCDSendInt+0xa8>
	NumLen = Temp;
	for (Temp = NumLen; Temp>0; Temp--) LCDSendChar(C[Temp] + 48);
     aa8:	e1 2f       	mov	r30, r17
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	ee 0f       	add	r30, r30
     aae:	ff 1f       	adc	r31, r31
     ab0:	ec 0d       	add	r30, r12
     ab2:	fd 1d       	adc	r31, r13
     ab4:	80 81       	ld	r24, Z
     ab6:	80 5d       	subi	r24, 0xD0	; 208
     ab8:	0e 94 85 04 	call	0x90a	; 0x90a <LCDSendChar>
     abc:	11 50       	subi	r17, 0x01	; 1
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <LCDSendInt+0xb0>
     ac0:	6e 01       	movw	r12, r28
     ac2:	08 94       	sec
     ac4:	c1 1c       	adc	r12, r1
     ac6:	d1 1c       	adc	r13, r1
     ac8:	11 23       	and	r17, r17
     aca:	71 f7       	brne	.-36     	; 0xaa8 <LCDSendInt+0x90>
}
     acc:	a8 96       	adiw	r28, 0x28	; 40
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	de bf       	out	0x3e, r29	; 62
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	cd bf       	out	0x3d, r28	; 61
     ad8:	cf 91       	pop	r28
     ada:	df 91       	pop	r29
     adc:	1f 91       	pop	r17
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	bf 90       	pop	r11
     ae8:	af 90       	pop	r10
     aea:	9f 90       	pop	r9
     aec:	8f 90       	pop	r8
     aee:	7f 90       	pop	r7
     af0:	6f 90       	pop	r6
     af2:	5f 90       	pop	r5
     af4:	4f 90       	pop	r4
     af6:	08 95       	ret

00000af8 <LCDSendInt_Old>:

void LCDSendInt_Old(int a)
{
     af8:	1f 93       	push	r17
  int h = 0;
  int l = 0;

  l = a%10;
  h = a/10;
     afa:	6a e0       	ldi	r22, 0x0A	; 10
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	0e 94 a9 05 	call	0xb52	; 0xb52 <__divmodhi4>
     b02:	18 2f       	mov	r17, r24

  LCDSendChar(h+48);
     b04:	86 2f       	mov	r24, r22
     b06:	80 5d       	subi	r24, 0xD0	; 208
     b08:	0e 94 85 04 	call	0x90a	; 0x90a <LCDSendChar>
  LCDSendChar(l+48);
     b0c:	81 2f       	mov	r24, r17
     b0e:	80 5d       	subi	r24, 0xD0	; 208
     b10:	0e 94 85 04 	call	0x90a	; 0x90a <LCDSendChar>
}
     b14:	1f 91       	pop	r17
     b16:	08 95       	ret

00000b18 <SmartUp>:

void SmartUp(void)
{
	int Temp;
	for(Temp=0; Temp<1; Temp++) LCDSendCommand(CUR_UP);
     b18:	80 e8       	ldi	r24, 0x80	; 128
     b1a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
}
     b1e:	08 95       	ret

00000b20 <SmartDown>:

void SmartDown(void)
{
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	c8 e2       	ldi	r28, 0x28	; 40
     b26:	d0 e0       	ldi	r29, 0x00	; 0
	int Temp;
	for(Temp=0; Temp<40; Temp++) LCDSendCommand(CUR_DOWN);
     b28:	80 ec       	ldi	r24, 0xC0	; 192
     b2a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <LCDSendCommand>
     b2e:	21 97       	sbiw	r28, 0x01	; 1
     b30:	d9 f7       	brne	.-10     	; 0xb28 <SmartDown+0x8>
}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <Light>:

void Light(short a)
{
  if(a == 1)
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	91 05       	cpc	r25, r1
     b3c:	29 f4       	brne	.+10     	; 0xb48 <Light+0x10>
  {
	LCDPORT = LCDPORT | 0b00100000;
     b3e:	ad 9a       	sbi	0x15, 5	; 21
	DDRC = LCDPORT | 0b00100000;
     b40:	85 b3       	in	r24, 0x15	; 21
     b42:	80 62       	ori	r24, 0x20	; 32
     b44:	84 bb       	out	0x14, r24	; 20
     b46:	08 95       	ret

    //IO0SET_bit.P0_25 = 1;
    //IO0DIR_bit.P0_25 = 1;
  }
  if(a == 0)
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	11 f4       	brne	.+4      	; 0xb50 <Light+0x18>
  {
    LCDPORT = LCDPORT & 0b11011111;
     b4c:	ad 98       	cbi	0x15, 5	; 21
    DDRC = DDRC & 0b11011111;
     b4e:	a5 98       	cbi	0x14, 5	; 20
     b50:	08 95       	ret

00000b52 <__divmodhi4>:
     b52:	97 fb       	bst	r25, 7
     b54:	09 2e       	mov	r0, r25
     b56:	07 26       	eor	r0, r23
     b58:	0a d0       	rcall	.+20     	; 0xb6e <__divmodhi4_neg1>
     b5a:	77 fd       	sbrc	r23, 7
     b5c:	04 d0       	rcall	.+8      	; 0xb66 <__divmodhi4_neg2>
     b5e:	27 d0       	rcall	.+78     	; 0xbae <__udivmodhi4>
     b60:	06 d0       	rcall	.+12     	; 0xb6e <__divmodhi4_neg1>
     b62:	00 20       	and	r0, r0
     b64:	1a f4       	brpl	.+6      	; 0xb6c <__divmodhi4_exit>

00000b66 <__divmodhi4_neg2>:
     b66:	70 95       	com	r23
     b68:	61 95       	neg	r22
     b6a:	7f 4f       	sbci	r23, 0xFF	; 255

00000b6c <__divmodhi4_exit>:
     b6c:	08 95       	ret

00000b6e <__divmodhi4_neg1>:
     b6e:	f6 f7       	brtc	.-4      	; 0xb6c <__divmodhi4_exit>
     b70:	90 95       	com	r25
     b72:	81 95       	neg	r24
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	08 95       	ret

00000b78 <__divmodsi4>:
     b78:	97 fb       	bst	r25, 7
     b7a:	09 2e       	mov	r0, r25
     b7c:	05 26       	eor	r0, r21
     b7e:	0e d0       	rcall	.+28     	; 0xb9c <__divmodsi4_neg1>
     b80:	57 fd       	sbrc	r21, 7
     b82:	04 d0       	rcall	.+8      	; 0xb8c <__divmodsi4_neg2>
     b84:	28 d0       	rcall	.+80     	; 0xbd6 <__udivmodsi4>
     b86:	0a d0       	rcall	.+20     	; 0xb9c <__divmodsi4_neg1>
     b88:	00 1c       	adc	r0, r0
     b8a:	38 f4       	brcc	.+14     	; 0xb9a <__divmodsi4_exit>

00000b8c <__divmodsi4_neg2>:
     b8c:	50 95       	com	r21
     b8e:	40 95       	com	r20
     b90:	30 95       	com	r19
     b92:	21 95       	neg	r18
     b94:	3f 4f       	sbci	r19, 0xFF	; 255
     b96:	4f 4f       	sbci	r20, 0xFF	; 255
     b98:	5f 4f       	sbci	r21, 0xFF	; 255

00000b9a <__divmodsi4_exit>:
     b9a:	08 95       	ret

00000b9c <__divmodsi4_neg1>:
     b9c:	f6 f7       	brtc	.-4      	; 0xb9a <__divmodsi4_exit>
     b9e:	90 95       	com	r25
     ba0:	80 95       	com	r24
     ba2:	70 95       	com	r23
     ba4:	61 95       	neg	r22
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	8f 4f       	sbci	r24, 0xFF	; 255
     baa:	9f 4f       	sbci	r25, 0xFF	; 255
     bac:	08 95       	ret

00000bae <__udivmodhi4>:
     bae:	aa 1b       	sub	r26, r26
     bb0:	bb 1b       	sub	r27, r27
     bb2:	51 e1       	ldi	r21, 0x11	; 17
     bb4:	07 c0       	rjmp	.+14     	; 0xbc4 <__udivmodhi4_ep>

00000bb6 <__udivmodhi4_loop>:
     bb6:	aa 1f       	adc	r26, r26
     bb8:	bb 1f       	adc	r27, r27
     bba:	a6 17       	cp	r26, r22
     bbc:	b7 07       	cpc	r27, r23
     bbe:	10 f0       	brcs	.+4      	; 0xbc4 <__udivmodhi4_ep>
     bc0:	a6 1b       	sub	r26, r22
     bc2:	b7 0b       	sbc	r27, r23

00000bc4 <__udivmodhi4_ep>:
     bc4:	88 1f       	adc	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	5a 95       	dec	r21
     bca:	a9 f7       	brne	.-22     	; 0xbb6 <__udivmodhi4_loop>
     bcc:	80 95       	com	r24
     bce:	90 95       	com	r25
     bd0:	bc 01       	movw	r22, r24
     bd2:	cd 01       	movw	r24, r26
     bd4:	08 95       	ret

00000bd6 <__udivmodsi4>:
     bd6:	a1 e2       	ldi	r26, 0x21	; 33
     bd8:	1a 2e       	mov	r1, r26
     bda:	aa 1b       	sub	r26, r26
     bdc:	bb 1b       	sub	r27, r27
     bde:	fd 01       	movw	r30, r26
     be0:	0d c0       	rjmp	.+26     	; 0xbfc <__udivmodsi4_ep>

00000be2 <__udivmodsi4_loop>:
     be2:	aa 1f       	adc	r26, r26
     be4:	bb 1f       	adc	r27, r27
     be6:	ee 1f       	adc	r30, r30
     be8:	ff 1f       	adc	r31, r31
     bea:	a2 17       	cp	r26, r18
     bec:	b3 07       	cpc	r27, r19
     bee:	e4 07       	cpc	r30, r20
     bf0:	f5 07       	cpc	r31, r21
     bf2:	20 f0       	brcs	.+8      	; 0xbfc <__udivmodsi4_ep>
     bf4:	a2 1b       	sub	r26, r18
     bf6:	b3 0b       	sbc	r27, r19
     bf8:	e4 0b       	sbc	r30, r20
     bfa:	f5 0b       	sbc	r31, r21

00000bfc <__udivmodsi4_ep>:
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	88 1f       	adc	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	1a 94       	dec	r1
     c06:	69 f7       	brne	.-38     	; 0xbe2 <__udivmodsi4_loop>
     c08:	60 95       	com	r22
     c0a:	70 95       	com	r23
     c0c:	80 95       	com	r24
     c0e:	90 95       	com	r25
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	bd 01       	movw	r22, r26
     c16:	cf 01       	movw	r24, r30
     c18:	08 95       	ret

00000c1a <atoi>:
     c1a:	fc 01       	movw	r30, r24
     c1c:	88 27       	eor	r24, r24
     c1e:	99 27       	eor	r25, r25
     c20:	e8 94       	clt
     c22:	21 91       	ld	r18, Z+
     c24:	20 32       	cpi	r18, 0x20	; 32
     c26:	e9 f3       	breq	.-6      	; 0xc22 <atoi+0x8>
     c28:	29 30       	cpi	r18, 0x09	; 9
     c2a:	10 f0       	brcs	.+4      	; 0xc30 <atoi+0x16>
     c2c:	2e 30       	cpi	r18, 0x0E	; 14
     c2e:	c8 f3       	brcs	.-14     	; 0xc22 <atoi+0x8>
     c30:	2b 32       	cpi	r18, 0x2B	; 43
     c32:	41 f0       	breq	.+16     	; 0xc44 <atoi+0x2a>
     c34:	2d 32       	cpi	r18, 0x2D	; 45
     c36:	39 f4       	brne	.+14     	; 0xc46 <atoi+0x2c>
     c38:	68 94       	set
     c3a:	04 c0       	rjmp	.+8      	; 0xc44 <atoi+0x2a>
     c3c:	0e 94 2b 06 	call	0xc56	; 0xc56 <__mulhi_const_10>
     c40:	82 0f       	add	r24, r18
     c42:	91 1d       	adc	r25, r1
     c44:	21 91       	ld	r18, Z+
     c46:	20 53       	subi	r18, 0x30	; 48
     c48:	2a 30       	cpi	r18, 0x0A	; 10
     c4a:	c0 f3       	brcs	.-16     	; 0xc3c <atoi+0x22>
     c4c:	1e f4       	brtc	.+6      	; 0xc54 <atoi+0x3a>
     c4e:	90 95       	com	r25
     c50:	81 95       	neg	r24
     c52:	9f 4f       	sbci	r25, 0xFF	; 255
     c54:	08 95       	ret

00000c56 <__mulhi_const_10>:
     c56:	7a e0       	ldi	r23, 0x0A	; 10
     c58:	97 9f       	mul	r25, r23
     c5a:	90 2d       	mov	r25, r0
     c5c:	87 9f       	mul	r24, r23
     c5e:	80 2d       	mov	r24, r0
     c60:	91 0d       	add	r25, r1
     c62:	11 24       	eor	r1, r1
     c64:	08 95       	ret

00000c66 <sprintf>:
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	2e 97       	sbiw	r28, 0x0e	; 14
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	0d 89       	ldd	r16, Y+21	; 0x15
     c80:	1e 89       	ldd	r17, Y+22	; 0x16
     c82:	86 e0       	ldi	r24, 0x06	; 6
     c84:	8c 83       	std	Y+4, r24	; 0x04
     c86:	1a 83       	std	Y+2, r17	; 0x02
     c88:	09 83       	std	Y+1, r16	; 0x01
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	9f e7       	ldi	r25, 0x7F	; 127
     c8e:	9e 83       	std	Y+6, r25	; 0x06
     c90:	8d 83       	std	Y+5, r24	; 0x05
     c92:	9e 01       	movw	r18, r28
     c94:	27 5e       	subi	r18, 0xE7	; 231
     c96:	3f 4f       	sbci	r19, 0xFF	; 255
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	6f 89       	ldd	r22, Y+23	; 0x17
     c9e:	78 8d       	ldd	r23, Y+24	; 0x18
     ca0:	a9 01       	movw	r20, r18
     ca2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <vfprintf>
     ca6:	ef 81       	ldd	r30, Y+7	; 0x07
     ca8:	f8 85       	ldd	r31, Y+8	; 0x08
     caa:	e0 0f       	add	r30, r16
     cac:	f1 1f       	adc	r31, r17
     cae:	10 82       	st	Z, r1
     cb0:	2e 96       	adiw	r28, 0x0e	; 14
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	08 95       	ret

00000cc6 <vfprintf>:
     cc6:	2f 92       	push	r2
     cc8:	3f 92       	push	r3
     cca:	4f 92       	push	r4
     ccc:	5f 92       	push	r5
     cce:	6f 92       	push	r6
     cd0:	7f 92       	push	r7
     cd2:	8f 92       	push	r8
     cd4:	9f 92       	push	r9
     cd6:	af 92       	push	r10
     cd8:	bf 92       	push	r11
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	2c 97       	sbiw	r28, 0x0c	; 12
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	6c 01       	movw	r12, r24
     cfc:	1b 01       	movw	r2, r22
     cfe:	8a 01       	movw	r16, r20
     d00:	fc 01       	movw	r30, r24
     d02:	17 82       	std	Z+7, r1	; 0x07
     d04:	16 82       	std	Z+6, r1	; 0x06
     d06:	83 81       	ldd	r24, Z+3	; 0x03
     d08:	81 ff       	sbrs	r24, 1
     d0a:	d1 c1       	rjmp	.+930    	; 0x10ae <vfprintf+0x3e8>
     d0c:	2e 01       	movw	r4, r28
     d0e:	08 94       	sec
     d10:	41 1c       	adc	r4, r1
     d12:	51 1c       	adc	r5, r1
     d14:	f6 01       	movw	r30, r12
     d16:	93 81       	ldd	r25, Z+3	; 0x03
     d18:	f1 01       	movw	r30, r2
     d1a:	93 fd       	sbrc	r25, 3
     d1c:	85 91       	lpm	r24, Z+
     d1e:	93 ff       	sbrs	r25, 3
     d20:	81 91       	ld	r24, Z+
     d22:	1f 01       	movw	r2, r30
     d24:	88 23       	and	r24, r24
     d26:	09 f4       	brne	.+2      	; 0xd2a <vfprintf+0x64>
     d28:	be c1       	rjmp	.+892    	; 0x10a6 <vfprintf+0x3e0>
     d2a:	85 32       	cpi	r24, 0x25	; 37
     d2c:	39 f4       	brne	.+14     	; 0xd3c <vfprintf+0x76>
     d2e:	93 fd       	sbrc	r25, 3
     d30:	85 91       	lpm	r24, Z+
     d32:	93 ff       	sbrs	r25, 3
     d34:	81 91       	ld	r24, Z+
     d36:	1f 01       	movw	r2, r30
     d38:	85 32       	cpi	r24, 0x25	; 37
     d3a:	29 f4       	brne	.+10     	; 0xd46 <vfprintf+0x80>
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	b6 01       	movw	r22, r12
     d40:	0e 94 c3 08 	call	0x1186	; 0x1186 <fputc>
     d44:	e7 cf       	rjmp	.-50     	; 0xd14 <vfprintf+0x4e>
     d46:	ee 24       	eor	r14, r14
     d48:	ff 24       	eor	r15, r15
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	20 32       	cpi	r18, 0x20	; 32
     d4e:	b0 f4       	brcc	.+44     	; 0xd7c <vfprintf+0xb6>
     d50:	8b 32       	cpi	r24, 0x2B	; 43
     d52:	69 f0       	breq	.+26     	; 0xd6e <vfprintf+0xa8>
     d54:	8c 32       	cpi	r24, 0x2C	; 44
     d56:	28 f4       	brcc	.+10     	; 0xd62 <vfprintf+0x9c>
     d58:	80 32       	cpi	r24, 0x20	; 32
     d5a:	51 f0       	breq	.+20     	; 0xd70 <vfprintf+0xaa>
     d5c:	83 32       	cpi	r24, 0x23	; 35
     d5e:	71 f4       	brne	.+28     	; 0xd7c <vfprintf+0xb6>
     d60:	0b c0       	rjmp	.+22     	; 0xd78 <vfprintf+0xb2>
     d62:	8d 32       	cpi	r24, 0x2D	; 45
     d64:	39 f0       	breq	.+14     	; 0xd74 <vfprintf+0xae>
     d66:	80 33       	cpi	r24, 0x30	; 48
     d68:	49 f4       	brne	.+18     	; 0xd7c <vfprintf+0xb6>
     d6a:	21 60       	ori	r18, 0x01	; 1
     d6c:	2c c0       	rjmp	.+88     	; 0xdc6 <vfprintf+0x100>
     d6e:	22 60       	ori	r18, 0x02	; 2
     d70:	24 60       	ori	r18, 0x04	; 4
     d72:	29 c0       	rjmp	.+82     	; 0xdc6 <vfprintf+0x100>
     d74:	28 60       	ori	r18, 0x08	; 8
     d76:	27 c0       	rjmp	.+78     	; 0xdc6 <vfprintf+0x100>
     d78:	20 61       	ori	r18, 0x10	; 16
     d7a:	25 c0       	rjmp	.+74     	; 0xdc6 <vfprintf+0x100>
     d7c:	27 fd       	sbrc	r18, 7
     d7e:	2c c0       	rjmp	.+88     	; 0xdd8 <vfprintf+0x112>
     d80:	38 2f       	mov	r19, r24
     d82:	30 53       	subi	r19, 0x30	; 48
     d84:	3a 30       	cpi	r19, 0x0A	; 10
     d86:	98 f4       	brcc	.+38     	; 0xdae <vfprintf+0xe8>
     d88:	26 ff       	sbrs	r18, 6
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <vfprintf+0xd6>
     d8c:	8e 2d       	mov	r24, r14
     d8e:	88 0f       	add	r24, r24
     d90:	e8 2e       	mov	r14, r24
     d92:	ee 0c       	add	r14, r14
     d94:	ee 0c       	add	r14, r14
     d96:	e8 0e       	add	r14, r24
     d98:	e3 0e       	add	r14, r19
     d9a:	15 c0       	rjmp	.+42     	; 0xdc6 <vfprintf+0x100>
     d9c:	8f 2d       	mov	r24, r15
     d9e:	88 0f       	add	r24, r24
     da0:	f8 2e       	mov	r15, r24
     da2:	ff 0c       	add	r15, r15
     da4:	ff 0c       	add	r15, r15
     da6:	f8 0e       	add	r15, r24
     da8:	f3 0e       	add	r15, r19
     daa:	20 62       	ori	r18, 0x20	; 32
     dac:	0c c0       	rjmp	.+24     	; 0xdc6 <vfprintf+0x100>
     dae:	8e 32       	cpi	r24, 0x2E	; 46
     db0:	21 f4       	brne	.+8      	; 0xdba <vfprintf+0xf4>
     db2:	26 fd       	sbrc	r18, 6
     db4:	78 c1       	rjmp	.+752    	; 0x10a6 <vfprintf+0x3e0>
     db6:	20 64       	ori	r18, 0x40	; 64
     db8:	06 c0       	rjmp	.+12     	; 0xdc6 <vfprintf+0x100>
     dba:	8c 36       	cpi	r24, 0x6C	; 108
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <vfprintf+0xfc>
     dbe:	20 68       	ori	r18, 0x80	; 128
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <vfprintf+0x100>
     dc2:	88 36       	cpi	r24, 0x68	; 104
     dc4:	49 f4       	brne	.+18     	; 0xdd8 <vfprintf+0x112>
     dc6:	f1 01       	movw	r30, r2
     dc8:	93 fd       	sbrc	r25, 3
     dca:	85 91       	lpm	r24, Z+
     dcc:	93 ff       	sbrs	r25, 3
     dce:	81 91       	ld	r24, Z+
     dd0:	1f 01       	movw	r2, r30
     dd2:	88 23       	and	r24, r24
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <vfprintf+0x112>
     dd6:	ba cf       	rjmp	.-140    	; 0xd4c <vfprintf+0x86>
     dd8:	98 2f       	mov	r25, r24
     dda:	95 54       	subi	r25, 0x45	; 69
     ddc:	93 30       	cpi	r25, 0x03	; 3
     dde:	18 f0       	brcs	.+6      	; 0xde6 <vfprintf+0x120>
     de0:	90 52       	subi	r25, 0x20	; 32
     de2:	93 30       	cpi	r25, 0x03	; 3
     de4:	28 f4       	brcc	.+10     	; 0xdf0 <vfprintf+0x12a>
     de6:	0c 5f       	subi	r16, 0xFC	; 252
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
     dea:	ff e3       	ldi	r31, 0x3F	; 63
     dec:	f9 83       	std	Y+1, r31	; 0x01
     dee:	0d c0       	rjmp	.+26     	; 0xe0a <vfprintf+0x144>
     df0:	83 36       	cpi	r24, 0x63	; 99
     df2:	31 f0       	breq	.+12     	; 0xe00 <vfprintf+0x13a>
     df4:	83 37       	cpi	r24, 0x73	; 115
     df6:	71 f0       	breq	.+28     	; 0xe14 <vfprintf+0x14e>
     df8:	83 35       	cpi	r24, 0x53	; 83
     dfa:	09 f0       	breq	.+2      	; 0xdfe <vfprintf+0x138>
     dfc:	60 c0       	rjmp	.+192    	; 0xebe <vfprintf+0x1f8>
     dfe:	22 c0       	rjmp	.+68     	; 0xe44 <vfprintf+0x17e>
     e00:	f8 01       	movw	r30, r16
     e02:	80 81       	ld	r24, Z
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	0e 5f       	subi	r16, 0xFE	; 254
     e08:	1f 4f       	sbci	r17, 0xFF	; 255
     e0a:	42 01       	movw	r8, r4
     e0c:	71 e0       	ldi	r23, 0x01	; 1
     e0e:	a7 2e       	mov	r10, r23
     e10:	b1 2c       	mov	r11, r1
     e12:	16 c0       	rjmp	.+44     	; 0xe40 <vfprintf+0x17a>
     e14:	62 e0       	ldi	r22, 0x02	; 2
     e16:	66 2e       	mov	r6, r22
     e18:	71 2c       	mov	r7, r1
     e1a:	60 0e       	add	r6, r16
     e1c:	71 1e       	adc	r7, r17
     e1e:	f8 01       	movw	r30, r16
     e20:	80 80       	ld	r8, Z
     e22:	91 80       	ldd	r9, Z+1	; 0x01
     e24:	26 ff       	sbrs	r18, 6
     e26:	03 c0       	rjmp	.+6      	; 0xe2e <vfprintf+0x168>
     e28:	6e 2d       	mov	r22, r14
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <vfprintf+0x16c>
     e2e:	6f ef       	ldi	r22, 0xFF	; 255
     e30:	7f ef       	ldi	r23, 0xFF	; 255
     e32:	c4 01       	movw	r24, r8
     e34:	2c 87       	std	Y+12, r18	; 0x0c
     e36:	0e 94 b8 08 	call	0x1170	; 0x1170 <strnlen>
     e3a:	5c 01       	movw	r10, r24
     e3c:	83 01       	movw	r16, r6
     e3e:	2c 85       	ldd	r18, Y+12	; 0x0c
     e40:	2f 77       	andi	r18, 0x7F	; 127
     e42:	17 c0       	rjmp	.+46     	; 0xe72 <vfprintf+0x1ac>
     e44:	52 e0       	ldi	r21, 0x02	; 2
     e46:	65 2e       	mov	r6, r21
     e48:	71 2c       	mov	r7, r1
     e4a:	60 0e       	add	r6, r16
     e4c:	71 1e       	adc	r7, r17
     e4e:	f8 01       	movw	r30, r16
     e50:	80 80       	ld	r8, Z
     e52:	91 80       	ldd	r9, Z+1	; 0x01
     e54:	26 ff       	sbrs	r18, 6
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <vfprintf+0x198>
     e58:	6e 2d       	mov	r22, r14
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <vfprintf+0x19c>
     e5e:	6f ef       	ldi	r22, 0xFF	; 255
     e60:	7f ef       	ldi	r23, 0xFF	; 255
     e62:	c4 01       	movw	r24, r8
     e64:	2c 87       	std	Y+12, r18	; 0x0c
     e66:	0e 94 ad 08 	call	0x115a	; 0x115a <strnlen_P>
     e6a:	5c 01       	movw	r10, r24
     e6c:	2c 85       	ldd	r18, Y+12	; 0x0c
     e6e:	20 68       	ori	r18, 0x80	; 128
     e70:	83 01       	movw	r16, r6
     e72:	23 fd       	sbrc	r18, 3
     e74:	20 c0       	rjmp	.+64     	; 0xeb6 <vfprintf+0x1f0>
     e76:	08 c0       	rjmp	.+16     	; 0xe88 <vfprintf+0x1c2>
     e78:	80 e2       	ldi	r24, 0x20	; 32
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	b6 01       	movw	r22, r12
     e7e:	2c 87       	std	Y+12, r18	; 0x0c
     e80:	0e 94 c3 08 	call	0x1186	; 0x1186 <fputc>
     e84:	fa 94       	dec	r15
     e86:	2c 85       	ldd	r18, Y+12	; 0x0c
     e88:	8f 2d       	mov	r24, r15
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a8 16       	cp	r10, r24
     e8e:	b9 06       	cpc	r11, r25
     e90:	98 f3       	brcs	.-26     	; 0xe78 <vfprintf+0x1b2>
     e92:	11 c0       	rjmp	.+34     	; 0xeb6 <vfprintf+0x1f0>
     e94:	f4 01       	movw	r30, r8
     e96:	27 fd       	sbrc	r18, 7
     e98:	85 91       	lpm	r24, Z+
     e9a:	27 ff       	sbrs	r18, 7
     e9c:	81 91       	ld	r24, Z+
     e9e:	4f 01       	movw	r8, r30
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	b6 01       	movw	r22, r12
     ea4:	2c 87       	std	Y+12, r18	; 0x0c
     ea6:	0e 94 c3 08 	call	0x1186	; 0x1186 <fputc>
     eaa:	2c 85       	ldd	r18, Y+12	; 0x0c
     eac:	f1 10       	cpse	r15, r1
     eae:	fa 94       	dec	r15
     eb0:	08 94       	sec
     eb2:	a1 08       	sbc	r10, r1
     eb4:	b1 08       	sbc	r11, r1
     eb6:	a1 14       	cp	r10, r1
     eb8:	b1 04       	cpc	r11, r1
     eba:	61 f7       	brne	.-40     	; 0xe94 <vfprintf+0x1ce>
     ebc:	f1 c0       	rjmp	.+482    	; 0x10a0 <vfprintf+0x3da>
     ebe:	84 36       	cpi	r24, 0x64	; 100
     ec0:	11 f0       	breq	.+4      	; 0xec6 <vfprintf+0x200>
     ec2:	89 36       	cpi	r24, 0x69	; 105
     ec4:	49 f5       	brne	.+82     	; 0xf18 <vfprintf+0x252>
     ec6:	27 ff       	sbrs	r18, 7
     ec8:	08 c0       	rjmp	.+16     	; 0xeda <vfprintf+0x214>
     eca:	f8 01       	movw	r30, r16
     ecc:	60 81       	ld	r22, Z
     ece:	71 81       	ldd	r23, Z+1	; 0x01
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	0c 5f       	subi	r16, 0xFC	; 252
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	09 c0       	rjmp	.+18     	; 0xeec <vfprintf+0x226>
     eda:	f8 01       	movw	r30, r16
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	88 27       	eor	r24, r24
     ee2:	77 fd       	sbrc	r23, 7
     ee4:	80 95       	com	r24
     ee6:	98 2f       	mov	r25, r24
     ee8:	0e 5f       	subi	r16, 0xFE	; 254
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	4f e6       	ldi	r20, 0x6F	; 111
     eee:	b4 2e       	mov	r11, r20
     ef0:	b2 22       	and	r11, r18
     ef2:	97 ff       	sbrs	r25, 7
     ef4:	09 c0       	rjmp	.+18     	; 0xf08 <vfprintf+0x242>
     ef6:	90 95       	com	r25
     ef8:	80 95       	com	r24
     efa:	70 95       	com	r23
     efc:	61 95       	neg	r22
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	8f 4f       	sbci	r24, 0xFF	; 255
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	f0 e8       	ldi	r31, 0x80	; 128
     f06:	bf 2a       	or	r11, r31
     f08:	a2 01       	movw	r20, r4
     f0a:	2a e0       	ldi	r18, 0x0A	; 10
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	0e 94 ef 08 	call	0x11de	; 0x11de <__ultoa_invert>
     f12:	78 2e       	mov	r7, r24
     f14:	74 18       	sub	r7, r4
     f16:	45 c0       	rjmp	.+138    	; 0xfa2 <vfprintf+0x2dc>
     f18:	85 37       	cpi	r24, 0x75	; 117
     f1a:	31 f4       	brne	.+12     	; 0xf28 <vfprintf+0x262>
     f1c:	3f ee       	ldi	r19, 0xEF	; 239
     f1e:	b3 2e       	mov	r11, r19
     f20:	b2 22       	and	r11, r18
     f22:	2a e0       	ldi	r18, 0x0A	; 10
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	25 c0       	rjmp	.+74     	; 0xf72 <vfprintf+0x2ac>
     f28:	99 ef       	ldi	r25, 0xF9	; 249
     f2a:	b9 2e       	mov	r11, r25
     f2c:	b2 22       	and	r11, r18
     f2e:	8f 36       	cpi	r24, 0x6F	; 111
     f30:	c1 f0       	breq	.+48     	; 0xf62 <vfprintf+0x29c>
     f32:	80 37       	cpi	r24, 0x70	; 112
     f34:	20 f4       	brcc	.+8      	; 0xf3e <vfprintf+0x278>
     f36:	88 35       	cpi	r24, 0x58	; 88
     f38:	09 f0       	breq	.+2      	; 0xf3c <vfprintf+0x276>
     f3a:	b5 c0       	rjmp	.+362    	; 0x10a6 <vfprintf+0x3e0>
     f3c:	0d c0       	rjmp	.+26     	; 0xf58 <vfprintf+0x292>
     f3e:	80 37       	cpi	r24, 0x70	; 112
     f40:	21 f0       	breq	.+8      	; 0xf4a <vfprintf+0x284>
     f42:	88 37       	cpi	r24, 0x78	; 120
     f44:	09 f0       	breq	.+2      	; 0xf48 <vfprintf+0x282>
     f46:	af c0       	rjmp	.+350    	; 0x10a6 <vfprintf+0x3e0>
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <vfprintf+0x288>
     f4a:	20 e1       	ldi	r18, 0x10	; 16
     f4c:	b2 2a       	or	r11, r18
     f4e:	b4 fe       	sbrs	r11, 4
     f50:	0b c0       	rjmp	.+22     	; 0xf68 <vfprintf+0x2a2>
     f52:	84 e0       	ldi	r24, 0x04	; 4
     f54:	b8 2a       	or	r11, r24
     f56:	08 c0       	rjmp	.+16     	; 0xf68 <vfprintf+0x2a2>
     f58:	b4 fe       	sbrs	r11, 4
     f5a:	09 c0       	rjmp	.+18     	; 0xf6e <vfprintf+0x2a8>
     f5c:	e6 e0       	ldi	r30, 0x06	; 6
     f5e:	be 2a       	or	r11, r30
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <vfprintf+0x2a8>
     f62:	28 e0       	ldi	r18, 0x08	; 8
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <vfprintf+0x2ac>
     f68:	20 e1       	ldi	r18, 0x10	; 16
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <vfprintf+0x2ac>
     f6e:	20 e1       	ldi	r18, 0x10	; 16
     f70:	32 e0       	ldi	r19, 0x02	; 2
     f72:	b7 fe       	sbrs	r11, 7
     f74:	08 c0       	rjmp	.+16     	; 0xf86 <vfprintf+0x2c0>
     f76:	f8 01       	movw	r30, r16
     f78:	60 81       	ld	r22, Z
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	82 81       	ldd	r24, Z+2	; 0x02
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	0c 5f       	subi	r16, 0xFC	; 252
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	07 c0       	rjmp	.+14     	; 0xf94 <vfprintf+0x2ce>
     f86:	f8 01       	movw	r30, r16
     f88:	60 81       	ld	r22, Z
     f8a:	71 81       	ldd	r23, Z+1	; 0x01
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 5f       	subi	r16, 0xFE	; 254
     f92:	1f 4f       	sbci	r17, 0xFF	; 255
     f94:	a2 01       	movw	r20, r4
     f96:	0e 94 ef 08 	call	0x11de	; 0x11de <__ultoa_invert>
     f9a:	78 2e       	mov	r7, r24
     f9c:	74 18       	sub	r7, r4
     f9e:	ff e7       	ldi	r31, 0x7F	; 127
     fa0:	bf 22       	and	r11, r31
     fa2:	b6 fe       	sbrs	r11, 6
     fa4:	0b c0       	rjmp	.+22     	; 0xfbc <vfprintf+0x2f6>
     fa6:	2e ef       	ldi	r18, 0xFE	; 254
     fa8:	b2 22       	and	r11, r18
     faa:	7e 14       	cp	r7, r14
     fac:	38 f4       	brcc	.+14     	; 0xfbc <vfprintf+0x2f6>
     fae:	b4 fe       	sbrs	r11, 4
     fb0:	07 c0       	rjmp	.+14     	; 0xfc0 <vfprintf+0x2fa>
     fb2:	b2 fc       	sbrc	r11, 2
     fb4:	05 c0       	rjmp	.+10     	; 0xfc0 <vfprintf+0x2fa>
     fb6:	8f ee       	ldi	r24, 0xEF	; 239
     fb8:	b8 22       	and	r11, r24
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <vfprintf+0x2fa>
     fbc:	a7 2c       	mov	r10, r7
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <vfprintf+0x2fc>
     fc0:	ae 2c       	mov	r10, r14
     fc2:	8b 2d       	mov	r24, r11
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	b4 fe       	sbrs	r11, 4
     fc8:	0d c0       	rjmp	.+26     	; 0xfe4 <vfprintf+0x31e>
     fca:	fe 01       	movw	r30, r28
     fcc:	e7 0d       	add	r30, r7
     fce:	f1 1d       	adc	r31, r1
     fd0:	20 81       	ld	r18, Z
     fd2:	20 33       	cpi	r18, 0x30	; 48
     fd4:	19 f4       	brne	.+6      	; 0xfdc <vfprintf+0x316>
     fd6:	e9 ee       	ldi	r30, 0xE9	; 233
     fd8:	be 22       	and	r11, r30
     fda:	09 c0       	rjmp	.+18     	; 0xfee <vfprintf+0x328>
     fdc:	a3 94       	inc	r10
     fde:	b2 fe       	sbrs	r11, 2
     fe0:	06 c0       	rjmp	.+12     	; 0xfee <vfprintf+0x328>
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <vfprintf+0x326>
     fe4:	86 78       	andi	r24, 0x86	; 134
     fe6:	90 70       	andi	r25, 0x00	; 0
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	09 f0       	breq	.+2      	; 0xfee <vfprintf+0x328>
     fec:	a3 94       	inc	r10
     fee:	8b 2c       	mov	r8, r11
     ff0:	99 24       	eor	r9, r9
     ff2:	b3 fc       	sbrc	r11, 3
     ff4:	14 c0       	rjmp	.+40     	; 0x101e <vfprintf+0x358>
     ff6:	b0 fe       	sbrs	r11, 0
     ff8:	0f c0       	rjmp	.+30     	; 0x1018 <vfprintf+0x352>
     ffa:	af 14       	cp	r10, r15
     ffc:	28 f4       	brcc	.+10     	; 0x1008 <vfprintf+0x342>
     ffe:	e7 2c       	mov	r14, r7
    1000:	ef 0c       	add	r14, r15
    1002:	ea 18       	sub	r14, r10
    1004:	af 2c       	mov	r10, r15
    1006:	08 c0       	rjmp	.+16     	; 0x1018 <vfprintf+0x352>
    1008:	e7 2c       	mov	r14, r7
    100a:	06 c0       	rjmp	.+12     	; 0x1018 <vfprintf+0x352>
    100c:	80 e2       	ldi	r24, 0x20	; 32
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	b6 01       	movw	r22, r12
    1012:	0e 94 c3 08 	call	0x1186	; 0x1186 <fputc>
    1016:	a3 94       	inc	r10
    1018:	af 14       	cp	r10, r15
    101a:	c0 f3       	brcs	.-16     	; 0x100c <vfprintf+0x346>
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <vfprintf+0x360>
    101e:	af 14       	cp	r10, r15
    1020:	10 f4       	brcc	.+4      	; 0x1026 <vfprintf+0x360>
    1022:	fa 18       	sub	r15, r10
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <vfprintf+0x362>
    1026:	ff 24       	eor	r15, r15
    1028:	84 fe       	sbrs	r8, 4
    102a:	0f c0       	rjmp	.+30     	; 0x104a <vfprintf+0x384>
    102c:	80 e3       	ldi	r24, 0x30	; 48
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	b6 01       	movw	r22, r12
    1032:	0e 94 c3 08 	call	0x1186	; 0x1186 <fputc>
    1036:	82 fe       	sbrs	r8, 2
    1038:	1f c0       	rjmp	.+62     	; 0x1078 <vfprintf+0x3b2>
    103a:	81 fe       	sbrs	r8, 1
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <vfprintf+0x37e>
    103e:	88 e5       	ldi	r24, 0x58	; 88
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	10 c0       	rjmp	.+32     	; 0x1064 <vfprintf+0x39e>
    1044:	88 e7       	ldi	r24, 0x78	; 120
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0d c0       	rjmp	.+26     	; 0x1064 <vfprintf+0x39e>
    104a:	c4 01       	movw	r24, r8
    104c:	86 78       	andi	r24, 0x86	; 134
    104e:	90 70       	andi	r25, 0x00	; 0
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	91 f0       	breq	.+36     	; 0x1078 <vfprintf+0x3b2>
    1054:	81 fc       	sbrc	r8, 1
    1056:	02 c0       	rjmp	.+4      	; 0x105c <vfprintf+0x396>
    1058:	80 e2       	ldi	r24, 0x20	; 32
    105a:	01 c0       	rjmp	.+2      	; 0x105e <vfprintf+0x398>
    105c:	8b e2       	ldi	r24, 0x2B	; 43
    105e:	b7 fc       	sbrc	r11, 7
    1060:	8d e2       	ldi	r24, 0x2D	; 45
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	b6 01       	movw	r22, r12
    1066:	0e 94 c3 08 	call	0x1186	; 0x1186 <fputc>
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <vfprintf+0x3b2>
    106c:	80 e3       	ldi	r24, 0x30	; 48
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	b6 01       	movw	r22, r12
    1072:	0e 94 c3 08 	call	0x1186	; 0x1186 <fputc>
    1076:	ea 94       	dec	r14
    1078:	7e 14       	cp	r7, r14
    107a:	c0 f3       	brcs	.-16     	; 0x106c <vfprintf+0x3a6>
    107c:	7a 94       	dec	r7
    107e:	f2 01       	movw	r30, r4
    1080:	e7 0d       	add	r30, r7
    1082:	f1 1d       	adc	r31, r1
    1084:	80 81       	ld	r24, Z
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	b6 01       	movw	r22, r12
    108a:	0e 94 c3 08 	call	0x1186	; 0x1186 <fputc>
    108e:	77 20       	and	r7, r7
    1090:	a9 f7       	brne	.-22     	; 0x107c <vfprintf+0x3b6>
    1092:	06 c0       	rjmp	.+12     	; 0x10a0 <vfprintf+0x3da>
    1094:	80 e2       	ldi	r24, 0x20	; 32
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	b6 01       	movw	r22, r12
    109a:	0e 94 c3 08 	call	0x1186	; 0x1186 <fputc>
    109e:	fa 94       	dec	r15
    10a0:	ff 20       	and	r15, r15
    10a2:	c1 f7       	brne	.-16     	; 0x1094 <vfprintf+0x3ce>
    10a4:	37 ce       	rjmp	.-914    	; 0xd14 <vfprintf+0x4e>
    10a6:	f6 01       	movw	r30, r12
    10a8:	26 81       	ldd	r18, Z+6	; 0x06
    10aa:	37 81       	ldd	r19, Z+7	; 0x07
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <vfprintf+0x3ec>
    10ae:	2f ef       	ldi	r18, 0xFF	; 255
    10b0:	3f ef       	ldi	r19, 0xFF	; 255
    10b2:	c9 01       	movw	r24, r18
    10b4:	2c 96       	adiw	r28, 0x0c	; 12
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	bf 90       	pop	r11
    10d2:	af 90       	pop	r10
    10d4:	9f 90       	pop	r9
    10d6:	8f 90       	pop	r8
    10d8:	7f 90       	pop	r7
    10da:	6f 90       	pop	r6
    10dc:	5f 90       	pop	r5
    10de:	4f 90       	pop	r4
    10e0:	3f 90       	pop	r3
    10e2:	2f 90       	pop	r2
    10e4:	08 95       	ret

000010e6 <__eerd_block_m128>:
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22

000010ea <__eerd_blraw_m128>:
    10ea:	fc 01       	movw	r30, r24
    10ec:	e1 99       	sbic	0x1c, 1	; 28
    10ee:	fe cf       	rjmp	.-4      	; 0x10ec <__eerd_blraw_m128+0x2>
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <__eerd_blraw_m128+0x14>
    10f2:	ff bb       	out	0x1f, r31	; 31
    10f4:	ee bb       	out	0x1e, r30	; 30
    10f6:	e0 9a       	sbi	0x1c, 0	; 28
    10f8:	31 96       	adiw	r30, 0x01	; 1
    10fa:	0d b2       	in	r0, 0x1d	; 29
    10fc:	0d 92       	st	X+, r0
    10fe:	41 50       	subi	r20, 0x01	; 1
    1100:	50 40       	sbci	r21, 0x00	; 0
    1102:	b8 f7       	brcc	.-18     	; 0x10f2 <__eerd_blraw_m128+0x8>
    1104:	08 95       	ret

00001106 <__eerd_dword_m128>:
    1106:	a6 e1       	ldi	r26, 0x16	; 22
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	44 e0       	ldi	r20, 0x04	; 4
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__eerd_blraw_m128>

00001112 <__eewr_block_m128>:
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	03 c0       	rjmp	.+6      	; 0x111e <__eewr_block_m128+0xc>
    1118:	2d 91       	ld	r18, X+
    111a:	0e 94 94 08 	call	0x1128	; 0x1128 <__eewr_r18_m128>
    111e:	41 50       	subi	r20, 0x01	; 1
    1120:	50 40       	sbci	r21, 0x00	; 0
    1122:	d0 f7       	brcc	.-12     	; 0x1118 <__eewr_block_m128+0x6>
    1124:	08 95       	ret

00001126 <__eewr_byte_m128>:
    1126:	26 2f       	mov	r18, r22

00001128 <__eewr_r18_m128>:
    1128:	e1 99       	sbic	0x1c, 1	; 28
    112a:	fe cf       	rjmp	.-4      	; 0x1128 <__eewr_r18_m128>
    112c:	9f bb       	out	0x1f, r25	; 31
    112e:	8e bb       	out	0x1e, r24	; 30
    1130:	2d bb       	out	0x1d, r18	; 29
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	e2 9a       	sbi	0x1c, 2	; 28
    1138:	e1 9a       	sbi	0x1c, 1	; 28
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	08 95       	ret

00001140 <__eewr_dword_m128>:
    1140:	24 2f       	mov	r18, r20
    1142:	0e 94 94 08 	call	0x1128	; 0x1128 <__eewr_r18_m128>
    1146:	25 2f       	mov	r18, r21
    1148:	0e 94 94 08 	call	0x1128	; 0x1128 <__eewr_r18_m128>
    114c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__eewr_word_m128>

00001150 <__eewr_word_m128>:
    1150:	0e 94 93 08 	call	0x1126	; 0x1126 <__eewr_byte_m128>
    1154:	27 2f       	mov	r18, r23
    1156:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__eewr_r18_m128>

0000115a <strnlen_P>:
    115a:	fc 01       	movw	r30, r24
    115c:	05 90       	lpm	r0, Z+
    115e:	61 50       	subi	r22, 0x01	; 1
    1160:	70 40       	sbci	r23, 0x00	; 0
    1162:	01 10       	cpse	r0, r1
    1164:	d8 f7       	brcc	.-10     	; 0x115c <strnlen_P+0x2>
    1166:	80 95       	com	r24
    1168:	90 95       	com	r25
    116a:	8e 0f       	add	r24, r30
    116c:	9f 1f       	adc	r25, r31
    116e:	08 95       	ret

00001170 <strnlen>:
    1170:	fc 01       	movw	r30, r24
    1172:	61 50       	subi	r22, 0x01	; 1
    1174:	70 40       	sbci	r23, 0x00	; 0
    1176:	01 90       	ld	r0, Z+
    1178:	01 10       	cpse	r0, r1
    117a:	d8 f7       	brcc	.-10     	; 0x1172 <strnlen+0x2>
    117c:	80 95       	com	r24
    117e:	90 95       	com	r25
    1180:	8e 0f       	add	r24, r30
    1182:	9f 1f       	adc	r25, r31
    1184:	08 95       	ret

00001186 <fputc>:
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	8c 01       	movw	r16, r24
    1190:	eb 01       	movw	r28, r22
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	81 ff       	sbrs	r24, 1
    1196:	1b c0       	rjmp	.+54     	; 0x11ce <fputc+0x48>
    1198:	82 ff       	sbrs	r24, 2
    119a:	0d c0       	rjmp	.+26     	; 0x11b6 <fputc+0x30>
    119c:	2e 81       	ldd	r18, Y+6	; 0x06
    119e:	3f 81       	ldd	r19, Y+7	; 0x07
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	9d 81       	ldd	r25, Y+5	; 0x05
    11a4:	28 17       	cp	r18, r24
    11a6:	39 07       	cpc	r19, r25
    11a8:	64 f4       	brge	.+24     	; 0x11c2 <fputc+0x3c>
    11aa:	e8 81       	ld	r30, Y
    11ac:	f9 81       	ldd	r31, Y+1	; 0x01
    11ae:	01 93       	st	Z+, r16
    11b0:	f9 83       	std	Y+1, r31	; 0x01
    11b2:	e8 83       	st	Y, r30
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <fputc+0x3c>
    11b6:	e8 85       	ldd	r30, Y+8	; 0x08
    11b8:	f9 85       	ldd	r31, Y+9	; 0x09
    11ba:	80 2f       	mov	r24, r16
    11bc:	09 95       	icall
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	31 f4       	brne	.+12     	; 0x11ce <fputc+0x48>
    11c2:	8e 81       	ldd	r24, Y+6	; 0x06
    11c4:	9f 81       	ldd	r25, Y+7	; 0x07
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	9f 83       	std	Y+7, r25	; 0x07
    11ca:	8e 83       	std	Y+6, r24	; 0x06
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <fputc+0x4c>
    11ce:	0f ef       	ldi	r16, 0xFF	; 255
    11d0:	1f ef       	ldi	r17, 0xFF	; 255
    11d2:	c8 01       	movw	r24, r16
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	08 95       	ret

000011de <__ultoa_invert>:
    11de:	fa 01       	movw	r30, r20
    11e0:	aa 27       	eor	r26, r26
    11e2:	28 30       	cpi	r18, 0x08	; 8
    11e4:	51 f1       	breq	.+84     	; 0x123a <__ultoa_invert+0x5c>
    11e6:	20 31       	cpi	r18, 0x10	; 16
    11e8:	81 f1       	breq	.+96     	; 0x124a <__ultoa_invert+0x6c>
    11ea:	e8 94       	clt
    11ec:	6f 93       	push	r22
    11ee:	6e 7f       	andi	r22, 0xFE	; 254
    11f0:	6e 5f       	subi	r22, 0xFE	; 254
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	8f 4f       	sbci	r24, 0xFF	; 255
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	af 4f       	sbci	r26, 0xFF	; 255
    11fa:	b1 e0       	ldi	r27, 0x01	; 1
    11fc:	3e d0       	rcall	.+124    	; 0x127a <__ultoa_invert+0x9c>
    11fe:	b4 e0       	ldi	r27, 0x04	; 4
    1200:	3c d0       	rcall	.+120    	; 0x127a <__ultoa_invert+0x9c>
    1202:	67 0f       	add	r22, r23
    1204:	78 1f       	adc	r23, r24
    1206:	89 1f       	adc	r24, r25
    1208:	9a 1f       	adc	r25, r26
    120a:	a1 1d       	adc	r26, r1
    120c:	68 0f       	add	r22, r24
    120e:	79 1f       	adc	r23, r25
    1210:	8a 1f       	adc	r24, r26
    1212:	91 1d       	adc	r25, r1
    1214:	a1 1d       	adc	r26, r1
    1216:	6a 0f       	add	r22, r26
    1218:	71 1d       	adc	r23, r1
    121a:	81 1d       	adc	r24, r1
    121c:	91 1d       	adc	r25, r1
    121e:	a1 1d       	adc	r26, r1
    1220:	20 d0       	rcall	.+64     	; 0x1262 <__ultoa_invert+0x84>
    1222:	09 f4       	brne	.+2      	; 0x1226 <__ultoa_invert+0x48>
    1224:	68 94       	set
    1226:	3f 91       	pop	r19
    1228:	2a e0       	ldi	r18, 0x0A	; 10
    122a:	26 9f       	mul	r18, r22
    122c:	11 24       	eor	r1, r1
    122e:	30 19       	sub	r19, r0
    1230:	30 5d       	subi	r19, 0xD0	; 208
    1232:	31 93       	st	Z+, r19
    1234:	de f6       	brtc	.-74     	; 0x11ec <__ultoa_invert+0xe>
    1236:	cf 01       	movw	r24, r30
    1238:	08 95       	ret
    123a:	46 2f       	mov	r20, r22
    123c:	47 70       	andi	r20, 0x07	; 7
    123e:	40 5d       	subi	r20, 0xD0	; 208
    1240:	41 93       	st	Z+, r20
    1242:	b3 e0       	ldi	r27, 0x03	; 3
    1244:	0f d0       	rcall	.+30     	; 0x1264 <__ultoa_invert+0x86>
    1246:	c9 f7       	brne	.-14     	; 0x123a <__ultoa_invert+0x5c>
    1248:	f6 cf       	rjmp	.-20     	; 0x1236 <__ultoa_invert+0x58>
    124a:	46 2f       	mov	r20, r22
    124c:	4f 70       	andi	r20, 0x0F	; 15
    124e:	40 5d       	subi	r20, 0xD0	; 208
    1250:	4a 33       	cpi	r20, 0x3A	; 58
    1252:	18 f0       	brcs	.+6      	; 0x125a <__ultoa_invert+0x7c>
    1254:	49 5d       	subi	r20, 0xD9	; 217
    1256:	31 fd       	sbrc	r19, 1
    1258:	40 52       	subi	r20, 0x20	; 32
    125a:	41 93       	st	Z+, r20
    125c:	02 d0       	rcall	.+4      	; 0x1262 <__ultoa_invert+0x84>
    125e:	a9 f7       	brne	.-22     	; 0x124a <__ultoa_invert+0x6c>
    1260:	ea cf       	rjmp	.-44     	; 0x1236 <__ultoa_invert+0x58>
    1262:	b4 e0       	ldi	r27, 0x04	; 4
    1264:	a6 95       	lsr	r26
    1266:	97 95       	ror	r25
    1268:	87 95       	ror	r24
    126a:	77 95       	ror	r23
    126c:	67 95       	ror	r22
    126e:	ba 95       	dec	r27
    1270:	c9 f7       	brne	.-14     	; 0x1264 <__ultoa_invert+0x86>
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	61 05       	cpc	r22, r1
    1276:	71 05       	cpc	r23, r1
    1278:	08 95       	ret
    127a:	9b 01       	movw	r18, r22
    127c:	ac 01       	movw	r20, r24
    127e:	0a 2e       	mov	r0, r26
    1280:	06 94       	lsr	r0
    1282:	57 95       	ror	r21
    1284:	47 95       	ror	r20
    1286:	37 95       	ror	r19
    1288:	27 95       	ror	r18
    128a:	ba 95       	dec	r27
    128c:	c9 f7       	brne	.-14     	; 0x1280 <__ultoa_invert+0xa2>
    128e:	62 0f       	add	r22, r18
    1290:	73 1f       	adc	r23, r19
    1292:	84 1f       	adc	r24, r20
    1294:	95 1f       	adc	r25, r21
    1296:	a0 1d       	adc	r26, r0
    1298:	08 95       	ret

0000129a <_exit>:
    129a:	f8 94       	cli

0000129c <__stop_program>:
    129c:	ff cf       	rjmp	.-2      	; 0x129c <__stop_program>
