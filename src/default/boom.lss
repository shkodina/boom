
boom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  000014a6  0000153a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  00800220  00800220  0000165a  2**0
                  ALLOC
  3 .stab         00001230  00000000  00000000  0000165c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004cb  00000000  00000000  0000288c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00002d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000357  00000000  00000000  00002df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ac8  00000000  00000000  0000314e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000081c  00000000  00000000  00004c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001987  00000000  00000000  00005432  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000290  00000000  00000000  00006dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004f0  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f57  00000000  00000000  0000753c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000134  00000000  00000000  00008493  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  000085c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 07 04 	jmp	0x80e	; 0x80e <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ea       	ldi	r30, 0xA6	; 166
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 32       	cpi	r26, 0x20	; 32
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a0 e2       	ldi	r26, 0x20	; 32
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 39       	cpi	r26, 0x90	; 144
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 0a 05 	call	0xa14	; 0xa14 <main>
      c6:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <send_ds1990_command>:

//Функция пересылки команд

void send_ds1990_command(unsigned char command)
{
cli();
      ce:	f8 94       	cli
unsigned char data=command;
   for(i=0;i<8;i++)
      d0:	10 92 3f 02 	sts	0x023F, r1
      d4:	2d c0       	rjmp	.+90     	; 0x130 <send_ds1990_command+0x62>
   {
   data=data<<7;        //Сдвиг на i разрядов влево
      d6:	98 2f       	mov	r25, r24
      d8:	97 95       	ror	r25
      da:	99 27       	eor	r25, r25
      dc:	97 95       	ror	r25
   command=command>>1;  //Сдвиг передаваемого байта
      de:	86 95       	lsr	r24
     if(data==0x00)       //Передача лог.0
      e0:	99 23       	and	r25, r25
      e2:	a1 f4       	brne	.+40     	; 0x10c <send_ds1990_command+0x3e>
     {
     DDRB&=~_BV(0);
      e4:	b8 98       	cbi	0x17, 0	; 23
     PORTB&=~_BV(0);          
      e6:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e8:	90 e5       	ldi	r25, 0x50	; 80
      ea:	9a 95       	dec	r25
      ec:	f1 f7       	brne	.-4      	; 0xea <send_ds1990_command+0x1c>
     _delay_us(15);  //10 мкс
     DDRB|=_BV(0);
      ee:	b8 9a       	sbi	0x17, 0	; 23
     PORTB&=~_BV(0);
      f0:	c0 98       	cbi	0x18, 0	; 24
      f2:	ef e8       	ldi	r30, 0x8F	; 143
      f4:	f1 e0       	ldi	r31, 0x01	; 1
      f6:	31 97       	sbiw	r30, 0x01	; 1
      f8:	f1 f7       	brne	.-4      	; 0xf6 <send_ds1990_command+0x28>
      fa:	00 c0       	rjmp	.+0      	; 0xfc <send_ds1990_command+0x2e>
      fc:	00 00       	nop
     _delay_us(100);  //60 мкс
     DDRB|=_BV(0);
      fe:	b8 9a       	sbi	0x17, 0	; 23
     PORTB|=_BV(0);     
     100:	c0 9a       	sbi	0x18, 0	; 24
     102:	fa e0       	ldi	r31, 0x0A	; 10
     104:	fa 95       	dec	r31
     106:	f1 f7       	brne	.-4      	; 0x104 <send_ds1990_command+0x36>
     108:	00 c0       	rjmp	.+0      	; 0x10a <send_ds1990_command+0x3c>
     10a:	0d c0       	rjmp	.+26     	; 0x126 <send_ds1990_command+0x58>
     _delay_us(6);   //Задержка примерно на 6 мкс
     DDRB&=~_BV(0);  
     PORTB&=~_BV(0);    
     _delay_us(10);   //Задержка примерно на 64 мкс */
	 
     DDRB&=~_BV(0);
     10c:	b8 98       	cbi	0x17, 0	; 23
     PORTB&=~_BV(0);          
     10e:	c0 98       	cbi	0x18, 0	; 24
     110:	90 e5       	ldi	r25, 0x50	; 80
     112:	9a 95       	dec	r25
     114:	f1 f7       	brne	.-4      	; 0x112 <send_ds1990_command+0x44>
     _delay_us(15);  //10 мкс
     DDRB|=_BV(0);
     116:	b8 9a       	sbi	0x17, 0	; 23
     PORTB|=_BV(0);     
     118:	c0 9a       	sbi	0x18, 0	; 24
     11a:	ef e8       	ldi	r30, 0x8F	; 143
     11c:	f1 e0       	ldi	r31, 0x01	; 1
     11e:	31 97       	sbiw	r30, 0x01	; 1
     120:	f1 f7       	brne	.-4      	; 0x11e <send_ds1990_command+0x50>
     122:	00 c0       	rjmp	.+0      	; 0x124 <send_ds1990_command+0x56>
     124:	00 00       	nop

void send_ds1990_command(unsigned char command)
{
cli();
unsigned char data=command;
   for(i=0;i<8;i++)
     126:	90 91 3f 02 	lds	r25, 0x023F
     12a:	9f 5f       	subi	r25, 0xFF	; 255
     12c:	90 93 3f 02 	sts	0x023F, r25
     130:	90 91 3f 02 	lds	r25, 0x023F
     134:	98 30       	cpi	r25, 0x08	; 8
     136:	78 f2       	brcs	.-98     	; 0xd6 <send_ds1990_command+0x8>
     _delay_us(100);   //Задержка примерно на 6 мкс
 	  
     }
   data=command;        //Новое значение для сдвига
   };
sei();
     138:	78 94       	sei
}
     13a:	08 95       	ret

0000013c <check_key_id>:
unsigned char tcnt, i;
char buffer[8][8];

//Вывод массива
char check_key_id(void)
{
     13c:	cf 92       	push	r12
     13e:	df 92       	push	r13
     140:	ef 92       	push	r14
     142:	ff 92       	push	r15
     144:	0f 93       	push	r16
     146:	1f 93       	push	r17
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
LCDSendCommand(CLR_DISP);
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
     152:	0e e2       	ldi	r16, 0x2E	; 46
     154:	12 e0       	ldi	r17, 0x02	; 2
     156:	78 01       	movw	r14, r16

	unsigned char bt = 0;
	for (int n = 0; n < KEYIDLEN; n++)
     158:	c0 e0       	ldi	r28, 0x00	; 0
     15a:	d0 e0       	ldi	r29, 0x00	; 0
	    {
			bt = 0;
	        for(int n2 = 0;n2 < 8; n2++)
	        {
	 			if (buffer[n][n2]) {
					bt |= (1 << n2);
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	c9 2e       	mov	r12, r25
     160:	d1 2c       	mov	r13, r1
     162:	1b c0       	rjmp	.+54     	; 0x19a <check_key_id+0x5e>
	for (int n = 0; n < KEYIDLEN; n++)
	    {
			bt = 0;
	        for(int n2 = 0;n2 < 8; n2++)
	        {
	 			if (buffer[n][n2]) {
     164:	91 91       	ld	r25, Z+
     166:	99 23       	and	r25, r25
     168:	41 f0       	breq	.+16     	; 0x17a <check_key_id+0x3e>
					bt |= (1 << n2);
     16a:	a6 01       	movw	r20, r12
     16c:	02 2e       	mov	r0, r18
     16e:	02 c0       	rjmp	.+4      	; 0x174 <check_key_id+0x38>
     170:	44 0f       	add	r20, r20
     172:	55 1f       	adc	r21, r21
     174:	0a 94       	dec	r0
     176:	e2 f7       	brpl	.-8      	; 0x170 <check_key_id+0x34>
     178:	84 2b       	or	r24, r20

	unsigned char bt = 0;
	for (int n = 0; n < KEYIDLEN; n++)
	    {
			bt = 0;
	        for(int n2 = 0;n2 < 8; n2++)
     17a:	2f 5f       	subi	r18, 0xFF	; 255
     17c:	3f 4f       	sbci	r19, 0xFF	; 255
     17e:	28 30       	cpi	r18, 0x08	; 8
     180:	31 05       	cpc	r19, r1
     182:	81 f7       	brne	.-32     	; 0x164 <check_key_id+0x28>
	        {
	 			if (buffer[n][n2]) {
					bt |= (1 << n2);
				}
	        }
			readedkeyid[n]=bt;
     184:	d7 01       	movw	r26, r14
     186:	8d 93       	st	X+, r24
     188:	7d 01       	movw	r14, r26
			LCDSendUnsafeCounteredTxt(bt, 1);
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	61 e0       	ldi	r22, 0x01	; 1
     18e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCDSendUnsafeCounteredTxt>
char check_key_id(void)
{
LCDSendCommand(CLR_DISP);

	unsigned char bt = 0;
	for (int n = 0; n < KEYIDLEN; n++)
     192:	21 96       	adiw	r28, 0x01	; 1
     194:	c8 30       	cpi	r28, 0x08	; 8
     196:	d1 05       	cpc	r29, r1
     198:	61 f0       	breq	.+24     	; 0x1b2 <check_key_id+0x76>

unsigned char tcnt, i;
char buffer[8][8];

//Вывод массива
char check_key_id(void)
     19a:	fe 01       	movw	r30, r28
     19c:	83 e0       	ldi	r24, 0x03	; 3
     19e:	ee 0f       	add	r30, r30
     1a0:	ff 1f       	adc	r31, r31
     1a2:	8a 95       	dec	r24
     1a4:	e1 f7       	brne	.-8      	; 0x19e <check_key_id+0x62>
     1a6:	e0 5c       	subi	r30, 0xC0	; 192
     1a8:	fd 4f       	sbci	r31, 0xFD	; 253
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	d9 cf       	rjmp	.-78     	; 0x164 <check_key_id+0x28>
	        }
			readedkeyid[n]=bt;
			LCDSendUnsafeCounteredTxt(bt, 1);

	    }    
	if (is_reset){
     1b2:	80 91 24 02 	lds	r24, 0x0224
     1b6:	88 23       	and	r24, r24
     1b8:	61 f4       	brne	.+24     	; 0x1d2 <check_key_id+0x96>
     1ba:	e6 e3       	ldi	r30, 0x36	; 54
     1bc:	f2 e0       	ldi	r31, 0x02	; 2
		// записать считанный код в память
	}else{
		for (char i = 0; i < KEYIDLEN; i++){
			if (keyid[i] != readedkeyid[i])
     1be:	91 91       	ld	r25, Z+
     1c0:	d8 01       	movw	r26, r16
     1c2:	8d 91       	ld	r24, X+
     1c4:	8d 01       	movw	r16, r26
     1c6:	98 17       	cp	r25, r24
     1c8:	31 f4       	brne	.+12     	; 0x1d6 <check_key_id+0x9a>

	    }    
	if (is_reset){
		// записать считанный код в память
	}else{
		for (char i = 0; i < KEYIDLEN; i++){
     1ca:	b2 e0       	ldi	r27, 0x02	; 2
     1cc:	ee 33       	cpi	r30, 0x3E	; 62
     1ce:	fb 07       	cpc	r31, r27
     1d0:	b1 f7       	brne	.-20     	; 0x1be <check_key_id+0x82>
			if (keyid[i] != readedkeyid[i])
				return 0;
		}
	}
	return 1;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <check_key_id+0x9c>
	if (is_reset){
		// записать считанный код в память
	}else{
		for (char i = 0; i < KEYIDLEN; i++){
			if (keyid[i] != readedkeyid[i])
				return 0;
     1d6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 1;
}
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	ff 90       	pop	r15
     1e2:	ef 90       	pop	r14
     1e4:	df 90       	pop	r13
     1e6:	cf 90       	pop	r12
     1e8:	08 95       	ret

000001ea <read_ds1990>:

//Чтение

void read_ds1990(void)
{ 
	cli(); 
     1ea:	f8 94       	cli
	  for(i = 0; i < 8; i++) // байтовый цикл
     1ec:	10 92 3f 02 	sts	0x023F, r1
	    _delay_us(6); // ждем 9 мкс

	 
	            if(PINB & (1 << PINB0))
	            {
	            buffer[i][tcnt] = 1;
     1f0:	21 e0       	ldi	r18, 0x01	; 1
//Чтение

void read_ds1990(void)
{ 
	cli(); 
	  for(i = 0; i < 8; i++) // байтовый цикл
     1f2:	3d c0       	rjmp	.+122    	; 0x26e <read_ds1990+0x84>
	  {

	    for(tcnt = 0; tcnt < 8; tcnt++)          // битовый цикл
     1f4:	10 92 3e 02 	sts	0x023E, r1
     1f8:	31 c0       	rjmp	.+98     	; 0x25c <read_ds1990+0x72>
	    {

	    DDRB|=_BV(0);
     1fa:	b8 9a       	sbi	0x17, 0	; 23
	    PORTB&=~_BV(0);
     1fc:	c0 98       	cbi	0x18, 0	; 24
     1fe:	90 e1       	ldi	r25, 0x10	; 16
     200:	9a 95       	dec	r25
     202:	f1 f7       	brne	.-4      	; 0x200 <read_ds1990+0x16>
	    _delay_us(3);// ждем 6 мкс
	    PORTB&=~_BV(0);
     204:	c0 98       	cbi	0x18, 0	; 24
	    DDRB&=~_BV(0);
     206:	b8 98       	cbi	0x17, 0	; 23
     208:	90 e2       	ldi	r25, 0x20	; 32
     20a:	9a 95       	dec	r25
     20c:	f1 f7       	brne	.-4      	; 0x20a <read_ds1990+0x20>
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	e0 91 3f 02 	lds	r30, 0x023F
	    _delay_us(6); // ждем 9 мкс

	 
	            if(PINB & (1 << PINB0))
     214:	b0 9b       	sbis	0x16, 0	; 22
     216:	0c c0       	rjmp	.+24     	; 0x230 <read_ds1990+0x46>
	            {
	            buffer[i][tcnt] = 1;
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	43 e0       	ldi	r20, 0x03	; 3
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	4a 95       	dec	r20
     222:	e1 f7       	brne	.-8      	; 0x21c <read_ds1990+0x32>
     224:	e8 0f       	add	r30, r24
     226:	f9 1f       	adc	r31, r25
     228:	e0 5c       	subi	r30, 0xC0	; 192
     22a:	fd 4f       	sbci	r31, 0xFD	; 253
     22c:	20 83       	st	Z, r18
     22e:	0b c0       	rjmp	.+22     	; 0x246 <read_ds1990+0x5c>
	            }
	            else
	            {
	            buffer[i][tcnt] = 0;
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	33 e0       	ldi	r19, 0x03	; 3
     234:	ee 0f       	add	r30, r30
     236:	ff 1f       	adc	r31, r31
     238:	3a 95       	dec	r19
     23a:	e1 f7       	brne	.-8      	; 0x234 <read_ds1990+0x4a>
     23c:	e8 0f       	add	r30, r24
     23e:	f9 1f       	adc	r31, r25
     240:	e0 5c       	subi	r30, 0xC0	; 192
     242:	fd 4f       	sbci	r31, 0xFD	; 253
     244:	10 82       	st	Z, r1
     246:	8f ed       	ldi	r24, 0xDF	; 223
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <read_ds1990+0x60>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <read_ds1990+0x66>
     250:	00 00       	nop
{ 
	cli(); 
	  for(i = 0; i < 8; i++) // байтовый цикл
	  {

	    for(tcnt = 0; tcnt < 8; tcnt++)          // битовый цикл
     252:	80 91 3e 02 	lds	r24, 0x023E
     256:	8f 5f       	subi	r24, 0xFF	; 255
     258:	80 93 3e 02 	sts	0x023E, r24
     25c:	80 91 3e 02 	lds	r24, 0x023E
     260:	88 30       	cpi	r24, 0x08	; 8
     262:	58 f2       	brcs	.-106    	; 0x1fa <read_ds1990+0x10>
//Чтение

void read_ds1990(void)
{ 
	cli(); 
	  for(i = 0; i < 8; i++) // байтовый цикл
     264:	80 91 3f 02 	lds	r24, 0x023F
     268:	8f 5f       	subi	r24, 0xFF	; 255
     26a:	80 93 3f 02 	sts	0x023F, r24
     26e:	80 91 3f 02 	lds	r24, 0x023F
     272:	88 30       	cpi	r24, 0x08	; 8
     274:	08 f4       	brcc	.+2      	; 0x278 <read_ds1990+0x8e>
     276:	be cf       	rjmp	.-132    	; 0x1f4 <read_ds1990+0xa>
		_delay_us(120);
	    }
	    //_delay_ms(0.044);
	 }

	sei();
     278:	78 94       	sei
    return check_key_id();
     27a:	0e 94 9e 00 	call	0x13c	; 0x13c <check_key_id>
}
     27e:	08 95       	ret

00000280 <reset_ds1990>:
}

//Функция сброса DS1990
void reset_ds1990(void)
{
DDRB|=_BV(0);        // Вывод порта настраиваем как выход
     280:	b8 9a       	sbi	0x17, 0	; 23
PORTB&=~_BV(0);
     282:	c0 98       	cbi	0x18, 0	; 24

cli();
     284:	f8 94       	cli
     286:	8f e0       	ldi	r24, 0x0F	; 15
     288:	99 e0       	ldi	r25, 0x09	; 9
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <reset_ds1990+0xa>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <reset_ds1990+0x10>
     290:	00 00       	nop
_delay_us(580); //Устанавливаем 0 в теч. около 480 мкс

DDRB&=~_BV(0);       //Вывод порта настраиваем как вход
     292:	b8 98       	cbi	0x17, 0	; 23
     294:	87 e1       	ldi	r24, 0x17	; 23
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <reset_ds1990+0x18>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <reset_ds1990+0x1e>
     29e:	00 00       	nop
_delay_us(70);  //Ожидание сигнала присутствия 70 мкс
   if(PINB & (1<<PINB0))  //Если 1 - нет сигнала присутствия
     2a0:	b0 9b       	sbis	0x16, 0	; 22
     2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <reset_ds1990+0x34>
     2a4:	87 e6       	ldi	r24, 0x67	; 103
     2a6:	96 e0       	ldi	r25, 0x06	; 6
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <reset_ds1990+0x28>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <reset_ds1990+0x2e>
     2ae:	00 00       	nop
   {
   _delay_us(410); //410 мкс
   sei();
     2b0:	78 94       	sei
     2b2:	08 95       	ret
     2b4:	87 e6       	ldi	r24, 0x67	; 103
     2b6:	96 e0       	ldi	r25, 0x06	; 6
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <reset_ds1990+0x38>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <reset_ds1990+0x3e>
     2be:	00 00       	nop
   }   
  else
  {
  _delay_us(410); //410 мкс
  sei();
     2c0:	78 94       	sei
  send_ds1990_command(0x33);
     2c2:	83 e3       	ldi	r24, 0x33	; 51
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 67 00 	call	0xce	; 0xce <send_ds1990_command>
  read_ds1990();
     2ca:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_ds1990>
     2ce:	08 95       	ret

000002d0 <StrCmp>:
	for (char i = 0; i < len; i++){
		if (origin[i] != copy[i]){
			return 1;
		}
	}
	return 0;
     2d0:	26 2f       	mov	r18, r22
     2d2:	37 2f       	mov	r19, r23
     2d4:	d9 01       	movw	r26, r18
//*******************************************************************************

char StrCmp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
     2d6:	e8 2f       	mov	r30, r24
     2d8:	f9 2f       	mov	r31, r25
     2da:	04 c0       	rjmp	.+8      	; 0x2e4 <StrCmp+0x14>
		if (origin[i] != copy[i]){
     2dc:	21 91       	ld	r18, Z+
     2de:	9d 91       	ld	r25, X+
     2e0:	29 17       	cp	r18, r25
     2e2:	31 f4       	brne	.+12     	; 0x2f0 <StrCmp+0x20>
//*******************************************************************************

char StrCmp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
     2e4:	9e 2f       	mov	r25, r30
     2e6:	98 1b       	sub	r25, r24
     2e8:	94 17       	cp	r25, r20
     2ea:	c0 f3       	brcs	.-16     	; 0x2dc <StrCmp+0xc>
		if (origin[i] != copy[i]){
			return 1;
		}
	}
	return 0;
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	08 95       	ret
char StrCmp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
		if (origin[i] != copy[i]){
			return 1;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
     2f2:	08 95       	ret

000002f4 <StrCp>:
//--------------------------------

void StrCp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
     2f4:	28 2f       	mov	r18, r24
     2f6:	39 2f       	mov	r19, r25
     2f8:	d9 01       	movw	r26, r18
     2fa:	86 2f       	mov	r24, r22
     2fc:	97 2f       	mov	r25, r23
     2fe:	fc 01       	movw	r30, r24
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	03 c0       	rjmp	.+6      	; 0x30a <StrCp+0x16>
		copy[i] = origin[i];
     304:	9d 91       	ld	r25, X+
     306:	91 93       	st	Z+, r25
//--------------------------------

void StrCp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
     308:	8f 5f       	subi	r24, 0xFF	; 255
     30a:	84 17       	cp	r24, r20
     30c:	d8 f3       	brcs	.-10     	; 0x304 <StrCp+0x10>
		copy[i] = origin[i];
	}	
}
     30e:	08 95       	ret

00000310 <SetupTIMER1>:
     // will occur every:
     //   1<<CS10                  4096 mkS  (no prescale Fclk)
     //   1<<CS11                  32.768 mS (Fclk/8)
     //  (1<<CS11)|(1<<CS10)       262.144 mS (Fclk/64)
     //   1<<CS12                  1048.576 mS (Fclk/256)
     TCCR1B = (1<<CS12);
     310:	84 e0       	ldi	r24, 0x04	; 4
     312:	8e bd       	out	0x2e, r24	; 46
     TCNT1 = 65536-62439;        //примерно 1 секунда
     314:	89 e1       	ldi	r24, 0x19	; 25
     316:	9c e0       	ldi	r25, 0x0C	; 12
     318:	9d bd       	out	0x2d, r25	; 45
     31a:	8c bd       	out	0x2c, r24	; 44
     /* Enable timer 1 overflow interrupt. */
     TIMSK |= (1<<TOIE1);
     31c:	87 b7       	in	r24, 0x37	; 55
     31e:	84 60       	ori	r24, 0x04	; 4
     320:	87 bf       	out	0x37, r24	; 55

	
 	 sei();
     322:	78 94       	sei
}
     324:	08 95       	ret

00000326 <SetupTIMER3>:
     // will occur every:
     //   1<<CS10                  4096 mkS  (no prescale Fclk)
     //   1<<CS11                  32.768 mS (Fclk/8)
     //  (1<<CS11)|(1<<CS10)       262.144 mS (Fclk/64)
     //   1<<CS12                  1048.576 mS (Fclk/256)
     TCCR3B = (1<<CS12);
     326:	84 e0       	ldi	r24, 0x04	; 4
     328:	80 93 8a 00 	sts	0x008A, r24
     TCNT3 = 65536-62439;        //примерно 1 секунда
     32c:	89 e1       	ldi	r24, 0x19	; 25
     32e:	9c e0       	ldi	r25, 0x0C	; 12
     330:	90 93 89 00 	sts	0x0089, r25
     334:	80 93 88 00 	sts	0x0088, r24
     /* Enable timer 1 overflow interrupt. */
     ETIMSK |= (1<<TOIE3);
     338:	ed e7       	ldi	r30, 0x7D	; 125
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	84 60       	ori	r24, 0x04	; 4
     340:	80 83       	st	Z, r24

 	 sei();
     342:	78 94       	sei
}
     344:	08 95       	ret

00000346 <GetButton>:
	if (!(BUTTONPIN & 0b00000001) && all_released){
		all_released = 0;
		return 1;	
	}
*/	
	if (!(BUTTONPIN & 0b00000010) && all_released){
     346:	c9 99       	sbic	0x19, 1	; 25
     348:	08 c0       	rjmp	.+16     	; 0x35a <GetButton+0x14>
     34a:	80 91 2d 02 	lds	r24, 0x022D
     34e:	88 23       	and	r24, r24
     350:	21 f0       	breq	.+8      	; 0x35a <GetButton+0x14>
		all_released = 0;
     352:	10 92 2d 02 	sts	0x022D, r1
		return 2;	
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	08 95       	ret
	}

	if (!(BUTTONPIN & 0b00000100) && all_released){
     35a:	ca 99       	sbic	0x19, 2	; 25
     35c:	08 c0       	rjmp	.+16     	; 0x36e <GetButton+0x28>
     35e:	80 91 2d 02 	lds	r24, 0x022D
     362:	88 23       	and	r24, r24
     364:	21 f0       	breq	.+8      	; 0x36e <GetButton+0x28>
		all_released = 0;
     366:	10 92 2d 02 	sts	0x022D, r1
		return 3;	
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	08 95       	ret
	}

	if (!(BUTTONPIN & 0b00001000) && all_released){
     36e:	cb 99       	sbic	0x19, 3	; 25
     370:	08 c0       	rjmp	.+16     	; 0x382 <GetButton+0x3c>
     372:	80 91 2d 02 	lds	r24, 0x022D
     376:	88 23       	and	r24, r24
     378:	21 f0       	breq	.+8      	; 0x382 <GetButton+0x3c>
		all_released = 0;
     37a:	10 92 2d 02 	sts	0x022D, r1
		return 4;	
     37e:	84 e0       	ldi	r24, 0x04	; 4
     380:	08 95       	ret
	}

	if (!(BUTTONPIN & 0b00010000) && all_released){
     382:	cc 99       	sbic	0x19, 4	; 25
     384:	08 c0       	rjmp	.+16     	; 0x396 <GetButton+0x50>
     386:	80 91 2d 02 	lds	r24, 0x022D
     38a:	88 23       	and	r24, r24
     38c:	21 f0       	breq	.+8      	; 0x396 <GetButton+0x50>
		all_released = 0;
     38e:	10 92 2d 02 	sts	0x022D, r1
		return 5;	
     392:	85 e0       	ldi	r24, 0x05	; 5
     394:	08 95       	ret
	}

	if (    (/*(PINA & 0b00000001)
			|*/(PINA & 0b00000010)
     396:	69 b3       	in	r22, 0x19	; 25
			|(PINA & 0b00000100)
     398:	89 b3       	in	r24, 0x19	; 25
			|(PINA & 0b00001000)
     39a:	49 b3       	in	r20, 0x19	; 25
			|(PINA & 0b00010000)) == 30)//31)
     39c:	29 b3       	in	r18, 0x19	; 25
		return 5;	
	}

	if (    (/*(PINA & 0b00000001)
			|*/(PINA & 0b00000010)
			|(PINA & 0b00000100)
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	84 70       	andi	r24, 0x04	; 4
     3a2:	90 70       	andi	r25, 0x00	; 0
		all_released = 0;
		return 5;	
	}

	if (    (/*(PINA & 0b00000001)
			|*/(PINA & 0b00000010)
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	62 70       	andi	r22, 0x02	; 2
     3a8:	70 70       	andi	r23, 0x00	; 0
			|(PINA & 0b00000100)
     3aa:	86 2b       	or	r24, r22
     3ac:	97 2b       	or	r25, r23
			|(PINA & 0b00001000)
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	48 70       	andi	r20, 0x08	; 8
     3b2:	50 70       	andi	r21, 0x00	; 0
     3b4:	84 2b       	or	r24, r20
     3b6:	95 2b       	or	r25, r21
			|(PINA & 0b00010000)) == 30)//31)
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	20 71       	andi	r18, 0x10	; 16
     3bc:	30 70       	andi	r19, 0x00	; 0
     3be:	82 2b       	or	r24, r18
     3c0:	93 2b       	or	r25, r19
	if (!(BUTTONPIN & 0b00010000) && all_released){
		all_released = 0;
		return 5;	
	}

	if (    (/*(PINA & 0b00000001)
     3c2:	8e 31       	cpi	r24, 0x1E	; 30
     3c4:	91 05       	cpc	r25, r1
     3c6:	29 f4       	brne	.+10     	; 0x3d2 <GetButton+0x8c>
			|*/(PINA & 0b00000010)
			|(PINA & 0b00000100)
			|(PINA & 0b00001000)
			|(PINA & 0b00010000)) == 30)//31)
	all_released = 1; //all bottons are released
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	80 93 2d 02 	sts	0x022D, r24

	return 0;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	08 95       	ret
     3d2:	80 e0       	ldi	r24, 0x00	; 0
}
     3d4:	08 95       	ret

000003d6 <PrintToSevenSeg>:

//---------------------------------------------------------------

char PrintToSevenSeg(long value)
{
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	df 93       	push	r29
     3dc:	cf 93       	push	r28
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	60 97       	sbiw	r28, 0x10	; 16
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
	char stext	 [TEXTLEN];

	sprintf(stext,"%d",value);
     3ee:	2d b7       	in	r18, 0x3d	; 61
     3f0:	3e b7       	in	r19, 0x3e	; 62
     3f2:	28 50       	subi	r18, 0x08	; 8
     3f4:	30 40       	sbci	r19, 0x00	; 0
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	3e bf       	out	0x3e, r19	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	2d bf       	out	0x3d, r18	; 61
     400:	ed b7       	in	r30, 0x3d	; 61
     402:	fe b7       	in	r31, 0x3e	; 62
     404:	31 96       	adiw	r30, 0x01	; 1
     406:	8e 01       	movw	r16, r28
     408:	0f 5f       	subi	r16, 0xFF	; 255
     40a:	1f 4f       	sbci	r17, 0xFF	; 255
     40c:	ad b7       	in	r26, 0x3d	; 61
     40e:	be b7       	in	r27, 0x3e	; 62
     410:	12 96       	adiw	r26, 0x02	; 2
     412:	1c 93       	st	X, r17
     414:	0e 93       	st	-X, r16
     416:	11 97       	sbiw	r26, 0x01	; 1
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	31 e0       	ldi	r19, 0x01	; 1
     41c:	33 83       	std	Z+3, r19	; 0x03
     41e:	22 83       	std	Z+2, r18	; 0x02
     420:	64 83       	std	Z+4, r22	; 0x04
     422:	75 83       	std	Z+5, r23	; 0x05
     424:	86 83       	std	Z+6, r24	; 0x06
     426:	97 83       	std	Z+7, r25	; 0x07
     428:	0e 94 37 07 	call	0xe6e	; 0xe6e <sprintf>

	LCDSendCommand(DD_RAM_ADDR);
     42c:	2d b7       	in	r18, 0x3d	; 61
     42e:	3e b7       	in	r19, 0x3e	; 62
     430:	28 5f       	subi	r18, 0xF8	; 248
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	3e bf       	out	0x3e, r19	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	2d bf       	out	0x3d, r18	; 61
     43e:	80 e8       	ldi	r24, 0x80	; 128
     440:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>

	LCDSendTxt(stext);
     444:	c8 01       	movw	r24, r16
     446:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCDSendTxt>

	return 0;
}
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	60 96       	adiw	r28, 0x10	; 16
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	de bf       	out	0x3e, r29	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	cd bf       	out	0x3d, r28	; 61
     458:	cf 91       	pop	r28
     45a:	df 91       	pop	r29
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	08 95       	ret

00000462 <GameOver>:

//---------------------------------------------------------------

void GameOver()
{
	is_game = 0;
     462:	10 92 21 02 	sts	0x0221, r1
	is_timer = 0;
     466:	10 92 22 02 	sts	0x0222, r1
	LCDSendCommand(CLR_DISP); 
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
	LCDSendUnsafeCounteredTxt(GAMEOVER, TEXTLEN);
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	60 e1       	ldi	r22, 0x10	; 16
     476:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCDSendUnsafeCounteredTxt>

	// reinit timer

	timer_cur = timer_init_val;
     47a:	80 91 1b 02 	lds	r24, 0x021B
     47e:	90 91 1c 02 	lds	r25, 0x021C
     482:	a0 91 1d 02 	lds	r26, 0x021D
     486:	b0 91 1e 02 	lds	r27, 0x021E
     48a:	80 93 25 02 	sts	0x0225, r24
     48e:	90 93 26 02 	sts	0x0226, r25
     492:	a0 93 27 02 	sts	0x0227, r26
     496:	b0 93 28 02 	sts	0x0228, r27

	UPBIT(PORTA,6);	
     49a:	de 9a       	sbi	0x1b, 6	; 27
}
     49c:	08 95       	ret

0000049e <GamePaused>:

//---------------------------------------------------------------

void GamePaused()
{
	is_timer = 0;
     49e:	10 92 22 02 	sts	0x0222, r1

	UPBIT(PORTA,6);
     4a2:	de 9a       	sbi	0x1b, 6	; 27
}
     4a4:	08 95       	ret

000004a6 <MakeBoom>:

//---------------------------------------------------------------

void MakeBoom()
{
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
	is_timer = 0;
     4aa:	10 92 22 02 	sts	0x0222, r1
	is_game = 0;
     4ae:	10 92 21 02 	sts	0x0221, r1

	timer_cur = timer_init_val;
     4b2:	80 91 1b 02 	lds	r24, 0x021B
     4b6:	90 91 1c 02 	lds	r25, 0x021C
     4ba:	a0 91 1d 02 	lds	r26, 0x021D
     4be:	b0 91 1e 02 	lds	r27, 0x021E
     4c2:	80 93 25 02 	sts	0x0225, r24
     4c6:	90 93 26 02 	sts	0x0226, r25
     4ca:	a0 93 27 02 	sts	0x0227, r26
     4ce:	b0 93 28 02 	sts	0x0228, r27

	LCDSendCommand(CLR_DISP);
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
	LCDSendTxt(" BOOM BOOM BOOM "); 
     4d8:	c4 e1       	ldi	r28, 0x14	; 20
     4da:	d1 e0       	ldi	r29, 0x01	; 1
     4dc:	ce 01       	movw	r24, r28
     4de:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCDSendTxt>
	LCDSendCommand(DD_RAM_ADDR2);
     4e2:	80 ec       	ldi	r24, 0xC0	; 192
     4e4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
	LCDSendTxt(" BOOM BOOM BOOM ");
     4e8:	ce 01       	movw	r24, r28
     4ea:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCDSendTxt>

	UPBIT(PORTA,6);	
     4ee:	de 9a       	sbi	0x1b, 6	; 27
	
}
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <CheckKey>:

//---------------------------------------------------------------

char CheckKey ()
{
    reset_ds1990();
     4f6:	0e 94 40 01 	call	0x280	; 0x280 <reset_ds1990>

	static char was_released = 0;
	if (!(BUTTONPIN & 0b00000001) && was_released){
     4fa:	c8 99       	sbic	0x19, 0	; 25
     4fc:	08 c0       	rjmp	.+16     	; 0x50e <CheckKey+0x18>
     4fe:	80 91 2c 02 	lds	r24, 0x022C
     502:	88 23       	and	r24, r24
     504:	21 f0       	breq	.+8      	; 0x50e <CheckKey+0x18>
		was_released = 0;
     506:	10 92 2c 02 	sts	0x022C, r1
		return 1;	
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	08 95       	ret
	}
	
	if (PINA & 0b00000001)
     50e:	c8 9b       	sbis	0x19, 0	; 25
     510:	05 c0       	rjmp	.+10     	; 0x51c <CheckKey+0x26>
		was_released = 1;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 2c 02 	sts	0x022C, r24

	return 0;
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	08 95       	ret
     51c:	80 e0       	ldi	r24, 0x00	; 0
}
     51e:	08 95       	ret

00000520 <CheckState>:
//---------------------------------------------------------------

char CheckState(char is_key_state)
{

	if (is_key_state == 1){ // first key, now just one 
     520:	81 30       	cpi	r24, 0x01	; 1
     522:	01 f5       	brne	.+64     	; 0x564 <CheckState+0x44>
		if (is_game){
     524:	80 91 21 02 	lds	r24, 0x0221
     528:	88 23       	and	r24, r24
     52a:	29 f0       	breq	.+10     	; 0x536 <CheckState+0x16>
			GameOver();
     52c:	0e 94 31 02 	call	0x462	; 0x462 <GameOver>
			is_key = 0;
     530:	10 92 23 02 	sts	0x0223, r1
     534:	15 c0       	rjmp	.+42     	; 0x560 <CheckState+0x40>
			return 1;
		}else{
			is_key = 0;
     536:	10 92 23 02 	sts	0x0223, r1
			menu_pos = EADMIN;
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	80 93 ea 01 	sts	0x01EA, r24
			LCDSendCommand(CLR_DISP); 
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
			LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
     546:	80 91 ea 01 	lds	r24, 0x01EA
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	54 e0       	ldi	r21, 0x04	; 4
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	5a 95       	dec	r21
     554:	e1 f7       	brne	.-8      	; 0x54e <CheckState+0x2e>
     556:	86 58       	subi	r24, 0x86	; 134
     558:	9e 4f       	sbci	r25, 0xFE	; 254
     55a:	60 e1       	ldi	r22, 0x10	; 16
     55c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCDSendUnsafeCounteredTxt>
			return 1;				
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	08 95       	ret
		}
	}
	return 0;
     564:	80 e0       	ldi	r24, 0x00	; 0
}
     566:	08 95       	ret

00000568 <MenuSelect>:

//---------------------------------------------------------------

char MenuSelect(char key)
{	
     568:	1f 93       	push	r17
	static char pos = 0;
	static char addrr = 0;

	if (key != OKBUT && key != NOBUT){ // some digit
     56a:	82 30       	cpi	r24, 0x02	; 2
     56c:	09 f4       	brne	.+2      	; 0x570 <MenuSelect+0x8>
     56e:	6b c0       	rjmp	.+214    	; 0x646 <MenuSelect+0xde>
     570:	84 30       	cpi	r24, 0x04	; 4
     572:	31 f1       	breq	.+76     	; 0x5c0 <MenuSelect+0x58>

		if (pos == TEXTLEN)
     574:	90 91 2b 02 	lds	r25, 0x022B
     578:	90 31       	cpi	r25, 0x10	; 16
     57a:	19 f4       	brne	.+6      	; 0x582 <MenuSelect+0x1a>
			pos--;
     57c:	9f e0       	ldi	r25, 0x0F	; 15
     57e:	90 93 2b 02 	sts	0x022B, r25

		curtext[pos++] = key + 48; // from digit to asci simbol of digit
     582:	90 91 2b 02 	lds	r25, 0x022B
     586:	e9 2f       	mov	r30, r25
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	e0 58       	subi	r30, 0x80	; 128
     58c:	fd 4f       	sbci	r31, 0xFD	; 253
     58e:	80 5d       	subi	r24, 0xD0	; 208
     590:	80 83       	st	Z, r24
     592:	89 2f       	mov	r24, r25
     594:	8f 5f       	subi	r24, 0xFF	; 255
     596:	80 93 2b 02 	sts	0x022B, r24

		for (char i = pos; i < TEXTLEN; i++){
			curtext[i] = ' ';
     59a:	90 e2       	ldi	r25, 0x20	; 32
		if (pos == TEXTLEN)
			pos--;

		curtext[pos++] = key + 48; // from digit to asci simbol of digit

		for (char i = pos; i < TEXTLEN; i++){
     59c:	06 c0       	rjmp	.+12     	; 0x5aa <MenuSelect+0x42>
			curtext[i] = ' ';
     59e:	e8 2f       	mov	r30, r24
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	e0 58       	subi	r30, 0x80	; 128
     5a4:	fd 4f       	sbci	r31, 0xFD	; 253
     5a6:	90 83       	st	Z, r25
		if (pos == TEXTLEN)
			pos--;

		curtext[pos++] = key + 48; // from digit to asci simbol of digit

		for (char i = pos; i < TEXTLEN; i++){
     5a8:	8f 5f       	subi	r24, 0xFF	; 255
     5aa:	80 31       	cpi	r24, 0x10	; 16
     5ac:	c0 f3       	brcs	.-16     	; 0x59e <MenuSelect+0x36>
			curtext[i] = ' ';
		}

		LCDSendCommand(DD_RAM_ADDR2);
     5ae:	80 ec       	ldi	r24, 0xC0	; 192
     5b0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
		LCDSendUnsafeCounteredTxt(curtext, TEXTLEN);
     5b4:	80 e8       	ldi	r24, 0x80	; 128
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	60 e1       	ldi	r22, 0x10	; 16
     5ba:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCDSendUnsafeCounteredTxt>
     5be:	1d c1       	rjmp	.+570    	; 0x7fa <MenuSelect+0x292>

	}else{ // command buttons
		if (key == NOBUT)
		{
			if (is_timer){ // game already started
     5c0:	80 91 22 02 	lds	r24, 0x0222
     5c4:	88 23       	and	r24, r24
     5c6:	d9 f0       	breq	.+54     	; 0x5fe <MenuSelect+0x96>
				menu_pos = ESTOP;
     5c8:	10 92 ea 01 	sts	0x01EA, r1
				LCDSendCommand(CLR_DISP); 
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
				LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
     5d2:	80 91 ea 01 	lds	r24, 0x01EA
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	74 e0       	ldi	r23, 0x04	; 4
     5da:	88 0f       	add	r24, r24
     5dc:	99 1f       	adc	r25, r25
     5de:	7a 95       	dec	r23
     5e0:	e1 f7       	brne	.-8      	; 0x5da <MenuSelect+0x72>
     5e2:	86 58       	subi	r24, 0x86	; 134
     5e4:	9e 4f       	sbci	r25, 0xFE	; 254
     5e6:	60 e1       	ldi	r22, 0x10	; 16
     5e8:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCDSendUnsafeCounteredTxt>
     5ec:	e0 e8       	ldi	r30, 0x80	; 128
     5ee:	f2 e0       	ldi	r31, 0x02	; 2
				for (char i = 0; i < TEXTLEN; i++)
					curtext[i] = ' ';
     5f0:	80 e2       	ldi	r24, 0x20	; 32
     5f2:	81 93       	st	Z+, r24
		{
			if (is_timer){ // game already started
				menu_pos = ESTOP;
				LCDSendCommand(CLR_DISP); 
				LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
				for (char i = 0; i < TEXTLEN; i++)
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	e0 39       	cpi	r30, 0x90	; 144
     5f8:	f9 07       	cpc	r31, r25
     5fa:	d9 f7       	brne	.-10     	; 0x5f2 <MenuSelect+0x8a>
     5fc:	20 c0       	rjmp	.+64     	; 0x63e <MenuSelect+0xd6>
					curtext[i] = ' ';
				pos = 0;
			}else{ // game not started
				if (is_admin){
     5fe:	80 91 20 02 	lds	r24, 0x0220
     602:	88 23       	and	r24, r24
     604:	49 f0       	breq	.+18     	; 0x618 <MenuSelect+0xb0>
					if (++menu_pos == MENUCOUNT)
     606:	80 91 ea 01 	lds	r24, 0x01EA
     60a:	8f 5f       	subi	r24, 0xFF	; 255
     60c:	80 93 ea 01 	sts	0x01EA, r24
     610:	87 30       	cpi	r24, 0x07	; 7
     612:	29 f4       	brne	.+10     	; 0x61e <MenuSelect+0xb6>
						menu_pos = SADMIN; 
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	01 c0       	rjmp	.+2      	; 0x61a <MenuSelect+0xb2>
				}else{
					menu_pos = ESTART; 
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	80 93 ea 01 	sts	0x01EA, r24
				}
			
				LCDSendCommand(CLR_DISP); 
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
				LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
     624:	80 91 ea 01 	lds	r24, 0x01EA
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	64 e0       	ldi	r22, 0x04	; 4
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	6a 95       	dec	r22
     632:	e1 f7       	brne	.-8      	; 0x62c <MenuSelect+0xc4>
     634:	86 58       	subi	r24, 0x86	; 134
     636:	9e 4f       	sbci	r25, 0xFE	; 254
     638:	60 e1       	ldi	r22, 0x10	; 16
     63a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LCDSendUnsafeCounteredTxt>
     63e:	e0 e8       	ldi	r30, 0x80	; 128
     640:	f2 e0       	ldi	r31, 0x02	; 2
			}

		}

		for (char i = 0; i < TEXTLEN; i++)
			curtext[i] = ' ';
     642:	80 e2       	ldi	r24, 0x20	; 32
     644:	d3 c0       	rjmp	.+422    	; 0x7ec <MenuSelect+0x284>
			
				LCDSendCommand(CLR_DISP); 
				LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
			}
		}else{ // OKBUT try to enter some value
			switch (menu_pos){
     646:	10 91 ea 01 	lds	r17, 0x01EA
     64a:	13 30       	cpi	r17, 0x03	; 3
     64c:	09 f4       	brne	.+2      	; 0x650 <MenuSelect+0xe8>
     64e:	5a c0       	rjmp	.+180    	; 0x704 <MenuSelect+0x19c>
     650:	14 30       	cpi	r17, 0x04	; 4
     652:	28 f4       	brcc	.+10     	; 0x65e <MenuSelect+0xf6>
     654:	11 30       	cpi	r17, 0x01	; 1
     656:	f9 f0       	breq	.+62     	; 0x696 <MenuSelect+0x12e>
     658:	12 30       	cpi	r17, 0x02	; 2
     65a:	c0 f5       	brcc	.+112    	; 0x6cc <MenuSelect+0x164>
     65c:	09 c0       	rjmp	.+18     	; 0x670 <MenuSelect+0x108>
     65e:	15 30       	cpi	r17, 0x05	; 5
     660:	09 f4       	brne	.+2      	; 0x664 <MenuSelect+0xfc>
     662:	77 c0       	rjmp	.+238    	; 0x752 <MenuSelect+0x1ea>
     664:	15 30       	cpi	r17, 0x05	; 5
     666:	08 f4       	brcc	.+2      	; 0x66a <MenuSelect+0x102>
     668:	65 c0       	rjmp	.+202    	; 0x734 <MenuSelect+0x1cc>
     66a:	16 30       	cpi	r17, 0x06	; 6
     66c:	41 f7       	brne	.-48     	; 0x63e <MenuSelect+0xd6>
     66e:	89 c0       	rjmp	.+274    	; 0x782 <MenuSelect+0x21a>

				case ESTOP:
					if ( StrCmp(curtext, stopcode, TEXTLEN) ){
     670:	80 e8       	ldi	r24, 0x80	; 128
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	6b e0       	ldi	r22, 0x0B	; 11
     676:	72 e0       	ldi	r23, 0x02	; 2
     678:	40 e1       	ldi	r20, 0x10	; 16
     67a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <StrCmp>
     67e:	88 23       	and	r24, r24
     680:	99 f4       	brne	.+38     	; 0x6a8 <MenuSelect+0x140>
						LCDSendCommand(DD_RAM_ADDR2);
						LCDSendTxt(WRONGCODE);
					}else{
						LCDSendCommand(DD_RAM_ADDR2);
     682:	80 ec       	ldi	r24, 0xC0	; 192
     684:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
						LCDSendTxt(CODEOK);
     688:	86 e3       	ldi	r24, 0x36	; 54
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCDSendTxt>
						GamePaused();
     690:	0e 94 4f 02 	call	0x49e	; 0x49e <GamePaused>
     694:	d4 cf       	rjmp	.-88     	; 0x63e <MenuSelect+0xd6>
					}
					break;

				case ESTART:
					if ( StrCmp(curtext, startcode, TEXTLEN) ){
     696:	80 e8       	ldi	r24, 0x80	; 128
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	6b ef       	ldi	r22, 0xFB	; 251
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	40 e1       	ldi	r20, 0x10	; 16
     6a0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <StrCmp>
     6a4:	88 23       	and	r24, r24
     6a6:	31 f0       	breq	.+12     	; 0x6b4 <MenuSelect+0x14c>
						LCDSendCommand(DD_RAM_ADDR2);
     6a8:	80 ec       	ldi	r24, 0xC0	; 192
     6aa:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
						LCDSendTxt(WRONGCODE);
     6ae:	85 e2       	ldi	r24, 0x25	; 37
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	1a c0       	rjmp	.+52     	; 0x6e8 <MenuSelect+0x180>
					}else{
						LCDSendCommand(DD_RAM_ADDR2);
     6b4:	80 ec       	ldi	r24, 0xC0	; 192
     6b6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
						LCDSendTxt(CODEOK);
     6ba:	86 e3       	ldi	r24, 0x36	; 54
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCDSendTxt>
						is_timer = 1;
     6c2:	10 93 22 02 	sts	0x0222, r17
						is_game = 1;
     6c6:	10 93 21 02 	sts	0x0221, r17
     6ca:	b9 cf       	rjmp	.-142    	; 0x63e <MenuSelect+0xd6>
					}
					break;

				case EADMIN:
					if ( StrCmp(curtext, adminpass, TEXTLEN) ){
     6cc:	80 e8       	ldi	r24, 0x80	; 128
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	6b ee       	ldi	r22, 0xEB	; 235
     6d2:	71 e0       	ldi	r23, 0x01	; 1
     6d4:	40 e1       	ldi	r20, 0x10	; 16
     6d6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <StrCmp>
     6da:	88 23       	and	r24, r24
     6dc:	41 f0       	breq	.+16     	; 0x6ee <MenuSelect+0x186>
						LCDSendCommand(DD_RAM_ADDR2);
     6de:	80 ec       	ldi	r24, 0xC0	; 192
     6e0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
						LCDSendTxt(WRONGPASS);
     6e4:	87 e4       	ldi	r24, 0x47	; 71
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCDSendTxt>
     6ec:	a8 cf       	rjmp	.-176    	; 0x63e <MenuSelect+0xd6>
					}else{
						LCDSendCommand(DD_RAM_ADDR2);
     6ee:	80 ec       	ldi	r24, 0xC0	; 192
     6f0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
						LCDSendTxt(CORRECTPASS);
     6f4:	88 e5       	ldi	r24, 0x58	; 88
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCDSendTxt>
						is_admin = 1;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	80 93 20 02 	sts	0x0220, r24
     702:	9d cf       	rjmp	.-198    	; 0x63e <MenuSelect+0xd6>
					}
					break;

				case SADMIN:
					StrCp(curtext, adminpass, TEXTLEN);
     704:	80 e8       	ldi	r24, 0x80	; 128
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	6b ee       	ldi	r22, 0xEB	; 235
     70a:	71 e0       	ldi	r23, 0x01	; 1
     70c:	40 e1       	ldi	r20, 0x10	; 16
     70e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <StrCp>

					addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_ADMPASS;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	80 93 2a 02 	sts	0x022A, r24
					eeprom_write_block (adminpass, addrr, TEXTLEN);
     718:	8b ee       	ldi	r24, 0xEB	; 235
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	40 e1       	ldi	r20, 0x10	; 16
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	0e 94 8d 09 	call	0x131a	; 0x131a <__eewr_block_m128>

					LCDSendCommand(DD_RAM_ADDR2);
     728:	80 ec       	ldi	r24, 0xC0	; 192
     72a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
					LCDSendTxt(CORRECTPASS);
     72e:	88 e5       	ldi	r24, 0x58	; 88
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	da cf       	rjmp	.-76     	; 0x6e8 <MenuSelect+0x180>
					break;

				case SSTART:
					StrCp(curtext, startcode, TEXTLEN);
     734:	80 e8       	ldi	r24, 0x80	; 128
     736:	92 e0       	ldi	r25, 0x02	; 2
     738:	6b ef       	ldi	r22, 0xFB	; 251
     73a:	71 e0       	ldi	r23, 0x01	; 1
     73c:	40 e1       	ldi	r20, 0x10	; 16
     73e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <StrCp>

					addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STARTCODE;
     742:	81 e1       	ldi	r24, 0x11	; 17
     744:	80 93 2a 02 	sts	0x022A, r24
					eeprom_write_block (startcode, addrr, TEXTLEN);
     748:	8b ef       	ldi	r24, 0xFB	; 251
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	61 e1       	ldi	r22, 0x11	; 17
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	0e c0       	rjmp	.+28     	; 0x76e <MenuSelect+0x206>
					LCDSendCommand(DD_RAM_ADDR2);
					LCDSendTxt(CODEOK);
					break;

				case SSTOP:
					StrCp(curtext, stopcode, TEXTLEN);
     752:	80 e8       	ldi	r24, 0x80	; 128
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	6b e0       	ldi	r22, 0x0B	; 11
     758:	72 e0       	ldi	r23, 0x02	; 2
     75a:	40 e1       	ldi	r20, 0x10	; 16
     75c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <StrCp>

					addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STOPCODE;
     760:	81 e2       	ldi	r24, 0x21	; 33
     762:	80 93 2a 02 	sts	0x022A, r24
					eeprom_write_block (stopcode, addrr, TEXTLEN);
     766:	8b e0       	ldi	r24, 0x0B	; 11
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	61 e2       	ldi	r22, 0x21	; 33
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	40 e1       	ldi	r20, 0x10	; 16
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	0e 94 8d 09 	call	0x131a	; 0x131a <__eewr_block_m128>
	
					LCDSendCommand(DD_RAM_ADDR2);
     776:	80 ec       	ldi	r24, 0xC0	; 192
     778:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
					LCDSendTxt(CODEOK);
     77c:	86 e3       	ldi	r24, 0x36	; 54
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	b3 cf       	rjmp	.-154    	; 0x6e8 <MenuSelect+0x180>
					break;
     782:	e0 e8       	ldi	r30, 0x80	; 128
     784:	f2 e0       	ldi	r31, 0x02	; 2

				case STIMER:

					for (char i = 0; i < TEXTLEN; i++)
						if (curtext[i] == ' ')
     786:	80 81       	ld	r24, Z
     788:	80 32       	cpi	r24, 0x20	; 32
     78a:	09 f4       	brne	.+2      	; 0x78e <MenuSelect+0x226>
							curtext[i] = 0;	
     78c:	10 82       	st	Z, r1
     78e:	31 96       	adiw	r30, 0x01	; 1
					LCDSendTxt(CODEOK);
					break;

				case STIMER:

					for (char i = 0; i < TEXTLEN; i++)
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	e0 39       	cpi	r30, 0x90	; 144
     794:	f8 07       	cpc	r31, r24
     796:	b9 f7       	brne	.-18     	; 0x786 <MenuSelect+0x21e>
						if (curtext[i] == ' ')
							curtext[i] = 0;	
					timer_init_val = atoi(curtext);
     798:	cf 01       	movw	r24, r30
     79a:	40 97       	sbiw	r24, 0x10	; 16
     79c:	0e 94 11 07 	call	0xe22	; 0xe22 <atoi>
     7a0:	ac 01       	movw	r20, r24
     7a2:	66 27       	eor	r22, r22
     7a4:	57 fd       	sbrc	r21, 7
     7a6:	60 95       	com	r22
     7a8:	76 2f       	mov	r23, r22
     7aa:	40 93 1b 02 	sts	0x021B, r20
     7ae:	50 93 1c 02 	sts	0x021C, r21
     7b2:	60 93 1d 02 	sts	0x021D, r22
     7b6:	70 93 1e 02 	sts	0x021E, r23
					timer_cur = timer_init_val;
     7ba:	40 93 25 02 	sts	0x0225, r20
     7be:	50 93 26 02 	sts	0x0226, r21
     7c2:	60 93 27 02 	sts	0x0227, r22
     7c6:	70 93 28 02 	sts	0x0228, r23

					addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_TIMER;
     7ca:	81 e3       	ldi	r24, 0x31	; 49
     7cc:	80 93 2a 02 	sts	0x022A, r24
					eeprom_write_dword (addrr, timer_init_val);
     7d0:	81 e3       	ldi	r24, 0x31	; 49
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 a4 09 	call	0x1348	; 0x1348 <__eewr_dword_m128>

					LCDSendCommand(DD_RAM_ADDR2);
     7d8:	80 ec       	ldi	r24, 0xC0	; 192
     7da:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
					LCDSendTxt(TIMEROK);
     7de:	89 e6       	ldi	r24, 0x69	; 105
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCDSendTxt>
					is_admin = 0;
     7e6:	10 92 20 02 	sts	0x0220, r1
					break;
     7ea:	29 cf       	rjmp	.-430    	; 0x63e <MenuSelect+0xd6>
			}

		}

		for (char i = 0; i < TEXTLEN; i++)
			curtext[i] = ' ';
     7ec:	81 93       	st	Z+, r24

			}

		}

		for (char i = 0; i < TEXTLEN; i++)
     7ee:	92 e0       	ldi	r25, 0x02	; 2
     7f0:	e0 39       	cpi	r30, 0x90	; 144
     7f2:	f9 07       	cpc	r31, r25
     7f4:	d9 f7       	brne	.-10     	; 0x7ec <MenuSelect+0x284>
			curtext[i] = ' ';
		pos = 0;
     7f6:	10 92 2b 02 	sts	0x022B, r1
			
	}

	return 0;
}
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	1f 91       	pop	r17
     7fe:	08 95       	ret

00000800 <Port_Init>:

//---------------------------------------------------------------

void Port_Init()
{
	PORTA = 0b00000000;		DDRA = 0b11000000;
     800:	1b ba       	out	0x1b, r1	; 27
     802:	80 ec       	ldi	r24, 0xC0	; 192
     804:	8a bb       	out	0x1a, r24	; 26
//	PORTB = 0b00000000;		DDRB = 0b00000000;
	LCDPORT = 0b00000000;	DDRC = 0b11110111;
     806:	15 ba       	out	0x15, r1	; 21
     808:	87 ef       	ldi	r24, 0xF7	; 247
     80a:	84 bb       	out	0x14, r24	; 20
//	PORTD = 0b11000000;		DDRD = 0b00001000;
//	PORTE = 0b00000000;		DDRE = 0b00110000;
//	PORTF = 0b00000000;		DDRF = 0b00000000;	
//	PORTG = 0b00000000;		DDRG = 0b00000000;
}
     80c:	08 95       	ret

0000080e <__vector_14>:

//---------------------------------------------------------------

ISR (TIMER1_OVF_vect)
{
     80e:	1f 92       	push	r1
     810:	0f 92       	push	r0
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	0f 92       	push	r0
     816:	0b b6       	in	r0, 0x3b	; 59
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	2f 93       	push	r18
     81e:	3f 93       	push	r19
     820:	4f 93       	push	r20
     822:	5f 93       	push	r21
     824:	6f 93       	push	r22
     826:	7f 93       	push	r23
     828:	8f 93       	push	r24
     82a:	9f 93       	push	r25
     82c:	af 93       	push	r26
     82e:	bf 93       	push	r27
     830:	ef 93       	push	r30
     832:	ff 93       	push	r31
	static char key = 0;
	TCNT1 = 65536- 6244; //  31220;
     834:	8c e9       	ldi	r24, 0x9C	; 156
     836:	97 ee       	ldi	r25, 0xE7	; 231
     838:	9d bd       	out	0x2d, r25	; 45
     83a:	8c bd       	out	0x2c, r24	; 44
    TCCR1B = (1<<CS12);
     83c:	84 e0       	ldi	r24, 0x04	; 4
     83e:	8e bd       	out	0x2e, r24	; 46
    TIMSK |= (1<<TOIE1);
     840:	87 b7       	in	r24, 0x37	; 55
     842:	84 60       	ori	r24, 0x04	; 4
     844:	87 bf       	out	0x37, r24	; 55

	PrintToSevenSeg(timer_cur);
     846:	60 91 25 02 	lds	r22, 0x0225
     84a:	70 91 26 02 	lds	r23, 0x0226
     84e:	80 91 27 02 	lds	r24, 0x0227
     852:	90 91 28 02 	lds	r25, 0x0228
     856:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <PrintToSevenSeg>

	if (!is_key)
     85a:	80 91 23 02 	lds	r24, 0x0223
     85e:	88 23       	and	r24, r24
     860:	29 f4       	brne	.+10     	; 0x86c <__vector_14+0x5e>
		is_key = CheckKey();
     862:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <CheckKey>
     866:	80 93 23 02 	sts	0x0223, r24
     86a:	02 c0       	rjmp	.+4      	; 0x870 <__vector_14+0x62>
	else
		CheckState(is_key);
     86c:	0e 94 90 02 	call	0x520	; 0x520 <CheckState>

	key = GetButton();
     870:	0e 94 a3 01 	call	0x346	; 0x346 <GetButton>
     874:	80 93 29 02 	sts	0x0229, r24
	if (key)
     878:	88 23       	and	r24, r24
     87a:	11 f0       	breq	.+4      	; 0x880 <__vector_14+0x72>
		MenuSelect(key);
     87c:	0e 94 b4 02 	call	0x568	; 0x568 <MenuSelect>

}
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	bf 91       	pop	r27
     886:	af 91       	pop	r26
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	7f 91       	pop	r23
     88e:	6f 91       	pop	r22
     890:	5f 91       	pop	r21
     892:	4f 91       	pop	r20
     894:	3f 91       	pop	r19
     896:	2f 91       	pop	r18
     898:	0f 90       	pop	r0
     89a:	0b be       	out	0x3b, r0	; 59
     89c:	0f 90       	pop	r0
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	0f 90       	pop	r0
     8a2:	1f 90       	pop	r1
     8a4:	18 95       	reti

000008a6 <__vector_29>:

//---------------------------------------------------------------

ISR (TIMER3_OVF_vect)
{
     8a6:	1f 92       	push	r1
     8a8:	0f 92       	push	r0
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	0f 92       	push	r0
     8ae:	0b b6       	in	r0, 0x3b	; 59
     8b0:	0f 92       	push	r0
     8b2:	11 24       	eor	r1, r1
     8b4:	2f 93       	push	r18
     8b6:	3f 93       	push	r19
     8b8:	4f 93       	push	r20
     8ba:	5f 93       	push	r21
     8bc:	6f 93       	push	r22
     8be:	7f 93       	push	r23
     8c0:	8f 93       	push	r24
     8c2:	9f 93       	push	r25
     8c4:	af 93       	push	r26
     8c6:	bf 93       	push	r27
     8c8:	ef 93       	push	r30
     8ca:	ff 93       	push	r31
	TCNT3 = 65536- 62439; 
     8cc:	89 e1       	ldi	r24, 0x19	; 25
     8ce:	9c e0       	ldi	r25, 0x0C	; 12
     8d0:	90 93 89 00 	sts	0x0089, r25
     8d4:	80 93 88 00 	sts	0x0088, r24
//    TCCR3B = (1<<CS12);
    ETIMSK |= (1<<TOIE3);
     8d8:	80 91 7d 00 	lds	r24, 0x007D
     8dc:	84 60       	ori	r24, 0x04	; 4
     8de:	80 93 7d 00 	sts	0x007D, r24


	if (is_timer){
     8e2:	80 91 22 02 	lds	r24, 0x0222
     8e6:	88 23       	and	r24, r24
     8e8:	e9 f0       	breq	.+58     	; 0x924 <__vector_29+0x7e>
		if (!(--timer_cur))
     8ea:	80 91 25 02 	lds	r24, 0x0225
     8ee:	90 91 26 02 	lds	r25, 0x0226
     8f2:	a0 91 27 02 	lds	r26, 0x0227
     8f6:	b0 91 28 02 	lds	r27, 0x0228
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	a1 09       	sbc	r26, r1
     8fe:	b1 09       	sbc	r27, r1
     900:	80 93 25 02 	sts	0x0225, r24
     904:	90 93 26 02 	sts	0x0226, r25
     908:	a0 93 27 02 	sts	0x0227, r26
     90c:	b0 93 28 02 	sts	0x0228, r27
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	a1 05       	cpc	r26, r1
     914:	b1 05       	cpc	r27, r1
     916:	11 f4       	brne	.+4      	; 0x91c <__vector_29+0x76>
			MakeBoom();	
     918:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MakeBoom>
		
		INVBIT(PORTA,6);
     91c:	8b b3       	in	r24, 0x1b	; 27
     91e:	90 e4       	ldi	r25, 0x40	; 64
     920:	89 27       	eor	r24, r25
     922:	8b bb       	out	0x1b, r24	; 27
	}	
}
     924:	ff 91       	pop	r31
     926:	ef 91       	pop	r30
     928:	bf 91       	pop	r27
     92a:	af 91       	pop	r26
     92c:	9f 91       	pop	r25
     92e:	8f 91       	pop	r24
     930:	7f 91       	pop	r23
     932:	6f 91       	pop	r22
     934:	5f 91       	pop	r21
     936:	4f 91       	pop	r20
     938:	3f 91       	pop	r19
     93a:	2f 91       	pop	r18
     93c:	0f 90       	pop	r0
     93e:	0b be       	out	0x3b, r0	; 59
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <GetSavedData>:
{
	char addr = 0;

	//get admin pass
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_ADMPASS;
	eeprom_read_block (adminpass, addr, TEXTLEN);
     94a:	8b ee       	ldi	r24, 0xEB	; 235
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	40 e1       	ldi	r20, 0x10	; 16
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	0e 94 77 09 	call	0x12ee	; 0x12ee <__eerd_block_m128>

	//get start code
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STARTCODE;
	eeprom_read_block (startcode, addr, TEXTLEN);
     95a:	8b ef       	ldi	r24, 0xFB	; 251
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	61 e1       	ldi	r22, 0x11	; 17
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	40 e1       	ldi	r20, 0x10	; 16
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	0e 94 77 09 	call	0x12ee	; 0x12ee <__eerd_block_m128>

	//get stop code
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STOPCODE;
	eeprom_read_block (stopcode, addr, TEXTLEN);
     96a:	8b e0       	ldi	r24, 0x0B	; 11
     96c:	92 e0       	ldi	r25, 0x02	; 2
     96e:	61 e2       	ldi	r22, 0x21	; 33
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	40 e1       	ldi	r20, 0x10	; 16
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	0e 94 77 09 	call	0x12ee	; 0x12ee <__eerd_block_m128>
	

	// get timer initial value
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_TIMER;
	timer_init_val = eeprom_read_dword(addr);
     97a:	81 e3       	ldi	r24, 0x31	; 49
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 87 09 	call	0x130e	; 0x130e <__eerd_dword_m128>
     982:	60 93 1b 02 	sts	0x021B, r22
     986:	70 93 1c 02 	sts	0x021C, r23
     98a:	80 93 1d 02 	sts	0x021D, r24
     98e:	90 93 1e 02 	sts	0x021E, r25
	

	//get keyID
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_KEY;
	eeprom_read_block (keyid, addr, KEYIDLEN);
     992:	86 e3       	ldi	r24, 0x36	; 54
     994:	92 e0       	ldi	r25, 0x02	; 2
     996:	61 e4       	ldi	r22, 0x41	; 65
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	48 e0       	ldi	r20, 0x08	; 8
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	0e 94 77 09 	call	0x12ee	; 0x12ee <__eerd_block_m128>

	timer_cur = timer_init_val;
     9a2:	80 91 1b 02 	lds	r24, 0x021B
     9a6:	90 91 1c 02 	lds	r25, 0x021C
     9aa:	a0 91 1d 02 	lds	r26, 0x021D
     9ae:	b0 91 1e 02 	lds	r27, 0x021E
     9b2:	80 93 25 02 	sts	0x0225, r24
     9b6:	90 93 26 02 	sts	0x0226, r25
     9ba:	a0 93 27 02 	sts	0x0227, r26
     9be:	b0 93 28 02 	sts	0x0228, r27
	return 0;
}
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	08 95       	ret

000009c6 <CheckResset>:

//---------------------------------------------------------------

void CheckResset()
{
	if (!(BUTTONPIN & 0b00000001)){
     9c6:	c8 99       	sbic	0x19, 0	; 25
     9c8:	24 c0       	rjmp	.+72     	; 0xa12 <CheckResset+0x4c>
		char addrr;

		addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_ADMPASS;
		eeprom_write_block (adminpass, addrr, TEXTLEN);
     9ca:	8b ee       	ldi	r24, 0xEB	; 235
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	40 e1       	ldi	r20, 0x10	; 16
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	0e 94 8d 09 	call	0x131a	; 0x131a <__eewr_block_m128>

		addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STARTCODE;
		eeprom_write_block (startcode, addrr, TEXTLEN);
     9da:	8b ef       	ldi	r24, 0xFB	; 251
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	61 e1       	ldi	r22, 0x11	; 17
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	40 e1       	ldi	r20, 0x10	; 16
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	0e 94 8d 09 	call	0x131a	; 0x131a <__eewr_block_m128>

		addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STOPCODE;
		eeprom_write_block (stopcode, addrr, TEXTLEN);
     9ea:	8b e0       	ldi	r24, 0x0B	; 11
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	61 e2       	ldi	r22, 0x21	; 33
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	40 e1       	ldi	r20, 0x10	; 16
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	0e 94 8d 09 	call	0x131a	; 0x131a <__eewr_block_m128>

		addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_TIMER;
		eeprom_write_dword (addrr, timer_init_val);
     9fa:	40 91 1b 02 	lds	r20, 0x021B
     9fe:	50 91 1c 02 	lds	r21, 0x021C
     a02:	60 91 1d 02 	lds	r22, 0x021D
     a06:	70 91 1e 02 	lds	r23, 0x021E
     a0a:	81 e3       	ldi	r24, 0x31	; 49
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 a4 09 	call	0x1348	; 0x1348 <__eewr_dword_m128>
     a12:	08 95       	ret

00000a14 <main>:
//---------------------------------------------------------------


int main()
{
	Port_Init();
     a14:	0e 94 00 04 	call	0x800	; 0x800 <Port_Init>

	CheckResset();
     a18:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <CheckResset>

	GetSavedData();
     a1c:	0e 94 a5 04 	call	0x94a	; 0x94a <GetSavedData>
	LCD_Init();
     a20:	0e 94 24 05 	call	0xa48	; 0xa48 <LCD_Init>
	//LCDSendCommand(DISP_OFF);
	LCDSendCommand(DISP_ON);
     a24:	8c e0       	ldi	r24, 0x0C	; 12
     a26:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>

	LCDSendCommand(CLR_DISP);
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>

	while (1)
    {
    reset_ds1990();
     a30:	0e 94 40 01 	call	0x280	; 0x280 <reset_ds1990>
     a34:	fd cf       	rjmp	.-6      	; 0xa30 <main+0x1c>

00000a36 <E_Pulse>:

/*****************************L C D**************************/

void E_Pulse()
{
	LCDPORT = LCDPORT | 0b00000100;	//set E to high
     a36:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a38:	8f e9       	ldi	r24, 0x9F	; 159
     a3a:	9f e0       	ldi	r25, 0x0F	; 15
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <E_Pulse+0x6>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <E_Pulse+0xc>
     a42:	00 00       	nop
	_delay_ms(1) ;				//delay ~110ms
	LCDPORT = LCDPORT & 0b11111011;	//set E to low
     a44:	aa 98       	cbi	0x15, 2	; 21
}
     a46:	08 95       	ret

00000a48 <LCD_Init>:

void LCD_Init()
{
     a48:	1f 93       	push	r17
	//LCD initialization
	//step by step (from Gosho) - from DATASHEET

	LCDPORT = LCDPORT & 0b11111110;
     a4a:	a8 98       	cbi	0x15, 0	; 21
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	93 ec       	ldi	r25, 0xC3	; 195
     a50:	a9 e0       	ldi	r26, 0x09	; 9
     a52:	81 50       	subi	r24, 0x01	; 1
     a54:	90 40       	sbci	r25, 0x00	; 0
     a56:	a0 40       	sbci	r26, 0x00	; 0
     a58:	e1 f7       	brne	.-8      	; 0xa52 <LCD_Init+0xa>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <LCD_Init+0x14>
     a5c:	00 00       	nop
	
	_delay_ms(200);


	LCDPORT = 0b00110000;						//set D4, D5 port to 1
     a5e:	10 e3       	ldi	r17, 0x30	; 48
     a60:	15 bb       	out	0x15, r17	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a62:	90 e1       	ldi	r25, 0x10	; 16
     a64:	9a 95       	dec	r25
     a66:	f1 f7       	brne	.-4      	; 0xa64 <LCD_Init+0x1c>
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     a68:	0e 94 1b 05 	call	0xa36	; 0xa36 <E_Pulse>
     a6c:	a0 e1       	ldi	r26, 0x10	; 16
     a6e:	aa 95       	dec	r26
     a70:	f1 f7       	brne	.-4      	; 0xa6e <LCD_Init+0x26>
	PORTDELAY 

	LCDPORT = 0b00110000;						//set D4, D5 port to 1
     a72:	15 bb       	out	0x15, r17	; 21
     a74:	b0 e1       	ldi	r27, 0x10	; 16
     a76:	ba 95       	dec	r27
     a78:	f1 f7       	brne	.-4      	; 0xa76 <LCD_Init+0x2e>
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     a7a:	0e 94 1b 05 	call	0xa36	; 0xa36 <E_Pulse>
     a7e:	80 e1       	ldi	r24, 0x10	; 16
     a80:	8a 95       	dec	r24
     a82:	f1 f7       	brne	.-4      	; 0xa80 <LCD_Init+0x38>
	PORTDELAY

	LCDPORT = 0b00110000;						//set D4, D5 port to 1
     a84:	15 bb       	out	0x15, r17	; 21
     a86:	90 e1       	ldi	r25, 0x10	; 16
     a88:	9a 95       	dec	r25
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <LCD_Init+0x40>
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     a8c:	0e 94 1b 05 	call	0xa36	; 0xa36 <E_Pulse>
     a90:	a0 e1       	ldi	r26, 0x10	; 16
     a92:	aa 95       	dec	r26
     a94:	f1 f7       	brne	.-4      	; 0xa92 <LCD_Init+0x4a>
	PORTDELAY

	LCDPORT = 0b00100000;						//set D4 to 0, D5 port to 1
     a96:	80 e2       	ldi	r24, 0x20	; 32
     a98:	85 bb       	out	0x15, r24	; 21
     a9a:	b0 e1       	ldi	r27, 0x10	; 16
     a9c:	ba 95       	dec	r27
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <LCD_Init+0x54>
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     aa0:	0e 94 1b 05 	call	0xa36	; 0xa36 <E_Pulse>
}
     aa4:	1f 91       	pop	r17
     aa6:	08 95       	ret

00000aa8 <LCDSendCommand>:

void LCDSendCommand(unsigned char a)
{
     aa8:	df 93       	push	r29
     aaa:	cf 93       	push	r28
     aac:	0f 92       	push	r0
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
	unsigned char data = 0b00001111 | a;					//get high 4 bits
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     ab2:	25 b3       	in	r18, 0x15	; 21
	E_Pulse();								//high->low to E port (pulse)
}

void LCDSendCommand(unsigned char a)
{
	unsigned char data = 0b00001111 | a;					//get high 4 bits
     ab4:	98 2f       	mov	r25, r24
     ab6:	9f 60       	ori	r25, 0x0F	; 15
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     ab8:	20 6f       	ori	r18, 0xF0	; 240
     aba:	92 23       	and	r25, r18
     abc:	95 bb       	out	0x15, r25	; 21
     abe:	90 e1       	ldi	r25, 0x10	; 16
     ac0:	9a 95       	dec	r25
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <LCDSendCommand+0x18>
	PORTDELAY
	LCDPORT = LCDPORT & 0b11111110;				//set RS port to 0
     ac4:	a8 98       	cbi	0x15, 0	; 21
     ac6:	e0 e1       	ldi	r30, 0x10	; 16
     ac8:	ea 95       	dec	r30
     aca:	f1 f7       	brne	.-4      	; 0xac8 <LCDSendCommand+0x20>
	PORTDELAY
	E_Pulse(); 
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	0e 94 1b 05 	call	0xa36	; 0xa36 <E_Pulse>
     ad2:	ef ec       	ldi	r30, 0xCF	; 207
     ad4:	f7 e0       	ldi	r31, 0x07	; 7
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <LCDSendCommand+0x2e>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <LCDSendCommand+0x34>
     adc:	00 00       	nop
	
	_delay_us(500);                             //pulse to set D4-D7 bits

	data = a<<4;							//get low 4 bits
	LCDPORT = (LCDPORT & 0b00001111) | data;	//set D4-D7
     ade:	95 b3       	in	r25, 0x15	; 21
	PORTDELAY
	E_Pulse(); 
	
	_delay_us(500);                             //pulse to set D4-D7 bits

	data = a<<4;							//get low 4 bits
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	82 95       	swap	r24
     ae4:	80 7f       	andi	r24, 0xF0	; 240
	LCDPORT = (LCDPORT & 0b00001111) | data;	//set D4-D7
     ae6:	9f 70       	andi	r25, 0x0F	; 15
     ae8:	89 2b       	or	r24, r25
     aea:	85 bb       	out	0x15, r24	; 21
     aec:	f0 e1       	ldi	r31, 0x10	; 16
     aee:	fa 95       	dec	r31
     af0:	f1 f7       	brne	.-4      	; 0xaee <LCDSendCommand+0x46>
	PORTDELAY
	LCDPORT = LCDPORT & 0b11111110;				//set RS port to 0 -> display set to command mode
     af2:	a8 98       	cbi	0x15, 0	; 21
     af4:	80 e1       	ldi	r24, 0x10	; 16
     af6:	8a 95       	dec	r24
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <LCDSendCommand+0x4e>
	PORTDELAY
	E_Pulse();                              //pulse to set d4-d7 bits
     afa:	0e 94 1b 05 	call	0xa36	; 0xa36 <E_Pulse>
     afe:	ef ec       	ldi	r30, 0xCF	; 207
     b00:	f7 e0       	ldi	r31, 0x07	; 7
     b02:	31 97       	sbiw	r30, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <LCDSendCommand+0x5a>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <LCDSendCommand+0x60>
     b08:	00 00       	nop

	_delay_us(500);

}
     b0a:	0f 90       	pop	r0
     b0c:	cf 91       	pop	r28
     b0e:	df 91       	pop	r29
     b10:	08 95       	ret

00000b12 <LCDSendChar>:

void LCDSendChar(unsigned char a)
{
     b12:	df 93       	push	r29
     b14:	cf 93       	push	r28
     b16:	0f 92       	push	r0
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
	unsigned char data = 0b00001111 | a;					//get high 4 bits
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     b1c:	25 b3       	in	r18, 0x15	; 21

}

void LCDSendChar(unsigned char a)
{
	unsigned char data = 0b00001111 | a;					//get high 4 bits
     b1e:	98 2f       	mov	r25, r24
     b20:	9f 60       	ori	r25, 0x0F	; 15
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     b22:	20 6f       	ori	r18, 0xF0	; 240
     b24:	92 23       	and	r25, r18
     b26:	95 bb       	out	0x15, r25	; 21
     b28:	90 e1       	ldi	r25, 0x10	; 16
     b2a:	9a 95       	dec	r25
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <LCDSendChar+0x18>
	PORTDELAY
	LCDPORT = LCDPORT | 0b00000001;				//set RS port to 1
     b2e:	a8 9a       	sbi	0x15, 0	; 21
     b30:	e0 e1       	ldi	r30, 0x10	; 16
     b32:	ea 95       	dec	r30
     b34:	f1 f7       	brne	.-4      	; 0xb32 <LCDSendChar+0x20>
	PORTDELAY
	E_Pulse();                              //pulse to set D4-D7 bits
     b36:	89 83       	std	Y+1, r24	; 0x01
     b38:	0e 94 1b 05 	call	0xa36	; 0xa36 <E_Pulse>
     b3c:	ef ec       	ldi	r30, 0xCF	; 207
     b3e:	f7 e0       	ldi	r31, 0x07	; 7
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <LCDSendChar+0x2e>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <LCDSendChar+0x34>
     b46:	00 00       	nop

	_delay_us(500);

	data = a<<4;							//get low 4 bits
	LCDPORT = (LCDPORT & 0b00001111) | data;	//clear D4-D7
     b48:	95 b3       	in	r25, 0x15	; 21
	PORTDELAY
	E_Pulse();                              //pulse to set D4-D7 bits

	_delay_us(500);

	data = a<<4;							//get low 4 bits
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	82 95       	swap	r24
     b4e:	80 7f       	andi	r24, 0xF0	; 240
	LCDPORT = (LCDPORT & 0b00001111) | data;	//clear D4-D7
     b50:	9f 70       	andi	r25, 0x0F	; 15
     b52:	89 2b       	or	r24, r25
     b54:	85 bb       	out	0x15, r24	; 21
     b56:	f0 e1       	ldi	r31, 0x10	; 16
     b58:	fa 95       	dec	r31
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <LCDSendChar+0x46>
	PORTDELAY
	LCDPORT = LCDPORT | 0b00000001;				//set RS port to 1 -> display set to command mode
     b5c:	a8 9a       	sbi	0x15, 0	; 21
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	8a 95       	dec	r24
     b62:	f1 f7       	brne	.-4      	; 0xb60 <LCDSendChar+0x4e>
	PORTDELAY
	E_Pulse();                              //pulse to set d4-d7 bits
     b64:	0e 94 1b 05 	call	0xa36	; 0xa36 <E_Pulse>
     b68:	ef ec       	ldi	r30, 0xCF	; 207
     b6a:	f7 e0       	ldi	r31, 0x07	; 7
     b6c:	31 97       	sbiw	r30, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <LCDSendChar+0x5a>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <LCDSendChar+0x60>
     b72:	00 00       	nop

	_delay_us(500);
}
     b74:	0f 90       	pop	r0
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <LCDSendTxt>:

void LCDSendTxt(char* a)
{
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	f8 2e       	mov	r15, r24

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < strlen(a); Temp++)
     b92:	0f 2d       	mov	r16, r15
     b94:	19 2f       	mov	r17, r25
     b96:	cc 24       	eor	r12, r12
     b98:	dd 24       	eor	r13, r13
     b9a:	0d c0       	rjmp	.+26     	; 0xbb6 <LCDSendTxt+0x3a>
  {
    LCDSendChar(a[Temp]);
     b9c:	f8 01       	movw	r30, r16
     b9e:	81 91       	ld	r24, Z+
     ba0:	8f 01       	movw	r16, r30
     ba2:	99 83       	std	Y+1, r25	; 0x01
     ba4:	0e 94 89 05 	call	0xb12	; 0xb12 <LCDSendChar>
     ba8:	f0 e1       	ldi	r31, 0x10	; 16
     baa:	fa 95       	dec	r31
     bac:	f1 f7       	brne	.-4      	; 0xbaa <LCDSendTxt+0x2e>
{

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < strlen(a); Temp++)
     bae:	08 94       	sec
     bb0:	c1 1c       	adc	r12, r1
     bb2:	d1 1c       	adc	r13, r1
     bb4:	99 81       	ldd	r25, Y+1	; 0x01
     bb6:	af 2d       	mov	r26, r15
     bb8:	b9 2f       	mov	r27, r25
     bba:	fd 01       	movw	r30, r26
     bbc:	01 90       	ld	r0, Z+
     bbe:	00 20       	and	r0, r0
     bc0:	e9 f7       	brne	.-6      	; 0xbbc <LCDSendTxt+0x40>
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	ea 1b       	sub	r30, r26
     bc6:	fb 0b       	sbc	r31, r27
     bc8:	ce 16       	cp	r12, r30
     bca:	df 06       	cpc	r13, r31
     bcc:	38 f3       	brcs	.-50     	; 0xb9c <LCDSendTxt+0x20>
  {
    LCDSendChar(a[Temp]);
	TEXTDELAY
  }
}
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	df 90       	pop	r13
     bdc:	cf 90       	pop	r12
     bde:	08 95       	ret

00000be0 <LCDSendUnsafeCounteredTxt>:

void LCDSendUnsafeCounteredTxt(char* a, char count)
{
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < count; Temp++)
     bec:	08 2f       	mov	r16, r24
     bee:	19 2f       	mov	r17, r25
     bf0:	c0 e0       	ldi	r28, 0x00	; 0
     bf2:	d0 e0       	ldi	r29, 0x00	; 0
     bf4:	e6 2e       	mov	r14, r22
     bf6:	ff 24       	eor	r15, r15
     bf8:	09 c0       	rjmp	.+18     	; 0xc0c <LCDSendUnsafeCounteredTxt+0x2c>
  {
    LCDSendChar(a[Temp]);
     bfa:	f8 01       	movw	r30, r16
     bfc:	81 91       	ld	r24, Z+
     bfe:	8f 01       	movw	r16, r30
     c00:	0e 94 89 05 	call	0xb12	; 0xb12 <LCDSendChar>
     c04:	f0 e1       	ldi	r31, 0x10	; 16
     c06:	fa 95       	dec	r31
     c08:	f1 f7       	brne	.-4      	; 0xc06 <LCDSendUnsafeCounteredTxt+0x26>
{

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < count; Temp++)
     c0a:	21 96       	adiw	r28, 0x01	; 1
     c0c:	ce 15       	cp	r28, r14
     c0e:	df 05       	cpc	r29, r15
     c10:	a4 f3       	brlt	.-24     	; 0xbfa <LCDSendUnsafeCounteredTxt+0x1a>
  {
    LCDSendChar(a[Temp]);
	TEXTDELAY
  }
}
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	08 95       	ret

00000c20 <LCDSendInt>:


void LCDSendInt(long a)
{
     c20:	4f 92       	push	r4
     c22:	5f 92       	push	r5
     c24:	6f 92       	push	r6
     c26:	7f 92       	push	r7
     c28:	8f 92       	push	r8
     c2a:	9f 92       	push	r9
     c2c:	af 92       	push	r10
     c2e:	bf 92       	push	r11
     c30:	cf 92       	push	r12
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	1f 93       	push	r17
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	a8 97       	sbiw	r28, 0x28	; 40
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	6b 01       	movw	r12, r22
     c50:	7c 01       	movw	r14, r24
	int C[20];
	unsigned char Temp=0, NumLen = 0;
	if (a < 0)
     c52:	97 ff       	sbrs	r25, 7
     c54:	0b c0       	rjmp	.+22     	; 0xc6c <LCDSendInt+0x4c>
	{
		LCDSendChar('-');
     c56:	8d e2       	ldi	r24, 0x2D	; 45
     c58:	0e 94 89 05 	call	0xb12	; 0xb12 <LCDSendChar>
		a = -a;
     c5c:	f0 94       	com	r15
     c5e:	e0 94       	com	r14
     c60:	d0 94       	com	r13
     c62:	c0 94       	com	r12
     c64:	c1 1c       	adc	r12, r1
     c66:	d1 1c       	adc	r13, r1
     c68:	e1 1c       	adc	r14, r1
     c6a:	f1 1c       	adc	r15, r1
  }
}


void LCDSendInt(long a)
{
     c6c:	10 e0       	ldi	r17, 0x00	; 0
		a = -a;
	}
	do
	{	
		Temp++;
		C[Temp] = a % 10;
     c6e:	2e 01       	movw	r4, r28
     c70:	08 94       	sec
     c72:	41 1c       	adc	r4, r1
     c74:	51 1c       	adc	r5, r1
     c76:	2a e0       	ldi	r18, 0x0A	; 10
     c78:	62 2e       	mov	r6, r18
     c7a:	71 2c       	mov	r7, r1
     c7c:	81 2c       	mov	r8, r1
     c7e:	91 2c       	mov	r9, r1
		LCDSendChar('-');
		a = -a;
	}
	do
	{	
		Temp++;
     c80:	1f 5f       	subi	r17, 0xFF	; 255
		C[Temp] = a % 10;
     c82:	a1 2e       	mov	r10, r17
     c84:	bb 24       	eor	r11, r11
     c86:	aa 0c       	add	r10, r10
     c88:	bb 1c       	adc	r11, r11
     c8a:	a4 0c       	add	r10, r4
     c8c:	b5 1c       	adc	r11, r5
     c8e:	c7 01       	movw	r24, r14
     c90:	b6 01       	movw	r22, r12
     c92:	a4 01       	movw	r20, r8
     c94:	93 01       	movw	r18, r6
     c96:	0e 94 c0 06 	call	0xd80	; 0xd80 <__divmodsi4>
     c9a:	f5 01       	movw	r30, r10
     c9c:	71 83       	std	Z+1, r23	; 0x01
     c9e:	60 83       	st	Z, r22
		a = a/10;
     ca0:	69 01       	movw	r12, r18
     ca2:	7a 01       	movw	r14, r20
	}
	while (a);
     ca4:	c1 14       	cp	r12, r1
     ca6:	d1 04       	cpc	r13, r1
     ca8:	e1 04       	cpc	r14, r1
     caa:	f1 04       	cpc	r15, r1
     cac:	49 f7       	brne	.-46     	; 0xc80 <LCDSendInt+0x60>
     cae:	0c c0       	rjmp	.+24     	; 0xcc8 <LCDSendInt+0xa8>
	NumLen = Temp;
	for (Temp = NumLen; Temp>0; Temp--) LCDSendChar(C[Temp] + 48);
     cb0:	e1 2f       	mov	r30, r17
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	ec 0d       	add	r30, r12
     cba:	fd 1d       	adc	r31, r13
     cbc:	80 81       	ld	r24, Z
     cbe:	80 5d       	subi	r24, 0xD0	; 208
     cc0:	0e 94 89 05 	call	0xb12	; 0xb12 <LCDSendChar>
     cc4:	11 50       	subi	r17, 0x01	; 1
     cc6:	04 c0       	rjmp	.+8      	; 0xcd0 <LCDSendInt+0xb0>
     cc8:	6e 01       	movw	r12, r28
     cca:	08 94       	sec
     ccc:	c1 1c       	adc	r12, r1
     cce:	d1 1c       	adc	r13, r1
     cd0:	11 23       	and	r17, r17
     cd2:	71 f7       	brne	.-36     	; 0xcb0 <LCDSendInt+0x90>
}
     cd4:	a8 96       	adiw	r28, 0x28	; 40
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	1f 91       	pop	r17
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	bf 90       	pop	r11
     cf0:	af 90       	pop	r10
     cf2:	9f 90       	pop	r9
     cf4:	8f 90       	pop	r8
     cf6:	7f 90       	pop	r7
     cf8:	6f 90       	pop	r6
     cfa:	5f 90       	pop	r5
     cfc:	4f 90       	pop	r4
     cfe:	08 95       	ret

00000d00 <LCDSendInt_Old>:

void LCDSendInt_Old(int a)
{
     d00:	1f 93       	push	r17
  int h = 0;
  int l = 0;

  l = a%10;
  h = a/10;
     d02:	6a e0       	ldi	r22, 0x0A	; 10
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__divmodhi4>
     d0a:	18 2f       	mov	r17, r24

  LCDSendChar(h+48);
     d0c:	86 2f       	mov	r24, r22
     d0e:	80 5d       	subi	r24, 0xD0	; 208
     d10:	0e 94 89 05 	call	0xb12	; 0xb12 <LCDSendChar>
  LCDSendChar(l+48);
     d14:	81 2f       	mov	r24, r17
     d16:	80 5d       	subi	r24, 0xD0	; 208
     d18:	0e 94 89 05 	call	0xb12	; 0xb12 <LCDSendChar>
}
     d1c:	1f 91       	pop	r17
     d1e:	08 95       	ret

00000d20 <SmartUp>:

void SmartUp(void)
{
	int Temp;
	for(Temp=0; Temp<1; Temp++) LCDSendCommand(CUR_UP);
     d20:	80 e8       	ldi	r24, 0x80	; 128
     d22:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
}
     d26:	08 95       	ret

00000d28 <SmartDown>:

void SmartDown(void)
{
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	c8 e2       	ldi	r28, 0x28	; 40
     d2e:	d0 e0       	ldi	r29, 0x00	; 0
	int Temp;
	for(Temp=0; Temp<40; Temp++) LCDSendCommand(CUR_DOWN);
     d30:	80 ec       	ldi	r24, 0xC0	; 192
     d32:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCDSendCommand>
     d36:	21 97       	sbiw	r28, 0x01	; 1
     d38:	d9 f7       	brne	.-10     	; 0xd30 <SmartDown+0x8>
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	08 95       	ret

00000d40 <Light>:

void Light(short a)
{
  if(a == 1)
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	91 05       	cpc	r25, r1
     d44:	29 f4       	brne	.+10     	; 0xd50 <Light+0x10>
  {
	LCDPORT = LCDPORT | 0b00100000;
     d46:	ad 9a       	sbi	0x15, 5	; 21
	DDRC = LCDPORT | 0b00100000;
     d48:	85 b3       	in	r24, 0x15	; 21
     d4a:	80 62       	ori	r24, 0x20	; 32
     d4c:	84 bb       	out	0x14, r24	; 20
     d4e:	08 95       	ret

    //IO0SET_bit.P0_25 = 1;
    //IO0DIR_bit.P0_25 = 1;
  }
  if(a == 0)
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	11 f4       	brne	.+4      	; 0xd58 <Light+0x18>
  {
    LCDPORT = LCDPORT & 0b11011111;
     d54:	ad 98       	cbi	0x15, 5	; 21
    DDRC = DDRC & 0b11011111;
     d56:	a5 98       	cbi	0x14, 5	; 20
     d58:	08 95       	ret

00000d5a <__divmodhi4>:
     d5a:	97 fb       	bst	r25, 7
     d5c:	09 2e       	mov	r0, r25
     d5e:	07 26       	eor	r0, r23
     d60:	0a d0       	rcall	.+20     	; 0xd76 <__divmodhi4_neg1>
     d62:	77 fd       	sbrc	r23, 7
     d64:	04 d0       	rcall	.+8      	; 0xd6e <__divmodhi4_neg2>
     d66:	27 d0       	rcall	.+78     	; 0xdb6 <__udivmodhi4>
     d68:	06 d0       	rcall	.+12     	; 0xd76 <__divmodhi4_neg1>
     d6a:	00 20       	and	r0, r0
     d6c:	1a f4       	brpl	.+6      	; 0xd74 <__divmodhi4_exit>

00000d6e <__divmodhi4_neg2>:
     d6e:	70 95       	com	r23
     d70:	61 95       	neg	r22
     d72:	7f 4f       	sbci	r23, 0xFF	; 255

00000d74 <__divmodhi4_exit>:
     d74:	08 95       	ret

00000d76 <__divmodhi4_neg1>:
     d76:	f6 f7       	brtc	.-4      	; 0xd74 <__divmodhi4_exit>
     d78:	90 95       	com	r25
     d7a:	81 95       	neg	r24
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	08 95       	ret

00000d80 <__divmodsi4>:
     d80:	97 fb       	bst	r25, 7
     d82:	09 2e       	mov	r0, r25
     d84:	05 26       	eor	r0, r21
     d86:	0e d0       	rcall	.+28     	; 0xda4 <__divmodsi4_neg1>
     d88:	57 fd       	sbrc	r21, 7
     d8a:	04 d0       	rcall	.+8      	; 0xd94 <__divmodsi4_neg2>
     d8c:	28 d0       	rcall	.+80     	; 0xdde <__udivmodsi4>
     d8e:	0a d0       	rcall	.+20     	; 0xda4 <__divmodsi4_neg1>
     d90:	00 1c       	adc	r0, r0
     d92:	38 f4       	brcc	.+14     	; 0xda2 <__divmodsi4_exit>

00000d94 <__divmodsi4_neg2>:
     d94:	50 95       	com	r21
     d96:	40 95       	com	r20
     d98:	30 95       	com	r19
     d9a:	21 95       	neg	r18
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
     d9e:	4f 4f       	sbci	r20, 0xFF	; 255
     da0:	5f 4f       	sbci	r21, 0xFF	; 255

00000da2 <__divmodsi4_exit>:
     da2:	08 95       	ret

00000da4 <__divmodsi4_neg1>:
     da4:	f6 f7       	brtc	.-4      	; 0xda2 <__divmodsi4_exit>
     da6:	90 95       	com	r25
     da8:	80 95       	com	r24
     daa:	70 95       	com	r23
     dac:	61 95       	neg	r22
     dae:	7f 4f       	sbci	r23, 0xFF	; 255
     db0:	8f 4f       	sbci	r24, 0xFF	; 255
     db2:	9f 4f       	sbci	r25, 0xFF	; 255
     db4:	08 95       	ret

00000db6 <__udivmodhi4>:
     db6:	aa 1b       	sub	r26, r26
     db8:	bb 1b       	sub	r27, r27
     dba:	51 e1       	ldi	r21, 0x11	; 17
     dbc:	07 c0       	rjmp	.+14     	; 0xdcc <__udivmodhi4_ep>

00000dbe <__udivmodhi4_loop>:
     dbe:	aa 1f       	adc	r26, r26
     dc0:	bb 1f       	adc	r27, r27
     dc2:	a6 17       	cp	r26, r22
     dc4:	b7 07       	cpc	r27, r23
     dc6:	10 f0       	brcs	.+4      	; 0xdcc <__udivmodhi4_ep>
     dc8:	a6 1b       	sub	r26, r22
     dca:	b7 0b       	sbc	r27, r23

00000dcc <__udivmodhi4_ep>:
     dcc:	88 1f       	adc	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	5a 95       	dec	r21
     dd2:	a9 f7       	brne	.-22     	; 0xdbe <__udivmodhi4_loop>
     dd4:	80 95       	com	r24
     dd6:	90 95       	com	r25
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	08 95       	ret

00000dde <__udivmodsi4>:
     dde:	a1 e2       	ldi	r26, 0x21	; 33
     de0:	1a 2e       	mov	r1, r26
     de2:	aa 1b       	sub	r26, r26
     de4:	bb 1b       	sub	r27, r27
     de6:	fd 01       	movw	r30, r26
     de8:	0d c0       	rjmp	.+26     	; 0xe04 <__udivmodsi4_ep>

00000dea <__udivmodsi4_loop>:
     dea:	aa 1f       	adc	r26, r26
     dec:	bb 1f       	adc	r27, r27
     dee:	ee 1f       	adc	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	a2 17       	cp	r26, r18
     df4:	b3 07       	cpc	r27, r19
     df6:	e4 07       	cpc	r30, r20
     df8:	f5 07       	cpc	r31, r21
     dfa:	20 f0       	brcs	.+8      	; 0xe04 <__udivmodsi4_ep>
     dfc:	a2 1b       	sub	r26, r18
     dfe:	b3 0b       	sbc	r27, r19
     e00:	e4 0b       	sbc	r30, r20
     e02:	f5 0b       	sbc	r31, r21

00000e04 <__udivmodsi4_ep>:
     e04:	66 1f       	adc	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	88 1f       	adc	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	1a 94       	dec	r1
     e0e:	69 f7       	brne	.-38     	; 0xdea <__udivmodsi4_loop>
     e10:	60 95       	com	r22
     e12:	70 95       	com	r23
     e14:	80 95       	com	r24
     e16:	90 95       	com	r25
     e18:	9b 01       	movw	r18, r22
     e1a:	ac 01       	movw	r20, r24
     e1c:	bd 01       	movw	r22, r26
     e1e:	cf 01       	movw	r24, r30
     e20:	08 95       	ret

00000e22 <atoi>:
     e22:	fc 01       	movw	r30, r24
     e24:	88 27       	eor	r24, r24
     e26:	99 27       	eor	r25, r25
     e28:	e8 94       	clt
     e2a:	21 91       	ld	r18, Z+
     e2c:	20 32       	cpi	r18, 0x20	; 32
     e2e:	e9 f3       	breq	.-6      	; 0xe2a <atoi+0x8>
     e30:	29 30       	cpi	r18, 0x09	; 9
     e32:	10 f0       	brcs	.+4      	; 0xe38 <atoi+0x16>
     e34:	2e 30       	cpi	r18, 0x0E	; 14
     e36:	c8 f3       	brcs	.-14     	; 0xe2a <atoi+0x8>
     e38:	2b 32       	cpi	r18, 0x2B	; 43
     e3a:	41 f0       	breq	.+16     	; 0xe4c <atoi+0x2a>
     e3c:	2d 32       	cpi	r18, 0x2D	; 45
     e3e:	39 f4       	brne	.+14     	; 0xe4e <atoi+0x2c>
     e40:	68 94       	set
     e42:	04 c0       	rjmp	.+8      	; 0xe4c <atoi+0x2a>
     e44:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__mulhi_const_10>
     e48:	82 0f       	add	r24, r18
     e4a:	91 1d       	adc	r25, r1
     e4c:	21 91       	ld	r18, Z+
     e4e:	20 53       	subi	r18, 0x30	; 48
     e50:	2a 30       	cpi	r18, 0x0A	; 10
     e52:	c0 f3       	brcs	.-16     	; 0xe44 <atoi+0x22>
     e54:	1e f4       	brtc	.+6      	; 0xe5c <atoi+0x3a>
     e56:	90 95       	com	r25
     e58:	81 95       	neg	r24
     e5a:	9f 4f       	sbci	r25, 0xFF	; 255
     e5c:	08 95       	ret

00000e5e <__mulhi_const_10>:
     e5e:	7a e0       	ldi	r23, 0x0A	; 10
     e60:	97 9f       	mul	r25, r23
     e62:	90 2d       	mov	r25, r0
     e64:	87 9f       	mul	r24, r23
     e66:	80 2d       	mov	r24, r0
     e68:	91 0d       	add	r25, r1
     e6a:	11 24       	eor	r1, r1
     e6c:	08 95       	ret

00000e6e <sprintf>:
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	2e 97       	sbiw	r28, 0x0e	; 14
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	0d 89       	ldd	r16, Y+21	; 0x15
     e88:	1e 89       	ldd	r17, Y+22	; 0x16
     e8a:	86 e0       	ldi	r24, 0x06	; 6
     e8c:	8c 83       	std	Y+4, r24	; 0x04
     e8e:	1a 83       	std	Y+2, r17	; 0x02
     e90:	09 83       	std	Y+1, r16	; 0x01
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	9f e7       	ldi	r25, 0x7F	; 127
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
     e9a:	9e 01       	movw	r18, r28
     e9c:	27 5e       	subi	r18, 0xE7	; 231
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	ce 01       	movw	r24, r28
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	6f 89       	ldd	r22, Y+23	; 0x17
     ea6:	78 8d       	ldd	r23, Y+24	; 0x18
     ea8:	a9 01       	movw	r20, r18
     eaa:	0e 94 67 07 	call	0xece	; 0xece <vfprintf>
     eae:	ef 81       	ldd	r30, Y+7	; 0x07
     eb0:	f8 85       	ldd	r31, Y+8	; 0x08
     eb2:	e0 0f       	add	r30, r16
     eb4:	f1 1f       	adc	r31, r17
     eb6:	10 82       	st	Z, r1
     eb8:	2e 96       	adiw	r28, 0x0e	; 14
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	08 95       	ret

00000ece <vfprintf>:
     ece:	2f 92       	push	r2
     ed0:	3f 92       	push	r3
     ed2:	4f 92       	push	r4
     ed4:	5f 92       	push	r5
     ed6:	6f 92       	push	r6
     ed8:	7f 92       	push	r7
     eda:	8f 92       	push	r8
     edc:	9f 92       	push	r9
     ede:	af 92       	push	r10
     ee0:	bf 92       	push	r11
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	2c 97       	sbiw	r28, 0x0c	; 12
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	6c 01       	movw	r12, r24
     f04:	1b 01       	movw	r2, r22
     f06:	8a 01       	movw	r16, r20
     f08:	fc 01       	movw	r30, r24
     f0a:	17 82       	std	Z+7, r1	; 0x07
     f0c:	16 82       	std	Z+6, r1	; 0x06
     f0e:	83 81       	ldd	r24, Z+3	; 0x03
     f10:	81 ff       	sbrs	r24, 1
     f12:	d1 c1       	rjmp	.+930    	; 0x12b6 <__stack+0x1b7>
     f14:	2e 01       	movw	r4, r28
     f16:	08 94       	sec
     f18:	41 1c       	adc	r4, r1
     f1a:	51 1c       	adc	r5, r1
     f1c:	f6 01       	movw	r30, r12
     f1e:	93 81       	ldd	r25, Z+3	; 0x03
     f20:	f1 01       	movw	r30, r2
     f22:	93 fd       	sbrc	r25, 3
     f24:	85 91       	lpm	r24, Z+
     f26:	93 ff       	sbrs	r25, 3
     f28:	81 91       	ld	r24, Z+
     f2a:	1f 01       	movw	r2, r30
     f2c:	88 23       	and	r24, r24
     f2e:	09 f4       	brne	.+2      	; 0xf32 <vfprintf+0x64>
     f30:	be c1       	rjmp	.+892    	; 0x12ae <__stack+0x1af>
     f32:	85 32       	cpi	r24, 0x25	; 37
     f34:	39 f4       	brne	.+14     	; 0xf44 <vfprintf+0x76>
     f36:	93 fd       	sbrc	r25, 3
     f38:	85 91       	lpm	r24, Z+
     f3a:	93 ff       	sbrs	r25, 3
     f3c:	81 91       	ld	r24, Z+
     f3e:	1f 01       	movw	r2, r30
     f40:	85 32       	cpi	r24, 0x25	; 37
     f42:	29 f4       	brne	.+10     	; 0xf4e <vfprintf+0x80>
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	b6 01       	movw	r22, r12
     f48:	0e 94 c7 09 	call	0x138e	; 0x138e <fputc>
     f4c:	e7 cf       	rjmp	.-50     	; 0xf1c <vfprintf+0x4e>
     f4e:	ee 24       	eor	r14, r14
     f50:	ff 24       	eor	r15, r15
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	20 32       	cpi	r18, 0x20	; 32
     f56:	b0 f4       	brcc	.+44     	; 0xf84 <vfprintf+0xb6>
     f58:	8b 32       	cpi	r24, 0x2B	; 43
     f5a:	69 f0       	breq	.+26     	; 0xf76 <vfprintf+0xa8>
     f5c:	8c 32       	cpi	r24, 0x2C	; 44
     f5e:	28 f4       	brcc	.+10     	; 0xf6a <vfprintf+0x9c>
     f60:	80 32       	cpi	r24, 0x20	; 32
     f62:	51 f0       	breq	.+20     	; 0xf78 <vfprintf+0xaa>
     f64:	83 32       	cpi	r24, 0x23	; 35
     f66:	71 f4       	brne	.+28     	; 0xf84 <vfprintf+0xb6>
     f68:	0b c0       	rjmp	.+22     	; 0xf80 <vfprintf+0xb2>
     f6a:	8d 32       	cpi	r24, 0x2D	; 45
     f6c:	39 f0       	breq	.+14     	; 0xf7c <vfprintf+0xae>
     f6e:	80 33       	cpi	r24, 0x30	; 48
     f70:	49 f4       	brne	.+18     	; 0xf84 <vfprintf+0xb6>
     f72:	21 60       	ori	r18, 0x01	; 1
     f74:	2c c0       	rjmp	.+88     	; 0xfce <vfprintf+0x100>
     f76:	22 60       	ori	r18, 0x02	; 2
     f78:	24 60       	ori	r18, 0x04	; 4
     f7a:	29 c0       	rjmp	.+82     	; 0xfce <vfprintf+0x100>
     f7c:	28 60       	ori	r18, 0x08	; 8
     f7e:	27 c0       	rjmp	.+78     	; 0xfce <vfprintf+0x100>
     f80:	20 61       	ori	r18, 0x10	; 16
     f82:	25 c0       	rjmp	.+74     	; 0xfce <vfprintf+0x100>
     f84:	27 fd       	sbrc	r18, 7
     f86:	2c c0       	rjmp	.+88     	; 0xfe0 <vfprintf+0x112>
     f88:	38 2f       	mov	r19, r24
     f8a:	30 53       	subi	r19, 0x30	; 48
     f8c:	3a 30       	cpi	r19, 0x0A	; 10
     f8e:	98 f4       	brcc	.+38     	; 0xfb6 <vfprintf+0xe8>
     f90:	26 ff       	sbrs	r18, 6
     f92:	08 c0       	rjmp	.+16     	; 0xfa4 <vfprintf+0xd6>
     f94:	8e 2d       	mov	r24, r14
     f96:	88 0f       	add	r24, r24
     f98:	e8 2e       	mov	r14, r24
     f9a:	ee 0c       	add	r14, r14
     f9c:	ee 0c       	add	r14, r14
     f9e:	e8 0e       	add	r14, r24
     fa0:	e3 0e       	add	r14, r19
     fa2:	15 c0       	rjmp	.+42     	; 0xfce <vfprintf+0x100>
     fa4:	8f 2d       	mov	r24, r15
     fa6:	88 0f       	add	r24, r24
     fa8:	f8 2e       	mov	r15, r24
     faa:	ff 0c       	add	r15, r15
     fac:	ff 0c       	add	r15, r15
     fae:	f8 0e       	add	r15, r24
     fb0:	f3 0e       	add	r15, r19
     fb2:	20 62       	ori	r18, 0x20	; 32
     fb4:	0c c0       	rjmp	.+24     	; 0xfce <vfprintf+0x100>
     fb6:	8e 32       	cpi	r24, 0x2E	; 46
     fb8:	21 f4       	brne	.+8      	; 0xfc2 <vfprintf+0xf4>
     fba:	26 fd       	sbrc	r18, 6
     fbc:	78 c1       	rjmp	.+752    	; 0x12ae <__stack+0x1af>
     fbe:	20 64       	ori	r18, 0x40	; 64
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <vfprintf+0x100>
     fc2:	8c 36       	cpi	r24, 0x6C	; 108
     fc4:	11 f4       	brne	.+4      	; 0xfca <vfprintf+0xfc>
     fc6:	20 68       	ori	r18, 0x80	; 128
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <vfprintf+0x100>
     fca:	88 36       	cpi	r24, 0x68	; 104
     fcc:	49 f4       	brne	.+18     	; 0xfe0 <vfprintf+0x112>
     fce:	f1 01       	movw	r30, r2
     fd0:	93 fd       	sbrc	r25, 3
     fd2:	85 91       	lpm	r24, Z+
     fd4:	93 ff       	sbrs	r25, 3
     fd6:	81 91       	ld	r24, Z+
     fd8:	1f 01       	movw	r2, r30
     fda:	88 23       	and	r24, r24
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <vfprintf+0x112>
     fde:	ba cf       	rjmp	.-140    	; 0xf54 <vfprintf+0x86>
     fe0:	98 2f       	mov	r25, r24
     fe2:	95 54       	subi	r25, 0x45	; 69
     fe4:	93 30       	cpi	r25, 0x03	; 3
     fe6:	18 f0       	brcs	.+6      	; 0xfee <vfprintf+0x120>
     fe8:	90 52       	subi	r25, 0x20	; 32
     fea:	93 30       	cpi	r25, 0x03	; 3
     fec:	28 f4       	brcc	.+10     	; 0xff8 <vfprintf+0x12a>
     fee:	0c 5f       	subi	r16, 0xFC	; 252
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
     ff2:	ff e3       	ldi	r31, 0x3F	; 63
     ff4:	f9 83       	std	Y+1, r31	; 0x01
     ff6:	0d c0       	rjmp	.+26     	; 0x1012 <vfprintf+0x144>
     ff8:	83 36       	cpi	r24, 0x63	; 99
     ffa:	31 f0       	breq	.+12     	; 0x1008 <vfprintf+0x13a>
     ffc:	83 37       	cpi	r24, 0x73	; 115
     ffe:	71 f0       	breq	.+28     	; 0x101c <vfprintf+0x14e>
    1000:	83 35       	cpi	r24, 0x53	; 83
    1002:	09 f0       	breq	.+2      	; 0x1006 <vfprintf+0x138>
    1004:	60 c0       	rjmp	.+192    	; 0x10c6 <vfprintf+0x1f8>
    1006:	22 c0       	rjmp	.+68     	; 0x104c <vfprintf+0x17e>
    1008:	f8 01       	movw	r30, r16
    100a:	80 81       	ld	r24, Z
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	0e 5f       	subi	r16, 0xFE	; 254
    1010:	1f 4f       	sbci	r17, 0xFF	; 255
    1012:	42 01       	movw	r8, r4
    1014:	71 e0       	ldi	r23, 0x01	; 1
    1016:	a7 2e       	mov	r10, r23
    1018:	b1 2c       	mov	r11, r1
    101a:	16 c0       	rjmp	.+44     	; 0x1048 <vfprintf+0x17a>
    101c:	62 e0       	ldi	r22, 0x02	; 2
    101e:	66 2e       	mov	r6, r22
    1020:	71 2c       	mov	r7, r1
    1022:	60 0e       	add	r6, r16
    1024:	71 1e       	adc	r7, r17
    1026:	f8 01       	movw	r30, r16
    1028:	80 80       	ld	r8, Z
    102a:	91 80       	ldd	r9, Z+1	; 0x01
    102c:	26 ff       	sbrs	r18, 6
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <vfprintf+0x168>
    1030:	6e 2d       	mov	r22, r14
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	02 c0       	rjmp	.+4      	; 0x103a <vfprintf+0x16c>
    1036:	6f ef       	ldi	r22, 0xFF	; 255
    1038:	7f ef       	ldi	r23, 0xFF	; 255
    103a:	c4 01       	movw	r24, r8
    103c:	2c 87       	std	Y+12, r18	; 0x0c
    103e:	0e 94 bc 09 	call	0x1378	; 0x1378 <strnlen>
    1042:	5c 01       	movw	r10, r24
    1044:	83 01       	movw	r16, r6
    1046:	2c 85       	ldd	r18, Y+12	; 0x0c
    1048:	2f 77       	andi	r18, 0x7F	; 127
    104a:	17 c0       	rjmp	.+46     	; 0x107a <vfprintf+0x1ac>
    104c:	52 e0       	ldi	r21, 0x02	; 2
    104e:	65 2e       	mov	r6, r21
    1050:	71 2c       	mov	r7, r1
    1052:	60 0e       	add	r6, r16
    1054:	71 1e       	adc	r7, r17
    1056:	f8 01       	movw	r30, r16
    1058:	80 80       	ld	r8, Z
    105a:	91 80       	ldd	r9, Z+1	; 0x01
    105c:	26 ff       	sbrs	r18, 6
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <vfprintf+0x198>
    1060:	6e 2d       	mov	r22, r14
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <vfprintf+0x19c>
    1066:	6f ef       	ldi	r22, 0xFF	; 255
    1068:	7f ef       	ldi	r23, 0xFF	; 255
    106a:	c4 01       	movw	r24, r8
    106c:	2c 87       	std	Y+12, r18	; 0x0c
    106e:	0e 94 b1 09 	call	0x1362	; 0x1362 <strnlen_P>
    1072:	5c 01       	movw	r10, r24
    1074:	2c 85       	ldd	r18, Y+12	; 0x0c
    1076:	20 68       	ori	r18, 0x80	; 128
    1078:	83 01       	movw	r16, r6
    107a:	23 fd       	sbrc	r18, 3
    107c:	20 c0       	rjmp	.+64     	; 0x10be <vfprintf+0x1f0>
    107e:	08 c0       	rjmp	.+16     	; 0x1090 <vfprintf+0x1c2>
    1080:	80 e2       	ldi	r24, 0x20	; 32
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	b6 01       	movw	r22, r12
    1086:	2c 87       	std	Y+12, r18	; 0x0c
    1088:	0e 94 c7 09 	call	0x138e	; 0x138e <fputc>
    108c:	fa 94       	dec	r15
    108e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1090:	8f 2d       	mov	r24, r15
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a8 16       	cp	r10, r24
    1096:	b9 06       	cpc	r11, r25
    1098:	98 f3       	brcs	.-26     	; 0x1080 <vfprintf+0x1b2>
    109a:	11 c0       	rjmp	.+34     	; 0x10be <vfprintf+0x1f0>
    109c:	f4 01       	movw	r30, r8
    109e:	27 fd       	sbrc	r18, 7
    10a0:	85 91       	lpm	r24, Z+
    10a2:	27 ff       	sbrs	r18, 7
    10a4:	81 91       	ld	r24, Z+
    10a6:	4f 01       	movw	r8, r30
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	b6 01       	movw	r22, r12
    10ac:	2c 87       	std	Y+12, r18	; 0x0c
    10ae:	0e 94 c7 09 	call	0x138e	; 0x138e <fputc>
    10b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10b4:	f1 10       	cpse	r15, r1
    10b6:	fa 94       	dec	r15
    10b8:	08 94       	sec
    10ba:	a1 08       	sbc	r10, r1
    10bc:	b1 08       	sbc	r11, r1
    10be:	a1 14       	cp	r10, r1
    10c0:	b1 04       	cpc	r11, r1
    10c2:	61 f7       	brne	.-40     	; 0x109c <vfprintf+0x1ce>
    10c4:	f1 c0       	rjmp	.+482    	; 0x12a8 <__stack+0x1a9>
    10c6:	84 36       	cpi	r24, 0x64	; 100
    10c8:	11 f0       	breq	.+4      	; 0x10ce <vfprintf+0x200>
    10ca:	89 36       	cpi	r24, 0x69	; 105
    10cc:	49 f5       	brne	.+82     	; 0x1120 <__stack+0x21>
    10ce:	27 ff       	sbrs	r18, 7
    10d0:	08 c0       	rjmp	.+16     	; 0x10e2 <vfprintf+0x214>
    10d2:	f8 01       	movw	r30, r16
    10d4:	60 81       	ld	r22, Z
    10d6:	71 81       	ldd	r23, Z+1	; 0x01
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	93 81       	ldd	r25, Z+3	; 0x03
    10dc:	0c 5f       	subi	r16, 0xFC	; 252
    10de:	1f 4f       	sbci	r17, 0xFF	; 255
    10e0:	09 c0       	rjmp	.+18     	; 0x10f4 <vfprintf+0x226>
    10e2:	f8 01       	movw	r30, r16
    10e4:	60 81       	ld	r22, Z
    10e6:	71 81       	ldd	r23, Z+1	; 0x01
    10e8:	88 27       	eor	r24, r24
    10ea:	77 fd       	sbrc	r23, 7
    10ec:	80 95       	com	r24
    10ee:	98 2f       	mov	r25, r24
    10f0:	0e 5f       	subi	r16, 0xFE	; 254
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	4f e6       	ldi	r20, 0x6F	; 111
    10f6:	b4 2e       	mov	r11, r20
    10f8:	b2 22       	and	r11, r18
    10fa:	97 ff       	sbrs	r25, 7
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <__stack+0x11>
    10fe:	90 95       	com	r25
    1100:	80 95       	com	r24
    1102:	70 95       	com	r23
    1104:	61 95       	neg	r22
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	8f 4f       	sbci	r24, 0xFF	; 255
    110a:	9f 4f       	sbci	r25, 0xFF	; 255
    110c:	f0 e8       	ldi	r31, 0x80	; 128
    110e:	bf 2a       	or	r11, r31
    1110:	a2 01       	movw	r20, r4
    1112:	2a e0       	ldi	r18, 0x0A	; 10
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__ultoa_invert>
    111a:	78 2e       	mov	r7, r24
    111c:	74 18       	sub	r7, r4
    111e:	45 c0       	rjmp	.+138    	; 0x11aa <__stack+0xab>
    1120:	85 37       	cpi	r24, 0x75	; 117
    1122:	31 f4       	brne	.+12     	; 0x1130 <__stack+0x31>
    1124:	3f ee       	ldi	r19, 0xEF	; 239
    1126:	b3 2e       	mov	r11, r19
    1128:	b2 22       	and	r11, r18
    112a:	2a e0       	ldi	r18, 0x0A	; 10
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	25 c0       	rjmp	.+74     	; 0x117a <__stack+0x7b>
    1130:	99 ef       	ldi	r25, 0xF9	; 249
    1132:	b9 2e       	mov	r11, r25
    1134:	b2 22       	and	r11, r18
    1136:	8f 36       	cpi	r24, 0x6F	; 111
    1138:	c1 f0       	breq	.+48     	; 0x116a <__stack+0x6b>
    113a:	80 37       	cpi	r24, 0x70	; 112
    113c:	20 f4       	brcc	.+8      	; 0x1146 <__stack+0x47>
    113e:	88 35       	cpi	r24, 0x58	; 88
    1140:	09 f0       	breq	.+2      	; 0x1144 <__stack+0x45>
    1142:	b5 c0       	rjmp	.+362    	; 0x12ae <__stack+0x1af>
    1144:	0d c0       	rjmp	.+26     	; 0x1160 <__stack+0x61>
    1146:	80 37       	cpi	r24, 0x70	; 112
    1148:	21 f0       	breq	.+8      	; 0x1152 <__stack+0x53>
    114a:	88 37       	cpi	r24, 0x78	; 120
    114c:	09 f0       	breq	.+2      	; 0x1150 <__stack+0x51>
    114e:	af c0       	rjmp	.+350    	; 0x12ae <__stack+0x1af>
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <__stack+0x57>
    1152:	20 e1       	ldi	r18, 0x10	; 16
    1154:	b2 2a       	or	r11, r18
    1156:	b4 fe       	sbrs	r11, 4
    1158:	0b c0       	rjmp	.+22     	; 0x1170 <__stack+0x71>
    115a:	84 e0       	ldi	r24, 0x04	; 4
    115c:	b8 2a       	or	r11, r24
    115e:	08 c0       	rjmp	.+16     	; 0x1170 <__stack+0x71>
    1160:	b4 fe       	sbrs	r11, 4
    1162:	09 c0       	rjmp	.+18     	; 0x1176 <__stack+0x77>
    1164:	e6 e0       	ldi	r30, 0x06	; 6
    1166:	be 2a       	or	r11, r30
    1168:	06 c0       	rjmp	.+12     	; 0x1176 <__stack+0x77>
    116a:	28 e0       	ldi	r18, 0x08	; 8
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	05 c0       	rjmp	.+10     	; 0x117a <__stack+0x7b>
    1170:	20 e1       	ldi	r18, 0x10	; 16
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	02 c0       	rjmp	.+4      	; 0x117a <__stack+0x7b>
    1176:	20 e1       	ldi	r18, 0x10	; 16
    1178:	32 e0       	ldi	r19, 0x02	; 2
    117a:	b7 fe       	sbrs	r11, 7
    117c:	08 c0       	rjmp	.+16     	; 0x118e <__stack+0x8f>
    117e:	f8 01       	movw	r30, r16
    1180:	60 81       	ld	r22, Z
    1182:	71 81       	ldd	r23, Z+1	; 0x01
    1184:	82 81       	ldd	r24, Z+2	; 0x02
    1186:	93 81       	ldd	r25, Z+3	; 0x03
    1188:	0c 5f       	subi	r16, 0xFC	; 252
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
    118c:	07 c0       	rjmp	.+14     	; 0x119c <__stack+0x9d>
    118e:	f8 01       	movw	r30, r16
    1190:	60 81       	ld	r22, Z
    1192:	71 81       	ldd	r23, Z+1	; 0x01
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 5f       	subi	r16, 0xFE	; 254
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
    119c:	a2 01       	movw	r20, r4
    119e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__ultoa_invert>
    11a2:	78 2e       	mov	r7, r24
    11a4:	74 18       	sub	r7, r4
    11a6:	ff e7       	ldi	r31, 0x7F	; 127
    11a8:	bf 22       	and	r11, r31
    11aa:	b6 fe       	sbrs	r11, 6
    11ac:	0b c0       	rjmp	.+22     	; 0x11c4 <__stack+0xc5>
    11ae:	2e ef       	ldi	r18, 0xFE	; 254
    11b0:	b2 22       	and	r11, r18
    11b2:	7e 14       	cp	r7, r14
    11b4:	38 f4       	brcc	.+14     	; 0x11c4 <__stack+0xc5>
    11b6:	b4 fe       	sbrs	r11, 4
    11b8:	07 c0       	rjmp	.+14     	; 0x11c8 <__stack+0xc9>
    11ba:	b2 fc       	sbrc	r11, 2
    11bc:	05 c0       	rjmp	.+10     	; 0x11c8 <__stack+0xc9>
    11be:	8f ee       	ldi	r24, 0xEF	; 239
    11c0:	b8 22       	and	r11, r24
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <__stack+0xc9>
    11c4:	a7 2c       	mov	r10, r7
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <__stack+0xcb>
    11c8:	ae 2c       	mov	r10, r14
    11ca:	8b 2d       	mov	r24, r11
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	b4 fe       	sbrs	r11, 4
    11d0:	0d c0       	rjmp	.+26     	; 0x11ec <__stack+0xed>
    11d2:	fe 01       	movw	r30, r28
    11d4:	e7 0d       	add	r30, r7
    11d6:	f1 1d       	adc	r31, r1
    11d8:	20 81       	ld	r18, Z
    11da:	20 33       	cpi	r18, 0x30	; 48
    11dc:	19 f4       	brne	.+6      	; 0x11e4 <__stack+0xe5>
    11de:	e9 ee       	ldi	r30, 0xE9	; 233
    11e0:	be 22       	and	r11, r30
    11e2:	09 c0       	rjmp	.+18     	; 0x11f6 <__stack+0xf7>
    11e4:	a3 94       	inc	r10
    11e6:	b2 fe       	sbrs	r11, 2
    11e8:	06 c0       	rjmp	.+12     	; 0x11f6 <__stack+0xf7>
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <__stack+0xf5>
    11ec:	86 78       	andi	r24, 0x86	; 134
    11ee:	90 70       	andi	r25, 0x00	; 0
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <__stack+0xf7>
    11f4:	a3 94       	inc	r10
    11f6:	8b 2c       	mov	r8, r11
    11f8:	99 24       	eor	r9, r9
    11fa:	b3 fc       	sbrc	r11, 3
    11fc:	14 c0       	rjmp	.+40     	; 0x1226 <__stack+0x127>
    11fe:	b0 fe       	sbrs	r11, 0
    1200:	0f c0       	rjmp	.+30     	; 0x1220 <__stack+0x121>
    1202:	af 14       	cp	r10, r15
    1204:	28 f4       	brcc	.+10     	; 0x1210 <__stack+0x111>
    1206:	e7 2c       	mov	r14, r7
    1208:	ef 0c       	add	r14, r15
    120a:	ea 18       	sub	r14, r10
    120c:	af 2c       	mov	r10, r15
    120e:	08 c0       	rjmp	.+16     	; 0x1220 <__stack+0x121>
    1210:	e7 2c       	mov	r14, r7
    1212:	06 c0       	rjmp	.+12     	; 0x1220 <__stack+0x121>
    1214:	80 e2       	ldi	r24, 0x20	; 32
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	b6 01       	movw	r22, r12
    121a:	0e 94 c7 09 	call	0x138e	; 0x138e <fputc>
    121e:	a3 94       	inc	r10
    1220:	af 14       	cp	r10, r15
    1222:	c0 f3       	brcs	.-16     	; 0x1214 <__stack+0x115>
    1224:	04 c0       	rjmp	.+8      	; 0x122e <__stack+0x12f>
    1226:	af 14       	cp	r10, r15
    1228:	10 f4       	brcc	.+4      	; 0x122e <__stack+0x12f>
    122a:	fa 18       	sub	r15, r10
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <__stack+0x131>
    122e:	ff 24       	eor	r15, r15
    1230:	84 fe       	sbrs	r8, 4
    1232:	0f c0       	rjmp	.+30     	; 0x1252 <__stack+0x153>
    1234:	80 e3       	ldi	r24, 0x30	; 48
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	b6 01       	movw	r22, r12
    123a:	0e 94 c7 09 	call	0x138e	; 0x138e <fputc>
    123e:	82 fe       	sbrs	r8, 2
    1240:	1f c0       	rjmp	.+62     	; 0x1280 <__stack+0x181>
    1242:	81 fe       	sbrs	r8, 1
    1244:	03 c0       	rjmp	.+6      	; 0x124c <__stack+0x14d>
    1246:	88 e5       	ldi	r24, 0x58	; 88
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	10 c0       	rjmp	.+32     	; 0x126c <__stack+0x16d>
    124c:	88 e7       	ldi	r24, 0x78	; 120
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0d c0       	rjmp	.+26     	; 0x126c <__stack+0x16d>
    1252:	c4 01       	movw	r24, r8
    1254:	86 78       	andi	r24, 0x86	; 134
    1256:	90 70       	andi	r25, 0x00	; 0
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	91 f0       	breq	.+36     	; 0x1280 <__stack+0x181>
    125c:	81 fc       	sbrc	r8, 1
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <__stack+0x165>
    1260:	80 e2       	ldi	r24, 0x20	; 32
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <__stack+0x167>
    1264:	8b e2       	ldi	r24, 0x2B	; 43
    1266:	b7 fc       	sbrc	r11, 7
    1268:	8d e2       	ldi	r24, 0x2D	; 45
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	b6 01       	movw	r22, r12
    126e:	0e 94 c7 09 	call	0x138e	; 0x138e <fputc>
    1272:	06 c0       	rjmp	.+12     	; 0x1280 <__stack+0x181>
    1274:	80 e3       	ldi	r24, 0x30	; 48
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	b6 01       	movw	r22, r12
    127a:	0e 94 c7 09 	call	0x138e	; 0x138e <fputc>
    127e:	ea 94       	dec	r14
    1280:	7e 14       	cp	r7, r14
    1282:	c0 f3       	brcs	.-16     	; 0x1274 <__stack+0x175>
    1284:	7a 94       	dec	r7
    1286:	f2 01       	movw	r30, r4
    1288:	e7 0d       	add	r30, r7
    128a:	f1 1d       	adc	r31, r1
    128c:	80 81       	ld	r24, Z
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	b6 01       	movw	r22, r12
    1292:	0e 94 c7 09 	call	0x138e	; 0x138e <fputc>
    1296:	77 20       	and	r7, r7
    1298:	a9 f7       	brne	.-22     	; 0x1284 <__stack+0x185>
    129a:	06 c0       	rjmp	.+12     	; 0x12a8 <__stack+0x1a9>
    129c:	80 e2       	ldi	r24, 0x20	; 32
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	b6 01       	movw	r22, r12
    12a2:	0e 94 c7 09 	call	0x138e	; 0x138e <fputc>
    12a6:	fa 94       	dec	r15
    12a8:	ff 20       	and	r15, r15
    12aa:	c1 f7       	brne	.-16     	; 0x129c <__stack+0x19d>
    12ac:	37 ce       	rjmp	.-914    	; 0xf1c <vfprintf+0x4e>
    12ae:	f6 01       	movw	r30, r12
    12b0:	26 81       	ldd	r18, Z+6	; 0x06
    12b2:	37 81       	ldd	r19, Z+7	; 0x07
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <__stack+0x1bb>
    12b6:	2f ef       	ldi	r18, 0xFF	; 255
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	c9 01       	movw	r24, r18
    12bc:	2c 96       	adiw	r28, 0x0c	; 12
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	bf 90       	pop	r11
    12da:	af 90       	pop	r10
    12dc:	9f 90       	pop	r9
    12de:	8f 90       	pop	r8
    12e0:	7f 90       	pop	r7
    12e2:	6f 90       	pop	r6
    12e4:	5f 90       	pop	r5
    12e6:	4f 90       	pop	r4
    12e8:	3f 90       	pop	r3
    12ea:	2f 90       	pop	r2
    12ec:	08 95       	ret

000012ee <__eerd_block_m128>:
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22

000012f2 <__eerd_blraw_m128>:
    12f2:	fc 01       	movw	r30, r24
    12f4:	e1 99       	sbic	0x1c, 1	; 28
    12f6:	fe cf       	rjmp	.-4      	; 0x12f4 <__eerd_blraw_m128+0x2>
    12f8:	06 c0       	rjmp	.+12     	; 0x1306 <__eerd_blraw_m128+0x14>
    12fa:	ff bb       	out	0x1f, r31	; 31
    12fc:	ee bb       	out	0x1e, r30	; 30
    12fe:	e0 9a       	sbi	0x1c, 0	; 28
    1300:	31 96       	adiw	r30, 0x01	; 1
    1302:	0d b2       	in	r0, 0x1d	; 29
    1304:	0d 92       	st	X+, r0
    1306:	41 50       	subi	r20, 0x01	; 1
    1308:	50 40       	sbci	r21, 0x00	; 0
    130a:	b8 f7       	brcc	.-18     	; 0x12fa <__eerd_blraw_m128+0x8>
    130c:	08 95       	ret

0000130e <__eerd_dword_m128>:
    130e:	a6 e1       	ldi	r26, 0x16	; 22
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	44 e0       	ldi	r20, 0x04	; 4
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__eerd_blraw_m128>

0000131a <__eewr_block_m128>:
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	03 c0       	rjmp	.+6      	; 0x1326 <__eewr_block_m128+0xc>
    1320:	2d 91       	ld	r18, X+
    1322:	0e 94 98 09 	call	0x1330	; 0x1330 <__eewr_r18_m128>
    1326:	41 50       	subi	r20, 0x01	; 1
    1328:	50 40       	sbci	r21, 0x00	; 0
    132a:	d0 f7       	brcc	.-12     	; 0x1320 <__eewr_block_m128+0x6>
    132c:	08 95       	ret

0000132e <__eewr_byte_m128>:
    132e:	26 2f       	mov	r18, r22

00001330 <__eewr_r18_m128>:
    1330:	e1 99       	sbic	0x1c, 1	; 28
    1332:	fe cf       	rjmp	.-4      	; 0x1330 <__eewr_r18_m128>
    1334:	9f bb       	out	0x1f, r25	; 31
    1336:	8e bb       	out	0x1e, r24	; 30
    1338:	2d bb       	out	0x1d, r18	; 29
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	e2 9a       	sbi	0x1c, 2	; 28
    1340:	e1 9a       	sbi	0x1c, 1	; 28
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	08 95       	ret

00001348 <__eewr_dword_m128>:
    1348:	24 2f       	mov	r18, r20
    134a:	0e 94 98 09 	call	0x1330	; 0x1330 <__eewr_r18_m128>
    134e:	25 2f       	mov	r18, r21
    1350:	0e 94 98 09 	call	0x1330	; 0x1330 <__eewr_r18_m128>
    1354:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__eewr_word_m128>

00001358 <__eewr_word_m128>:
    1358:	0e 94 97 09 	call	0x132e	; 0x132e <__eewr_byte_m128>
    135c:	27 2f       	mov	r18, r23
    135e:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__eewr_r18_m128>

00001362 <strnlen_P>:
    1362:	fc 01       	movw	r30, r24
    1364:	05 90       	lpm	r0, Z+
    1366:	61 50       	subi	r22, 0x01	; 1
    1368:	70 40       	sbci	r23, 0x00	; 0
    136a:	01 10       	cpse	r0, r1
    136c:	d8 f7       	brcc	.-10     	; 0x1364 <strnlen_P+0x2>
    136e:	80 95       	com	r24
    1370:	90 95       	com	r25
    1372:	8e 0f       	add	r24, r30
    1374:	9f 1f       	adc	r25, r31
    1376:	08 95       	ret

00001378 <strnlen>:
    1378:	fc 01       	movw	r30, r24
    137a:	61 50       	subi	r22, 0x01	; 1
    137c:	70 40       	sbci	r23, 0x00	; 0
    137e:	01 90       	ld	r0, Z+
    1380:	01 10       	cpse	r0, r1
    1382:	d8 f7       	brcc	.-10     	; 0x137a <strnlen+0x2>
    1384:	80 95       	com	r24
    1386:	90 95       	com	r25
    1388:	8e 0f       	add	r24, r30
    138a:	9f 1f       	adc	r25, r31
    138c:	08 95       	ret

0000138e <fputc>:
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	8c 01       	movw	r16, r24
    1398:	eb 01       	movw	r28, r22
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	81 ff       	sbrs	r24, 1
    139e:	1b c0       	rjmp	.+54     	; 0x13d6 <fputc+0x48>
    13a0:	82 ff       	sbrs	r24, 2
    13a2:	0d c0       	rjmp	.+26     	; 0x13be <fputc+0x30>
    13a4:	2e 81       	ldd	r18, Y+6	; 0x06
    13a6:	3f 81       	ldd	r19, Y+7	; 0x07
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	28 17       	cp	r18, r24
    13ae:	39 07       	cpc	r19, r25
    13b0:	64 f4       	brge	.+24     	; 0x13ca <fputc+0x3c>
    13b2:	e8 81       	ld	r30, Y
    13b4:	f9 81       	ldd	r31, Y+1	; 0x01
    13b6:	01 93       	st	Z+, r16
    13b8:	f9 83       	std	Y+1, r31	; 0x01
    13ba:	e8 83       	st	Y, r30
    13bc:	06 c0       	rjmp	.+12     	; 0x13ca <fputc+0x3c>
    13be:	e8 85       	ldd	r30, Y+8	; 0x08
    13c0:	f9 85       	ldd	r31, Y+9	; 0x09
    13c2:	80 2f       	mov	r24, r16
    13c4:	09 95       	icall
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	31 f4       	brne	.+12     	; 0x13d6 <fputc+0x48>
    13ca:	8e 81       	ldd	r24, Y+6	; 0x06
    13cc:	9f 81       	ldd	r25, Y+7	; 0x07
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	9f 83       	std	Y+7, r25	; 0x07
    13d2:	8e 83       	std	Y+6, r24	; 0x06
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <fputc+0x4c>
    13d6:	0f ef       	ldi	r16, 0xFF	; 255
    13d8:	1f ef       	ldi	r17, 0xFF	; 255
    13da:	c8 01       	movw	r24, r16
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	08 95       	ret

000013e6 <__ultoa_invert>:
    13e6:	fa 01       	movw	r30, r20
    13e8:	aa 27       	eor	r26, r26
    13ea:	28 30       	cpi	r18, 0x08	; 8
    13ec:	51 f1       	breq	.+84     	; 0x1442 <__ultoa_invert+0x5c>
    13ee:	20 31       	cpi	r18, 0x10	; 16
    13f0:	81 f1       	breq	.+96     	; 0x1452 <__ultoa_invert+0x6c>
    13f2:	e8 94       	clt
    13f4:	6f 93       	push	r22
    13f6:	6e 7f       	andi	r22, 0xFE	; 254
    13f8:	6e 5f       	subi	r22, 0xFE	; 254
    13fa:	7f 4f       	sbci	r23, 0xFF	; 255
    13fc:	8f 4f       	sbci	r24, 0xFF	; 255
    13fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1400:	af 4f       	sbci	r26, 0xFF	; 255
    1402:	b1 e0       	ldi	r27, 0x01	; 1
    1404:	3e d0       	rcall	.+124    	; 0x1482 <__ultoa_invert+0x9c>
    1406:	b4 e0       	ldi	r27, 0x04	; 4
    1408:	3c d0       	rcall	.+120    	; 0x1482 <__ultoa_invert+0x9c>
    140a:	67 0f       	add	r22, r23
    140c:	78 1f       	adc	r23, r24
    140e:	89 1f       	adc	r24, r25
    1410:	9a 1f       	adc	r25, r26
    1412:	a1 1d       	adc	r26, r1
    1414:	68 0f       	add	r22, r24
    1416:	79 1f       	adc	r23, r25
    1418:	8a 1f       	adc	r24, r26
    141a:	91 1d       	adc	r25, r1
    141c:	a1 1d       	adc	r26, r1
    141e:	6a 0f       	add	r22, r26
    1420:	71 1d       	adc	r23, r1
    1422:	81 1d       	adc	r24, r1
    1424:	91 1d       	adc	r25, r1
    1426:	a1 1d       	adc	r26, r1
    1428:	20 d0       	rcall	.+64     	; 0x146a <__ultoa_invert+0x84>
    142a:	09 f4       	brne	.+2      	; 0x142e <__ultoa_invert+0x48>
    142c:	68 94       	set
    142e:	3f 91       	pop	r19
    1430:	2a e0       	ldi	r18, 0x0A	; 10
    1432:	26 9f       	mul	r18, r22
    1434:	11 24       	eor	r1, r1
    1436:	30 19       	sub	r19, r0
    1438:	30 5d       	subi	r19, 0xD0	; 208
    143a:	31 93       	st	Z+, r19
    143c:	de f6       	brtc	.-74     	; 0x13f4 <__ultoa_invert+0xe>
    143e:	cf 01       	movw	r24, r30
    1440:	08 95       	ret
    1442:	46 2f       	mov	r20, r22
    1444:	47 70       	andi	r20, 0x07	; 7
    1446:	40 5d       	subi	r20, 0xD0	; 208
    1448:	41 93       	st	Z+, r20
    144a:	b3 e0       	ldi	r27, 0x03	; 3
    144c:	0f d0       	rcall	.+30     	; 0x146c <__ultoa_invert+0x86>
    144e:	c9 f7       	brne	.-14     	; 0x1442 <__ultoa_invert+0x5c>
    1450:	f6 cf       	rjmp	.-20     	; 0x143e <__ultoa_invert+0x58>
    1452:	46 2f       	mov	r20, r22
    1454:	4f 70       	andi	r20, 0x0F	; 15
    1456:	40 5d       	subi	r20, 0xD0	; 208
    1458:	4a 33       	cpi	r20, 0x3A	; 58
    145a:	18 f0       	brcs	.+6      	; 0x1462 <__ultoa_invert+0x7c>
    145c:	49 5d       	subi	r20, 0xD9	; 217
    145e:	31 fd       	sbrc	r19, 1
    1460:	40 52       	subi	r20, 0x20	; 32
    1462:	41 93       	st	Z+, r20
    1464:	02 d0       	rcall	.+4      	; 0x146a <__ultoa_invert+0x84>
    1466:	a9 f7       	brne	.-22     	; 0x1452 <__ultoa_invert+0x6c>
    1468:	ea cf       	rjmp	.-44     	; 0x143e <__ultoa_invert+0x58>
    146a:	b4 e0       	ldi	r27, 0x04	; 4
    146c:	a6 95       	lsr	r26
    146e:	97 95       	ror	r25
    1470:	87 95       	ror	r24
    1472:	77 95       	ror	r23
    1474:	67 95       	ror	r22
    1476:	ba 95       	dec	r27
    1478:	c9 f7       	brne	.-14     	; 0x146c <__ultoa_invert+0x86>
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	61 05       	cpc	r22, r1
    147e:	71 05       	cpc	r23, r1
    1480:	08 95       	ret
    1482:	9b 01       	movw	r18, r22
    1484:	ac 01       	movw	r20, r24
    1486:	0a 2e       	mov	r0, r26
    1488:	06 94       	lsr	r0
    148a:	57 95       	ror	r21
    148c:	47 95       	ror	r20
    148e:	37 95       	ror	r19
    1490:	27 95       	ror	r18
    1492:	ba 95       	dec	r27
    1494:	c9 f7       	brne	.-14     	; 0x1488 <__ultoa_invert+0xa2>
    1496:	62 0f       	add	r22, r18
    1498:	73 1f       	adc	r23, r19
    149a:	84 1f       	adc	r24, r20
    149c:	95 1f       	adc	r25, r21
    149e:	a0 1d       	adc	r26, r0
    14a0:	08 95       	ret

000014a2 <_exit>:
    14a2:	f8 94       	cli

000014a4 <__stop_program>:
    14a4:	ff cf       	rjmp	.-2      	; 0x14a4 <__stop_program>
