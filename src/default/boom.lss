
boom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  00001592  00001626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001592  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800258  00800258  0000177e  2**0
                  ALLOC
  3 .stab         00001230  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004cb  00000000  00000000  000029b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000377  00000000  00000000  00002f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001cb6  00000000  00000000  000032b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009e6  00000000  00000000  00004f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b96  00000000  00000000  0000594e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002b0  00000000  00000000  000074e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000509  00000000  00000000  00007794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000113b  00000000  00000000  00007c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000015f  00000000  00000000  00008dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  00008f37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 2b 03 	jmp	0x656	; 0x656 <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e9       	ldi	r30, 0x92	; 146
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 35       	cpi	r26, 0x58	; 88
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a8 e5       	ldi	r26, 0x58	; 88
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 3b       	cpi	r26, 0xB7	; 183
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <main>
      c6:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <StrCmp>:
	for (char i = 0; i < len; i++){
		if (origin[i] != copy[i]){
			return 1;
		}
	}
	return 0;
      ce:	26 2f       	mov	r18, r22
      d0:	37 2f       	mov	r19, r23
      d2:	d9 01       	movw	r26, r18
//----------------------------------------------------------------

char StrCmp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
      d4:	e8 2f       	mov	r30, r24
      d6:	f9 2f       	mov	r31, r25
      d8:	04 c0       	rjmp	.+8      	; 0xe2 <StrCmp+0x14>
		if (origin[i] != copy[i]){
      da:	21 91       	ld	r18, Z+
      dc:	9d 91       	ld	r25, X+
      de:	29 17       	cp	r18, r25
      e0:	31 f4       	brne	.+12     	; 0xee <StrCmp+0x20>
//----------------------------------------------------------------

char StrCmp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
      e2:	9e 2f       	mov	r25, r30
      e4:	98 1b       	sub	r25, r24
      e6:	94 17       	cp	r25, r20
      e8:	c0 f3       	brcs	.-16     	; 0xda <StrCmp+0xc>
		if (origin[i] != copy[i]){
			return 1;
		}
	}
	return 0;
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	08 95       	ret
char StrCmp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
		if (origin[i] != copy[i]){
			return 1;
      ee:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
      f0:	08 95       	ret

000000f2 <StrCp>:
//-------------------------------------------------------------------

void StrCp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
      f2:	28 2f       	mov	r18, r24
      f4:	39 2f       	mov	r19, r25
      f6:	d9 01       	movw	r26, r18
      f8:	86 2f       	mov	r24, r22
      fa:	97 2f       	mov	r25, r23
      fc:	fc 01       	movw	r30, r24
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	03 c0       	rjmp	.+6      	; 0x108 <StrCp+0x16>
		copy[i] = origin[i];
     102:	9d 91       	ld	r25, X+
     104:	91 93       	st	Z+, r25
//-------------------------------------------------------------------

void StrCp(char * origin, char * copy, char len)
{

	for (char i = 0; i < len; i++){
     106:	8f 5f       	subi	r24, 0xFF	; 255
     108:	84 17       	cp	r24, r20
     10a:	d8 f3       	brcs	.-10     	; 0x102 <StrCp+0x10>
		copy[i] = origin[i];
	}	
}
     10c:	08 95       	ret

0000010e <clear_key>:
//-------------------------------------------------------------------

void clear_key()
{
	for (char i = 0; i < KEYIDLEN; i++){
		readedkeyid[i] = 255;
     10e:	8f ef       	ldi	r24, 0xFF	; 255
     110:	80 93 4c 02 	sts	0x024C, r24
     114:	80 93 4d 02 	sts	0x024D, r24
     118:	80 93 4e 02 	sts	0x024E, r24
     11c:	80 93 4f 02 	sts	0x024F, r24
     120:	80 93 50 02 	sts	0x0250, r24
     124:	80 93 51 02 	sts	0x0251, r24
     128:	80 93 52 02 	sts	0x0252, r24
     12c:	80 93 53 02 	sts	0x0253, r24
	}
}
     130:	08 95       	ret

00000132 <SetupTIMER1>:
     // will occur every:
     //   1<<CS10                  4096 mkS  (no prescale Fclk)
     //   1<<CS11                  32.768 mS (Fclk/8)
     //  (1<<CS11)|(1<<CS10)       262.144 mS (Fclk/64)
     //   1<<CS12                  1048.576 mS (Fclk/256)
     TCCR1B = (1<<CS12);
     132:	84 e0       	ldi	r24, 0x04	; 4
     134:	8e bd       	out	0x2e, r24	; 46
     TCNT1 = 65536-62439;        //примерно 1 секунда
     136:	89 e1       	ldi	r24, 0x19	; 25
     138:	9c e0       	ldi	r25, 0x0C	; 12
     13a:	9d bd       	out	0x2d, r25	; 45
     13c:	8c bd       	out	0x2c, r24	; 44
     /* Enable timer 1 overflow interrupt. */
     TIMSK |= (1<<TOIE1);
     13e:	87 b7       	in	r24, 0x37	; 55
     140:	84 60       	ori	r24, 0x04	; 4
     142:	87 bf       	out	0x37, r24	; 55

	
 	 sei();
     144:	78 94       	sei
}
     146:	08 95       	ret

00000148 <SetupTIMER3>:
     // will occur every:
     //   1<<CS10                  4096 mkS  (no prescale Fclk)
     //   1<<CS11                  32.768 mS (Fclk/8)
     //  (1<<CS11)|(1<<CS10)       262.144 mS (Fclk/64)
     //   1<<CS12                  1048.576 mS (Fclk/256)
     TCCR3B = (1<<CS12);
     148:	84 e0       	ldi	r24, 0x04	; 4
     14a:	80 93 8a 00 	sts	0x008A, r24
     TCNT3 = 65536-62439;        //примерно 1 секунда
     14e:	89 e1       	ldi	r24, 0x19	; 25
     150:	9c e0       	ldi	r25, 0x0C	; 12
     152:	90 93 89 00 	sts	0x0089, r25
     156:	80 93 88 00 	sts	0x0088, r24
     /* Enable timer 1 overflow interrupt. */
     ETIMSK |= (1<<TOIE3);
     15a:	ed e7       	ldi	r30, 0x7D	; 125
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	84 60       	ori	r24, 0x04	; 4
     162:	80 83       	st	Z, r24

 	 sei();
     164:	78 94       	sei
}
     166:	08 95       	ret

00000168 <GetButton>:

char GetButton()
{
	static char all_released = 0;

	if (!(BUTTONPIN & 0b00000001) && all_released){
     168:	c8 99       	sbic	0x19, 0	; 25
     16a:	08 c0       	rjmp	.+16     	; 0x17c <GetButton+0x14>
     16c:	80 91 64 02 	lds	r24, 0x0264
     170:	88 23       	and	r24, r24
     172:	21 f0       	breq	.+8      	; 0x17c <GetButton+0x14>
		all_released = 0;
     174:	10 92 64 02 	sts	0x0264, r1
		return 1;	
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	08 95       	ret
	}
	
	if (!(BUTTONPIN & 0b00000010) && all_released){
     17c:	c9 99       	sbic	0x19, 1	; 25
     17e:	08 c0       	rjmp	.+16     	; 0x190 <GetButton+0x28>
     180:	80 91 64 02 	lds	r24, 0x0264
     184:	88 23       	and	r24, r24
     186:	21 f0       	breq	.+8      	; 0x190 <GetButton+0x28>
		all_released = 0;
     188:	10 92 64 02 	sts	0x0264, r1
		return 2;	
     18c:	82 e0       	ldi	r24, 0x02	; 2
     18e:	08 95       	ret
	}

	if (!(BUTTONPIN & 0b00000100) && all_released){
     190:	ca 99       	sbic	0x19, 2	; 25
     192:	08 c0       	rjmp	.+16     	; 0x1a4 <GetButton+0x3c>
     194:	80 91 64 02 	lds	r24, 0x0264
     198:	88 23       	and	r24, r24
     19a:	21 f0       	breq	.+8      	; 0x1a4 <GetButton+0x3c>
		all_released = 0;
     19c:	10 92 64 02 	sts	0x0264, r1
		return 3;	
     1a0:	83 e0       	ldi	r24, 0x03	; 3
     1a2:	08 95       	ret
	}

	if (!(BUTTONPIN & 0b00001000) && all_released){
     1a4:	cb 99       	sbic	0x19, 3	; 25
     1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <GetButton+0x50>
     1a8:	80 91 64 02 	lds	r24, 0x0264
     1ac:	88 23       	and	r24, r24
     1ae:	21 f0       	breq	.+8      	; 0x1b8 <GetButton+0x50>
		all_released = 0;
     1b0:	10 92 64 02 	sts	0x0264, r1
		return 4;	
     1b4:	84 e0       	ldi	r24, 0x04	; 4
     1b6:	08 95       	ret
	}

	if (!(BUTTONPIN & 0b00010000) && all_released){
     1b8:	cc 99       	sbic	0x19, 4	; 25
     1ba:	08 c0       	rjmp	.+16     	; 0x1cc <GetButton+0x64>
     1bc:	80 91 64 02 	lds	r24, 0x0264
     1c0:	88 23       	and	r24, r24
     1c2:	21 f0       	breq	.+8      	; 0x1cc <GetButton+0x64>
		all_released = 0;
     1c4:	10 92 64 02 	sts	0x0264, r1
		return 5;	
     1c8:	85 e0       	ldi	r24, 0x05	; 5
     1ca:	08 95       	ret
	}

	if (    ((PINA & 0b00000001)
     1cc:	e9 b3       	in	r30, 0x19	; 25
			|(PINA & 0b00000010)
     1ce:	89 b3       	in	r24, 0x19	; 25
			|(PINA & 0b00000100)
     1d0:	69 b3       	in	r22, 0x19	; 25
			|(PINA & 0b00001000)
     1d2:	49 b3       	in	r20, 0x19	; 25
			|(PINA & 0b00010000)) == 31)
     1d4:	29 b3       	in	r18, 0x19	; 25
		all_released = 0;
		return 5;	
	}

	if (    ((PINA & 0b00000001)
			|(PINA & 0b00000010)
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	82 70       	andi	r24, 0x02	; 2
     1da:	90 70       	andi	r25, 0x00	; 0
	if (!(BUTTONPIN & 0b00010000) && all_released){
		all_released = 0;
		return 5;	
	}

	if (    ((PINA & 0b00000001)
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	e1 70       	andi	r30, 0x01	; 1
     1e0:	f0 70       	andi	r31, 0x00	; 0
			|(PINA & 0b00000010)
     1e2:	8e 2b       	or	r24, r30
     1e4:	9f 2b       	or	r25, r31
			|(PINA & 0b00000100)
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	64 70       	andi	r22, 0x04	; 4
     1ea:	70 70       	andi	r23, 0x00	; 0
     1ec:	86 2b       	or	r24, r22
     1ee:	97 2b       	or	r25, r23
			|(PINA & 0b00001000)
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	48 70       	andi	r20, 0x08	; 8
     1f4:	50 70       	andi	r21, 0x00	; 0
     1f6:	84 2b       	or	r24, r20
     1f8:	95 2b       	or	r25, r21
			|(PINA & 0b00010000)) == 31)
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	20 71       	andi	r18, 0x10	; 16
     1fe:	30 70       	andi	r19, 0x00	; 0
     200:	82 2b       	or	r24, r18
     202:	93 2b       	or	r25, r19
	if (!(BUTTONPIN & 0b00010000) && all_released){
		all_released = 0;
		return 5;	
	}

	if (    ((PINA & 0b00000001)
     204:	8f 31       	cpi	r24, 0x1F	; 31
     206:	91 05       	cpc	r25, r1
     208:	29 f4       	brne	.+10     	; 0x214 <GetButton+0xac>
			|(PINA & 0b00000010)
			|(PINA & 0b00000100)
			|(PINA & 0b00001000)
			|(PINA & 0b00010000)) == 31)
	all_released = 1; //all bottons are released
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 64 02 	sts	0x0264, r24

	return 0;
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	08 95       	ret
     214:	80 e0       	ldi	r24, 0x00	; 0
}
     216:	08 95       	ret

00000218 <PrintToSevenSeg>:

//---------------------------------------------------------------

char PrintToSevenSeg(long value)
{
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	df 93       	push	r29
     21e:	cf 93       	push	r28
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	60 97       	sbiw	r28, 0x10	; 16
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	cd bf       	out	0x3d, r28	; 61
	char stext	 [TEXTLEN];

	sprintf(stext,"%d",value);
     230:	2d b7       	in	r18, 0x3d	; 61
     232:	3e b7       	in	r19, 0x3e	; 62
     234:	28 50       	subi	r18, 0x08	; 8
     236:	30 40       	sbci	r19, 0x00	; 0
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	3e bf       	out	0x3e, r19	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	2d bf       	out	0x3d, r18	; 61
     242:	ed b7       	in	r30, 0x3d	; 61
     244:	fe b7       	in	r31, 0x3e	; 62
     246:	31 96       	adiw	r30, 0x01	; 1
     248:	8e 01       	movw	r16, r28
     24a:	0f 5f       	subi	r16, 0xFF	; 255
     24c:	1f 4f       	sbci	r17, 0xFF	; 255
     24e:	ad b7       	in	r26, 0x3d	; 61
     250:	be b7       	in	r27, 0x3e	; 62
     252:	12 96       	adiw	r26, 0x02	; 2
     254:	1c 93       	st	X, r17
     256:	0e 93       	st	-X, r16
     258:	11 97       	sbiw	r26, 0x01	; 1
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	31 e0       	ldi	r19, 0x01	; 1
     25e:	33 83       	std	Z+3, r19	; 0x03
     260:	22 83       	std	Z+2, r18	; 0x02
     262:	64 83       	std	Z+4, r22	; 0x04
     264:	75 83       	std	Z+5, r23	; 0x05
     266:	86 83       	std	Z+6, r24	; 0x06
     268:	97 83       	std	Z+7, r25	; 0x07
     26a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <sprintf>

	LCDSendCommand(DD_RAM_ADDR);
     26e:	2d b7       	in	r18, 0x3d	; 61
     270:	3e b7       	in	r19, 0x3e	; 62
     272:	28 5f       	subi	r18, 0xF8	; 248
     274:	3f 4f       	sbci	r19, 0xFF	; 255
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	3e bf       	out	0x3e, r19	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	2d bf       	out	0x3d, r18	; 61
     280:	80 e8       	ldi	r24, 0x80	; 128
     282:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>

	LCDSendTxt(stext);
     286:	c8 01       	movw	r24, r16
     288:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCDSendTxt>

	return 0;
}
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	60 96       	adiw	r28, 0x10	; 16
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	de bf       	out	0x3e, r29	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	cd bf       	out	0x3d, r28	; 61
     29a:	cf 91       	pop	r28
     29c:	df 91       	pop	r29
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	08 95       	ret

000002a4 <GameOver>:

//---------------------------------------------------------------

void GameOver()
{
	is_game = 0;
     2a4:	10 92 59 02 	sts	0x0259, r1
	is_timer = 0;
     2a8:	10 92 5a 02 	sts	0x025A, r1
	LCDSendCommand(CLR_DISP); 
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
	LCDSendUnsafeCounteredTxt(GAMEOVER, TEXTLEN);
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	60 e1       	ldi	r22, 0x10	; 16
     2b8:	0e 94 71 05 	call	0xae2	; 0xae2 <LCDSendUnsafeCounteredTxt>

	// reinit timer

	timer_cur = timer_init_val;
     2bc:	80 91 54 02 	lds	r24, 0x0254
     2c0:	90 91 55 02 	lds	r25, 0x0255
     2c4:	a0 91 56 02 	lds	r26, 0x0256
     2c8:	b0 91 57 02 	lds	r27, 0x0257
     2cc:	80 93 5d 02 	sts	0x025D, r24
     2d0:	90 93 5e 02 	sts	0x025E, r25
     2d4:	a0 93 5f 02 	sts	0x025F, r26
     2d8:	b0 93 60 02 	sts	0x0260, r27

	UPBIT(PORTA,6);	
     2dc:	de 9a       	sbi	0x1b, 6	; 27
}
     2de:	08 95       	ret

000002e0 <GamePaused>:

//---------------------------------------------------------------

void GamePaused()
{
	is_timer = 0;
     2e0:	10 92 5a 02 	sts	0x025A, r1

	UPBIT(PORTA,6);
     2e4:	de 9a       	sbi	0x1b, 6	; 27
}
     2e6:	08 95       	ret

000002e8 <MakeBoom>:

//---------------------------------------------------------------

void MakeBoom()
{
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
	is_timer = 0;
     2ec:	10 92 5a 02 	sts	0x025A, r1
	is_game = 0;
     2f0:	10 92 59 02 	sts	0x0259, r1

	timer_cur = timer_init_val;
     2f4:	80 91 54 02 	lds	r24, 0x0254
     2f8:	90 91 55 02 	lds	r25, 0x0255
     2fc:	a0 91 56 02 	lds	r26, 0x0256
     300:	b0 91 57 02 	lds	r27, 0x0257
     304:	80 93 5d 02 	sts	0x025D, r24
     308:	90 93 5e 02 	sts	0x025E, r25
     30c:	a0 93 5f 02 	sts	0x025F, r26
     310:	b0 93 60 02 	sts	0x0260, r27

	LCDSendCommand(CLR_DISP);
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
	LCDSendTxt(" BOOM BOOM BOOM "); 
     31a:	c4 e1       	ldi	r28, 0x14	; 20
     31c:	d1 e0       	ldi	r29, 0x01	; 1
     31e:	ce 01       	movw	r24, r28
     320:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCDSendTxt>
	LCDSendCommand(DD_RAM_ADDR2);
     324:	80 ec       	ldi	r24, 0xC0	; 192
     326:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
	LCDSendTxt(" BOOM BOOM BOOM ");
     32a:	ce 01       	movw	r24, r28
     32c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCDSendTxt>

	UPBIT(PORTA,6);	
     330:	de 9a       	sbi	0x1b, 6	; 27
	
}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <CheckKey>:

//---------------------------------------------------------------

char CheckKey ()
{
	if (!reset_ds1990(readedkeyid, KEYIDLEN))
     338:	8c e4       	ldi	r24, 0x4C	; 76
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	68 e0       	ldi	r22, 0x08	; 8
     33e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <reset_ds1990>
     342:	88 23       	and	r24, r24
     344:	69 f0       	breq	.+26     	; 0x360 <CheckKey+0x28>
		return 0;
//	return !StrCmp(readedkeyid, keyid, KEYIDLEN);

	if ( StrCmp(readedkeyid, keyid, KEYIDLEN) ){ // считываются разные ключи
     346:	8c e4       	ldi	r24, 0x4C	; 76
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	64 e4       	ldi	r22, 0x44	; 68
     34c:	72 e0       	ldi	r23, 0x02	; 2
     34e:	48 e0       	ldi	r20, 0x08	; 8
     350:	0e 94 67 00 	call	0xce	; 0xce <StrCmp>
     354:	88 23       	and	r24, r24
     356:	31 f4       	brne	.+12     	; 0x364 <CheckKey+0x2c>
		return 0;
	}else{
		clear_key();
     358:	0e 94 87 00 	call	0x10e	; 0x10e <clear_key>
		return 1;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	08 95       	ret
//---------------------------------------------------------------

char CheckKey ()
{
	if (!reset_ds1990(readedkeyid, KEYIDLEN))
		return 0;
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	08 95       	ret
//	return !StrCmp(readedkeyid, keyid, KEYIDLEN);

	if ( StrCmp(readedkeyid, keyid, KEYIDLEN) ){ // считываются разные ключи
		return 0;
     364:	80 e0       	ldi	r24, 0x00	; 0
	}else{
		clear_key();
		return 1;
	}
}
     366:	08 95       	ret

00000368 <CheckState>:
//---------------------------------------------------------------

char CheckState(char is_key_state)
{

	if (is_key_state == 1){ // first key, now just one 
     368:	81 30       	cpi	r24, 0x01	; 1
     36a:	01 f5       	brne	.+64     	; 0x3ac <CheckState+0x44>
		if (is_game){
     36c:	80 91 59 02 	lds	r24, 0x0259
     370:	88 23       	and	r24, r24
     372:	29 f0       	breq	.+10     	; 0x37e <CheckState+0x16>
			GameOver();
     374:	0e 94 52 01 	call	0x2a4	; 0x2a4 <GameOver>
			is_key = 0;
     378:	10 92 5b 02 	sts	0x025B, r1
     37c:	15 c0       	rjmp	.+42     	; 0x3a8 <CheckState+0x40>
			return 1;
		}else{
			is_key = 0;
     37e:	10 92 5b 02 	sts	0x025B, r1
			menu_pos = EADMIN;
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	80 93 13 02 	sts	0x0213, r24
			LCDSendCommand(CLR_DISP); 
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
			LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
     38e:	80 91 13 02 	lds	r24, 0x0213
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	24 e0       	ldi	r18, 0x04	; 4
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	2a 95       	dec	r18
     39c:	e1 f7       	brne	.-8      	; 0x396 <CheckState+0x2e>
     39e:	8d 55       	subi	r24, 0x5D	; 93
     3a0:	9e 4f       	sbci	r25, 0xFE	; 254
     3a2:	60 e1       	ldi	r22, 0x10	; 16
     3a4:	0e 94 71 05 	call	0xae2	; 0xae2 <LCDSendUnsafeCounteredTxt>
			return 1;				
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	08 95       	ret
		}
	}
	return 0;
     3ac:	80 e0       	ldi	r24, 0x00	; 0
}
     3ae:	08 95       	ret

000003b0 <MenuSelect>:

//---------------------------------------------------------------

char MenuSelect(char key)
{	
     3b0:	1f 93       	push	r17
	static char pos = 0;
	static char addrr = 0;

	if (key != OKBUT && key != NOBUT){ // some digit
     3b2:	82 30       	cpi	r24, 0x02	; 2
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <MenuSelect+0x8>
     3b6:	6b c0       	rjmp	.+214    	; 0x48e <MenuSelect+0xde>
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	31 f1       	breq	.+76     	; 0x408 <MenuSelect+0x58>

		if (pos == TEXTLEN)
     3bc:	90 91 63 02 	lds	r25, 0x0263
     3c0:	90 31       	cpi	r25, 0x10	; 16
     3c2:	19 f4       	brne	.+6      	; 0x3ca <MenuSelect+0x1a>
			pos--;
     3c4:	9f e0       	ldi	r25, 0x0F	; 15
     3c6:	90 93 63 02 	sts	0x0263, r25

		curtext[pos++] = key + 48; // from digit to asci simbol of digit
     3ca:	90 91 63 02 	lds	r25, 0x0263
     3ce:	e9 2f       	mov	r30, r25
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	eb 59       	subi	r30, 0x9B	; 155
     3d4:	fd 4f       	sbci	r31, 0xFD	; 253
     3d6:	80 5d       	subi	r24, 0xD0	; 208
     3d8:	80 83       	st	Z, r24
     3da:	89 2f       	mov	r24, r25
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	80 93 63 02 	sts	0x0263, r24

		for (char i = pos; i < TEXTLEN; i++){
			curtext[i] = ' ';
     3e2:	90 e2       	ldi	r25, 0x20	; 32
		if (pos == TEXTLEN)
			pos--;

		curtext[pos++] = key + 48; // from digit to asci simbol of digit

		for (char i = pos; i < TEXTLEN; i++){
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <MenuSelect+0x42>
			curtext[i] = ' ';
     3e6:	e8 2f       	mov	r30, r24
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	eb 59       	subi	r30, 0x9B	; 155
     3ec:	fd 4f       	sbci	r31, 0xFD	; 253
     3ee:	90 83       	st	Z, r25
		if (pos == TEXTLEN)
			pos--;

		curtext[pos++] = key + 48; // from digit to asci simbol of digit

		for (char i = pos; i < TEXTLEN; i++){
     3f0:	8f 5f       	subi	r24, 0xFF	; 255
     3f2:	80 31       	cpi	r24, 0x10	; 16
     3f4:	c0 f3       	brcs	.-16     	; 0x3e6 <MenuSelect+0x36>
			curtext[i] = ' ';
		}

		LCDSendCommand(DD_RAM_ADDR2);
     3f6:	80 ec       	ldi	r24, 0xC0	; 192
     3f8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
		LCDSendUnsafeCounteredTxt(curtext, TEXTLEN);
     3fc:	85 e6       	ldi	r24, 0x65	; 101
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	60 e1       	ldi	r22, 0x10	; 16
     402:	0e 94 71 05 	call	0xae2	; 0xae2 <LCDSendUnsafeCounteredTxt>
     406:	1d c1       	rjmp	.+570    	; 0x642 <MenuSelect+0x292>

	}else{ // command buttons
		if (key == NOBUT)
		{
			if (is_timer){ // game already started
     408:	80 91 5a 02 	lds	r24, 0x025A
     40c:	88 23       	and	r24, r24
     40e:	d9 f0       	breq	.+54     	; 0x446 <MenuSelect+0x96>
				menu_pos = ESTOP;
     410:	10 92 13 02 	sts	0x0213, r1
				LCDSendCommand(CLR_DISP); 
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
				LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
     41a:	80 91 13 02 	lds	r24, 0x0213
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	44 e0       	ldi	r20, 0x04	; 4
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	4a 95       	dec	r20
     428:	e1 f7       	brne	.-8      	; 0x422 <MenuSelect+0x72>
     42a:	8d 55       	subi	r24, 0x5D	; 93
     42c:	9e 4f       	sbci	r25, 0xFE	; 254
     42e:	60 e1       	ldi	r22, 0x10	; 16
     430:	0e 94 71 05 	call	0xae2	; 0xae2 <LCDSendUnsafeCounteredTxt>
     434:	e5 e6       	ldi	r30, 0x65	; 101
     436:	f2 e0       	ldi	r31, 0x02	; 2
				for (char i = 0; i < TEXTLEN; i++)
					curtext[i] = ' ';
     438:	80 e2       	ldi	r24, 0x20	; 32
     43a:	81 93       	st	Z+, r24
		{
			if (is_timer){ // game already started
				menu_pos = ESTOP;
				LCDSendCommand(CLR_DISP); 
				LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
				for (char i = 0; i < TEXTLEN; i++)
     43c:	92 e0       	ldi	r25, 0x02	; 2
     43e:	e5 37       	cpi	r30, 0x75	; 117
     440:	f9 07       	cpc	r31, r25
     442:	d9 f7       	brne	.-10     	; 0x43a <MenuSelect+0x8a>
     444:	20 c0       	rjmp	.+64     	; 0x486 <MenuSelect+0xd6>
					curtext[i] = ' ';
				pos = 0;
			}else{ // game not started
				if (is_admin){
     446:	80 91 58 02 	lds	r24, 0x0258
     44a:	88 23       	and	r24, r24
     44c:	49 f0       	breq	.+18     	; 0x460 <MenuSelect+0xb0>
					if (++menu_pos == MENUCOUNT)
     44e:	80 91 13 02 	lds	r24, 0x0213
     452:	8f 5f       	subi	r24, 0xFF	; 255
     454:	80 93 13 02 	sts	0x0213, r24
     458:	87 30       	cpi	r24, 0x07	; 7
     45a:	29 f4       	brne	.+10     	; 0x466 <MenuSelect+0xb6>
						menu_pos = SADMIN; 
     45c:	83 e0       	ldi	r24, 0x03	; 3
     45e:	01 c0       	rjmp	.+2      	; 0x462 <MenuSelect+0xb2>
				}else{
					menu_pos = ESTART; 
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 13 02 	sts	0x0213, r24
				}
			
				LCDSendCommand(CLR_DISP); 
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
				LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
     46c:	80 91 13 02 	lds	r24, 0x0213
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	34 e0       	ldi	r19, 0x04	; 4
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	3a 95       	dec	r19
     47a:	e1 f7       	brne	.-8      	; 0x474 <MenuSelect+0xc4>
     47c:	8d 55       	subi	r24, 0x5D	; 93
     47e:	9e 4f       	sbci	r25, 0xFE	; 254
     480:	60 e1       	ldi	r22, 0x10	; 16
     482:	0e 94 71 05 	call	0xae2	; 0xae2 <LCDSendUnsafeCounteredTxt>
     486:	e5 e6       	ldi	r30, 0x65	; 101
     488:	f2 e0       	ldi	r31, 0x02	; 2
			}

		}

		for (char i = 0; i < TEXTLEN; i++)
			curtext[i] = ' ';
     48a:	80 e2       	ldi	r24, 0x20	; 32
     48c:	d3 c0       	rjmp	.+422    	; 0x634 <MenuSelect+0x284>
			
				LCDSendCommand(CLR_DISP); 
				LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
			}
		}else{ // OKBUT try to enter some value
			switch (menu_pos){
     48e:	10 91 13 02 	lds	r17, 0x0213
     492:	13 30       	cpi	r17, 0x03	; 3
     494:	09 f4       	brne	.+2      	; 0x498 <MenuSelect+0xe8>
     496:	5a c0       	rjmp	.+180    	; 0x54c <MenuSelect+0x19c>
     498:	14 30       	cpi	r17, 0x04	; 4
     49a:	28 f4       	brcc	.+10     	; 0x4a6 <MenuSelect+0xf6>
     49c:	11 30       	cpi	r17, 0x01	; 1
     49e:	f9 f0       	breq	.+62     	; 0x4de <MenuSelect+0x12e>
     4a0:	12 30       	cpi	r17, 0x02	; 2
     4a2:	c0 f5       	brcc	.+112    	; 0x514 <MenuSelect+0x164>
     4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <MenuSelect+0x108>
     4a6:	15 30       	cpi	r17, 0x05	; 5
     4a8:	09 f4       	brne	.+2      	; 0x4ac <MenuSelect+0xfc>
     4aa:	77 c0       	rjmp	.+238    	; 0x59a <MenuSelect+0x1ea>
     4ac:	15 30       	cpi	r17, 0x05	; 5
     4ae:	08 f4       	brcc	.+2      	; 0x4b2 <MenuSelect+0x102>
     4b0:	65 c0       	rjmp	.+202    	; 0x57c <MenuSelect+0x1cc>
     4b2:	16 30       	cpi	r17, 0x06	; 6
     4b4:	41 f7       	brne	.-48     	; 0x486 <MenuSelect+0xd6>
     4b6:	89 c0       	rjmp	.+274    	; 0x5ca <MenuSelect+0x21a>

				case ESTOP:
					if ( StrCmp(curtext, stopcode, TEXTLEN) ){
     4b8:	85 e6       	ldi	r24, 0x65	; 101
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	64 e3       	ldi	r22, 0x34	; 52
     4be:	72 e0       	ldi	r23, 0x02	; 2
     4c0:	40 e1       	ldi	r20, 0x10	; 16
     4c2:	0e 94 67 00 	call	0xce	; 0xce <StrCmp>
     4c6:	88 23       	and	r24, r24
     4c8:	99 f4       	brne	.+38     	; 0x4f0 <MenuSelect+0x140>
						LCDSendCommand(DD_RAM_ADDR2);
						LCDSendTxt(WRONGCODE);
					}else{
						LCDSendCommand(DD_RAM_ADDR2);
     4ca:	80 ec       	ldi	r24, 0xC0	; 192
     4cc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
						LCDSendTxt(CODEOK);
     4d0:	86 e3       	ldi	r24, 0x36	; 54
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCDSendTxt>
						GamePaused();
     4d8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <GamePaused>
     4dc:	d4 cf       	rjmp	.-88     	; 0x486 <MenuSelect+0xd6>
					}
					break;

				case ESTART:
					if ( StrCmp(curtext, startcode, TEXTLEN) ){
     4de:	85 e6       	ldi	r24, 0x65	; 101
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	64 e2       	ldi	r22, 0x24	; 36
     4e4:	72 e0       	ldi	r23, 0x02	; 2
     4e6:	40 e1       	ldi	r20, 0x10	; 16
     4e8:	0e 94 67 00 	call	0xce	; 0xce <StrCmp>
     4ec:	88 23       	and	r24, r24
     4ee:	31 f0       	breq	.+12     	; 0x4fc <MenuSelect+0x14c>
						LCDSendCommand(DD_RAM_ADDR2);
     4f0:	80 ec       	ldi	r24, 0xC0	; 192
     4f2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
						LCDSendTxt(WRONGCODE);
     4f6:	85 e2       	ldi	r24, 0x25	; 37
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	1a c0       	rjmp	.+52     	; 0x530 <MenuSelect+0x180>
					}else{
						LCDSendCommand(DD_RAM_ADDR2);
     4fc:	80 ec       	ldi	r24, 0xC0	; 192
     4fe:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
						LCDSendTxt(CODEOK);
     502:	86 e3       	ldi	r24, 0x36	; 54
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCDSendTxt>
						is_timer = 1;
     50a:	10 93 5a 02 	sts	0x025A, r17
						is_game = 1;
     50e:	10 93 59 02 	sts	0x0259, r17
     512:	b9 cf       	rjmp	.-142    	; 0x486 <MenuSelect+0xd6>
					}
					break;

				case EADMIN:
					if ( StrCmp(curtext, adminpass, TEXTLEN) ){
     514:	85 e6       	ldi	r24, 0x65	; 101
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	64 e1       	ldi	r22, 0x14	; 20
     51a:	72 e0       	ldi	r23, 0x02	; 2
     51c:	40 e1       	ldi	r20, 0x10	; 16
     51e:	0e 94 67 00 	call	0xce	; 0xce <StrCmp>
     522:	88 23       	and	r24, r24
     524:	41 f0       	breq	.+16     	; 0x536 <MenuSelect+0x186>
						LCDSendCommand(DD_RAM_ADDR2);
     526:	80 ec       	ldi	r24, 0xC0	; 192
     528:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
						LCDSendTxt(WRONGPASS);
     52c:	87 e4       	ldi	r24, 0x47	; 71
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCDSendTxt>
     534:	a8 cf       	rjmp	.-176    	; 0x486 <MenuSelect+0xd6>
					}else{
						LCDSendCommand(DD_RAM_ADDR2);
     536:	80 ec       	ldi	r24, 0xC0	; 192
     538:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
						LCDSendTxt(CORRECTPASS);
     53c:	88 e5       	ldi	r24, 0x58	; 88
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCDSendTxt>
						is_admin = 1;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	80 93 58 02 	sts	0x0258, r24
     54a:	9d cf       	rjmp	.-198    	; 0x486 <MenuSelect+0xd6>
					}
					break;

				case SADMIN:
					StrCp(curtext, adminpass, TEXTLEN);
     54c:	85 e6       	ldi	r24, 0x65	; 101
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	64 e1       	ldi	r22, 0x14	; 20
     552:	72 e0       	ldi	r23, 0x02	; 2
     554:	40 e1       	ldi	r20, 0x10	; 16
     556:	0e 94 79 00 	call	0xf2	; 0xf2 <StrCp>

					addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_ADMPASS;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	80 93 62 02 	sts	0x0262, r24
					eeprom_write_block (adminpass, addrr, TEXTLEN);
     560:	84 e1       	ldi	r24, 0x14	; 20
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	40 e1       	ldi	r20, 0x10	; 16
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	0e 94 03 0a 	call	0x1406	; 0x1406 <__eewr_block_m128>

					LCDSendCommand(DD_RAM_ADDR2);
     570:	80 ec       	ldi	r24, 0xC0	; 192
     572:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
					LCDSendTxt(CORRECTPASS);
     576:	88 e5       	ldi	r24, 0x58	; 88
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	da cf       	rjmp	.-76     	; 0x530 <MenuSelect+0x180>
					break;

				case SSTART:
					StrCp(curtext, startcode, TEXTLEN);
     57c:	85 e6       	ldi	r24, 0x65	; 101
     57e:	92 e0       	ldi	r25, 0x02	; 2
     580:	64 e2       	ldi	r22, 0x24	; 36
     582:	72 e0       	ldi	r23, 0x02	; 2
     584:	40 e1       	ldi	r20, 0x10	; 16
     586:	0e 94 79 00 	call	0xf2	; 0xf2 <StrCp>

					addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STARTCODE;
     58a:	81 e1       	ldi	r24, 0x11	; 17
     58c:	80 93 62 02 	sts	0x0262, r24
					eeprom_write_block (startcode, addrr, TEXTLEN);
     590:	84 e2       	ldi	r24, 0x24	; 36
     592:	92 e0       	ldi	r25, 0x02	; 2
     594:	61 e1       	ldi	r22, 0x11	; 17
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	0e c0       	rjmp	.+28     	; 0x5b6 <MenuSelect+0x206>
					LCDSendCommand(DD_RAM_ADDR2);
					LCDSendTxt(CODEOK);
					break;

				case SSTOP:
					StrCp(curtext, stopcode, TEXTLEN);
     59a:	85 e6       	ldi	r24, 0x65	; 101
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	64 e3       	ldi	r22, 0x34	; 52
     5a0:	72 e0       	ldi	r23, 0x02	; 2
     5a2:	40 e1       	ldi	r20, 0x10	; 16
     5a4:	0e 94 79 00 	call	0xf2	; 0xf2 <StrCp>

					addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STOPCODE;
     5a8:	81 e2       	ldi	r24, 0x21	; 33
     5aa:	80 93 62 02 	sts	0x0262, r24
					eeprom_write_block (stopcode, addrr, TEXTLEN);
     5ae:	84 e3       	ldi	r24, 0x34	; 52
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	61 e2       	ldi	r22, 0x21	; 33
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	40 e1       	ldi	r20, 0x10	; 16
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	0e 94 03 0a 	call	0x1406	; 0x1406 <__eewr_block_m128>
	
					LCDSendCommand(DD_RAM_ADDR2);
     5be:	80 ec       	ldi	r24, 0xC0	; 192
     5c0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
					LCDSendTxt(CODEOK);
     5c4:	86 e3       	ldi	r24, 0x36	; 54
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	b3 cf       	rjmp	.-154    	; 0x530 <MenuSelect+0x180>
					break;
     5ca:	e5 e6       	ldi	r30, 0x65	; 101
     5cc:	f2 e0       	ldi	r31, 0x02	; 2

				case STIMER:

					for (char i = 0; i < TEXTLEN; i++)
						if (curtext[i] == ' ')
     5ce:	80 81       	ld	r24, Z
     5d0:	80 32       	cpi	r24, 0x20	; 32
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <MenuSelect+0x226>
							curtext[i] = 0;	
     5d4:	10 82       	st	Z, r1
     5d6:	31 96       	adiw	r30, 0x01	; 1
					LCDSendTxt(CODEOK);
					break;

				case STIMER:

					for (char i = 0; i < TEXTLEN; i++)
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	e5 37       	cpi	r30, 0x75	; 117
     5dc:	f8 07       	cpc	r31, r24
     5de:	b9 f7       	brne	.-18     	; 0x5ce <MenuSelect+0x21e>
						if (curtext[i] == ' ')
							curtext[i] = 0;	
					timer_init_val = atoi(curtext);
     5e0:	cf 01       	movw	r24, r30
     5e2:	40 97       	sbiw	r24, 0x10	; 16
     5e4:	0e 94 87 07 	call	0xf0e	; 0xf0e <atoi>
     5e8:	ac 01       	movw	r20, r24
     5ea:	66 27       	eor	r22, r22
     5ec:	57 fd       	sbrc	r21, 7
     5ee:	60 95       	com	r22
     5f0:	76 2f       	mov	r23, r22
     5f2:	40 93 54 02 	sts	0x0254, r20
     5f6:	50 93 55 02 	sts	0x0255, r21
     5fa:	60 93 56 02 	sts	0x0256, r22
     5fe:	70 93 57 02 	sts	0x0257, r23
					timer_cur = timer_init_val;
     602:	40 93 5d 02 	sts	0x025D, r20
     606:	50 93 5e 02 	sts	0x025E, r21
     60a:	60 93 5f 02 	sts	0x025F, r22
     60e:	70 93 60 02 	sts	0x0260, r23

					addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_TIMER;
     612:	81 e3       	ldi	r24, 0x31	; 49
     614:	80 93 62 02 	sts	0x0262, r24
					eeprom_write_dword (addrr, timer_init_val);
     618:	81 e3       	ldi	r24, 0x31	; 49
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__eewr_dword_m128>

					LCDSendCommand(DD_RAM_ADDR2);
     620:	80 ec       	ldi	r24, 0xC0	; 192
     622:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
					LCDSendTxt(TIMEROK);
     626:	89 e6       	ldi	r24, 0x69	; 105
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCDSendTxt>
					is_admin = 0;
     62e:	10 92 58 02 	sts	0x0258, r1
					break;
     632:	29 cf       	rjmp	.-430    	; 0x486 <MenuSelect+0xd6>
			}

		}

		for (char i = 0; i < TEXTLEN; i++)
			curtext[i] = ' ';
     634:	81 93       	st	Z+, r24

			}

		}

		for (char i = 0; i < TEXTLEN; i++)
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	e5 37       	cpi	r30, 0x75	; 117
     63a:	f9 07       	cpc	r31, r25
     63c:	d9 f7       	brne	.-10     	; 0x634 <MenuSelect+0x284>
			curtext[i] = ' ';
		pos = 0;
     63e:	10 92 63 02 	sts	0x0263, r1
			
	}

	return 0;
}
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	1f 91       	pop	r17
     646:	08 95       	ret

00000648 <Port_Init>:

//---------------------------------------------------------------

void Port_Init()
{
	PORTA = 0b00000000;		DDRA = 0b11000000;
     648:	1b ba       	out	0x1b, r1	; 27
     64a:	80 ec       	ldi	r24, 0xC0	; 192
     64c:	8a bb       	out	0x1a, r24	; 26
//	PORTB = 0b00000000;		DDRB = 0b00000000;
	LCDPORT = 0b00000000;	DDRC = 0b11110111;
     64e:	15 ba       	out	0x15, r1	; 21
     650:	87 ef       	ldi	r24, 0xF7	; 247
     652:	84 bb       	out	0x14, r24	; 20
//	PORTD = 0b11000000;		DDRD = 0b00001000;
//	PORTE = 0b00000000;		DDRE = 0b00110000;
//	PORTF = 0b00000000;		DDRF = 0b00000000;	
//	PORTG = 0b00000000;		DDRG = 0b00000000;
}
     654:	08 95       	ret

00000656 <__vector_14>:

//---------------------------------------------------------------

ISR (TIMER1_OVF_vect)
{
     656:	1f 92       	push	r1
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	0f 92       	push	r0
     65e:	0b b6       	in	r0, 0x3b	; 59
     660:	0f 92       	push	r0
     662:	11 24       	eor	r1, r1
     664:	2f 93       	push	r18
     666:	3f 93       	push	r19
     668:	4f 93       	push	r20
     66a:	5f 93       	push	r21
     66c:	6f 93       	push	r22
     66e:	7f 93       	push	r23
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	af 93       	push	r26
     676:	bf 93       	push	r27
     678:	ef 93       	push	r30
     67a:	ff 93       	push	r31
	static char key = 0;
	TCNT1 = 65536- 6244; //  31220;
     67c:	8c e9       	ldi	r24, 0x9C	; 156
     67e:	97 ee       	ldi	r25, 0xE7	; 231
     680:	9d bd       	out	0x2d, r25	; 45
     682:	8c bd       	out	0x2c, r24	; 44
    TCCR1B = (1<<CS12);
     684:	84 e0       	ldi	r24, 0x04	; 4
     686:	8e bd       	out	0x2e, r24	; 46
    TIMSK |= (1<<TOIE1);
     688:	87 b7       	in	r24, 0x37	; 55
     68a:	84 60       	ori	r24, 0x04	; 4
     68c:	87 bf       	out	0x37, r24	; 55

	PrintToSevenSeg(timer_cur);
     68e:	60 91 5d 02 	lds	r22, 0x025D
     692:	70 91 5e 02 	lds	r23, 0x025E
     696:	80 91 5f 02 	lds	r24, 0x025F
     69a:	90 91 60 02 	lds	r25, 0x0260
     69e:	0e 94 0c 01 	call	0x218	; 0x218 <PrintToSevenSeg>

	if (!is_key)
     6a2:	80 91 5b 02 	lds	r24, 0x025B
     6a6:	88 23       	and	r24, r24
     6a8:	29 f4       	brne	.+10     	; 0x6b4 <__vector_14+0x5e>
		is_key = CheckKey();
     6aa:	0e 94 9c 01 	call	0x338	; 0x338 <CheckKey>
     6ae:	80 93 5b 02 	sts	0x025B, r24
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <__vector_14+0x62>
	else
		CheckState(is_key);
     6b4:	0e 94 b4 01 	call	0x368	; 0x368 <CheckState>

	key = GetButton();
     6b8:	0e 94 b4 00 	call	0x168	; 0x168 <GetButton>
     6bc:	80 93 61 02 	sts	0x0261, r24
	if (key)
     6c0:	88 23       	and	r24, r24
     6c2:	11 f0       	breq	.+4      	; 0x6c8 <__vector_14+0x72>
		MenuSelect(key);
     6c4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MenuSelect>

}
     6c8:	ff 91       	pop	r31
     6ca:	ef 91       	pop	r30
     6cc:	bf 91       	pop	r27
     6ce:	af 91       	pop	r26
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	7f 91       	pop	r23
     6d6:	6f 91       	pop	r22
     6d8:	5f 91       	pop	r21
     6da:	4f 91       	pop	r20
     6dc:	3f 91       	pop	r19
     6de:	2f 91       	pop	r18
     6e0:	0f 90       	pop	r0
     6e2:	0b be       	out	0x3b, r0	; 59
     6e4:	0f 90       	pop	r0
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	0f 90       	pop	r0
     6ea:	1f 90       	pop	r1
     6ec:	18 95       	reti

000006ee <__vector_29>:

//---------------------------------------------------------------

ISR (TIMER3_OVF_vect)
{
     6ee:	1f 92       	push	r1
     6f0:	0f 92       	push	r0
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	0f 92       	push	r0
     6f6:	0b b6       	in	r0, 0x3b	; 59
     6f8:	0f 92       	push	r0
     6fa:	11 24       	eor	r1, r1
     6fc:	2f 93       	push	r18
     6fe:	3f 93       	push	r19
     700:	4f 93       	push	r20
     702:	5f 93       	push	r21
     704:	6f 93       	push	r22
     706:	7f 93       	push	r23
     708:	8f 93       	push	r24
     70a:	9f 93       	push	r25
     70c:	af 93       	push	r26
     70e:	bf 93       	push	r27
     710:	ef 93       	push	r30
     712:	ff 93       	push	r31
	TCNT3 = 65536- 62439; 
     714:	89 e1       	ldi	r24, 0x19	; 25
     716:	9c e0       	ldi	r25, 0x0C	; 12
     718:	90 93 89 00 	sts	0x0089, r25
     71c:	80 93 88 00 	sts	0x0088, r24
//    TCCR3B = (1<<CS12);
    ETIMSK |= (1<<TOIE3);
     720:	80 91 7d 00 	lds	r24, 0x007D
     724:	84 60       	ori	r24, 0x04	; 4
     726:	80 93 7d 00 	sts	0x007D, r24


	if (is_timer){
     72a:	80 91 5a 02 	lds	r24, 0x025A
     72e:	88 23       	and	r24, r24
     730:	e9 f0       	breq	.+58     	; 0x76c <__vector_29+0x7e>
		if (!(--timer_cur))
     732:	80 91 5d 02 	lds	r24, 0x025D
     736:	90 91 5e 02 	lds	r25, 0x025E
     73a:	a0 91 5f 02 	lds	r26, 0x025F
     73e:	b0 91 60 02 	lds	r27, 0x0260
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	a1 09       	sbc	r26, r1
     746:	b1 09       	sbc	r27, r1
     748:	80 93 5d 02 	sts	0x025D, r24
     74c:	90 93 5e 02 	sts	0x025E, r25
     750:	a0 93 5f 02 	sts	0x025F, r26
     754:	b0 93 60 02 	sts	0x0260, r27
     758:	00 97       	sbiw	r24, 0x00	; 0
     75a:	a1 05       	cpc	r26, r1
     75c:	b1 05       	cpc	r27, r1
     75e:	11 f4       	brne	.+4      	; 0x764 <__vector_29+0x76>
			MakeBoom();	
     760:	0e 94 74 01 	call	0x2e8	; 0x2e8 <MakeBoom>
		
		INVBIT(PORTA,6);
     764:	8b b3       	in	r24, 0x1b	; 27
     766:	90 e4       	ldi	r25, 0x40	; 64
     768:	89 27       	eor	r24, r25
     76a:	8b bb       	out	0x1b, r24	; 27
	}	
}
     76c:	ff 91       	pop	r31
     76e:	ef 91       	pop	r30
     770:	bf 91       	pop	r27
     772:	af 91       	pop	r26
     774:	9f 91       	pop	r25
     776:	8f 91       	pop	r24
     778:	7f 91       	pop	r23
     77a:	6f 91       	pop	r22
     77c:	5f 91       	pop	r21
     77e:	4f 91       	pop	r20
     780:	3f 91       	pop	r19
     782:	2f 91       	pop	r18
     784:	0f 90       	pop	r0
     786:	0b be       	out	0x3b, r0	; 59
     788:	0f 90       	pop	r0
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <GetSavedData>:
{
	char addr = 0;

	//get admin pass
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_ADMPASS;
	eeprom_read_block (adminpass, addr, TEXTLEN);
     792:	84 e1       	ldi	r24, 0x14	; 20
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	40 e1       	ldi	r20, 0x10	; 16
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	0e 94 ed 09 	call	0x13da	; 0x13da <__eerd_block_m128>

	//get start code
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STARTCODE;
	eeprom_read_block (startcode, addr, TEXTLEN);
     7a2:	84 e2       	ldi	r24, 0x24	; 36
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	61 e1       	ldi	r22, 0x11	; 17
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	40 e1       	ldi	r20, 0x10	; 16
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	0e 94 ed 09 	call	0x13da	; 0x13da <__eerd_block_m128>

	//get stop code
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STOPCODE;
	eeprom_read_block (stopcode, addr, TEXTLEN);
     7b2:	84 e3       	ldi	r24, 0x34	; 52
     7b4:	92 e0       	ldi	r25, 0x02	; 2
     7b6:	61 e2       	ldi	r22, 0x21	; 33
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	40 e1       	ldi	r20, 0x10	; 16
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	0e 94 ed 09 	call	0x13da	; 0x13da <__eerd_block_m128>
	

	// get timer initial value
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_TIMER;
	timer_init_val = eeprom_read_dword(addr);
     7c2:	81 e3       	ldi	r24, 0x31	; 49
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__eerd_dword_m128>
     7ca:	60 93 54 02 	sts	0x0254, r22
     7ce:	70 93 55 02 	sts	0x0255, r23
     7d2:	80 93 56 02 	sts	0x0256, r24
     7d6:	90 93 57 02 	sts	0x0257, r25
	

	//get keyID
	addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_KEY;
	eeprom_read_block (keyid, addr, KEYIDLEN);
     7da:	84 e4       	ldi	r24, 0x44	; 68
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	61 e4       	ldi	r22, 0x41	; 65
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	48 e0       	ldi	r20, 0x08	; 8
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	0e 94 ed 09 	call	0x13da	; 0x13da <__eerd_block_m128>

	timer_cur = timer_init_val;
     7ea:	80 91 54 02 	lds	r24, 0x0254
     7ee:	90 91 55 02 	lds	r25, 0x0255
     7f2:	a0 91 56 02 	lds	r26, 0x0256
     7f6:	b0 91 57 02 	lds	r27, 0x0257
     7fa:	80 93 5d 02 	sts	0x025D, r24
     7fe:	90 93 5e 02 	sts	0x025E, r25
     802:	a0 93 5f 02 	sts	0x025F, r26
     806:	b0 93 60 02 	sts	0x0260, r27
	return 0;
}
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	08 95       	ret

0000080e <CheckResset>:

//---------------------------------------------------------------

void CheckResset()
{
	if (!(BUTTONPIN & 0b00000001)){
     80e:	c8 99       	sbic	0x19, 0	; 25
     810:	72 c0       	rjmp	.+228    	; 0x8f6 <CheckResset+0xe8>
		char addrr;

		addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_ADMPASS;
		eeprom_write_block (adminpass, addrr, TEXTLEN);
     812:	84 e1       	ldi	r24, 0x14	; 20
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	40 e1       	ldi	r20, 0x10	; 16
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	0e 94 03 0a 	call	0x1406	; 0x1406 <__eewr_block_m128>

		addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STARTCODE;
		eeprom_write_block (startcode, addrr, TEXTLEN);
     822:	84 e2       	ldi	r24, 0x24	; 36
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	61 e1       	ldi	r22, 0x11	; 17
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	40 e1       	ldi	r20, 0x10	; 16
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	0e 94 03 0a 	call	0x1406	; 0x1406 <__eewr_block_m128>

		addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_STOPCODE;
		eeprom_write_block (stopcode, addrr, TEXTLEN);
     832:	84 e3       	ldi	r24, 0x34	; 52
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	61 e2       	ldi	r22, 0x21	; 33
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	40 e1       	ldi	r20, 0x10	; 16
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	0e 94 03 0a 	call	0x1406	; 0x1406 <__eewr_block_m128>

		addrr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_TIMER;
		eeprom_write_dword (addrr, timer_init_val);
     842:	40 91 54 02 	lds	r20, 0x0254
     846:	50 91 55 02 	lds	r21, 0x0255
     84a:	60 91 56 02 	lds	r22, 0x0256
     84e:	70 91 57 02 	lds	r23, 0x0257
     852:	81 e3       	ldi	r24, 0x31	; 49
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__eewr_dword_m128>

		LCDSendCommand(CLR_DISP);
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
		LCDSendTxt("PUT THE KEY!");
     860:	8a e7       	ldi	r24, 0x7A	; 122
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCDSendTxt>

		char is_exit = 0;
		while (!is_exit) {
			if (!reset_ds1990(readedkeyid, KEYIDLEN))
     868:	8c e4       	ldi	r24, 0x4C	; 76
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	68 e0       	ldi	r22, 0x08	; 8
     86e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <reset_ds1990>
     872:	88 23       	and	r24, r24
     874:	c9 f3       	breq	.-14     	; 0x868 <CheckResset+0x5a>
				continue;

			if ( StrCmp(readedkeyid, keyid, KEYIDLEN) ){ // считываются разные ключи
     876:	8c e4       	ldi	r24, 0x4C	; 76
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	64 e4       	ldi	r22, 0x44	; 68
     87c:	72 e0       	ldi	r23, 0x02	; 2
     87e:	48 e0       	ldi	r20, 0x08	; 8
     880:	0e 94 67 00 	call	0xce	; 0xce <StrCmp>
     884:	88 23       	and	r24, r24
     886:	81 f0       	breq	.+32     	; 0x8a8 <CheckResset+0x9a>
				StrCp(readedkeyid, keyid, KEYIDLEN);
     888:	8c e4       	ldi	r24, 0x4C	; 76
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	64 e4       	ldi	r22, 0x44	; 68
     88e:	72 e0       	ldi	r23, 0x02	; 2
     890:	48 e0       	ldi	r20, 0x08	; 8
     892:	0e 94 79 00 	call	0xf2	; 0xf2 <StrCp>
				LCDSendCommand(CLR_DISP);
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
				LCDSendTxt("WRONG KEY READ!");
     89c:	87 e8       	ldi	r24, 0x87	; 135
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCDSendTxt>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	1e c0       	rjmp	.+60     	; 0x8e4 <CheckResset+0xd6>
			}else{										// считанные ключи совпали
				char addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_KEY;
				eeprom_write_block (keyid, addr, KEYIDLEN);
     8a8:	84 e4       	ldi	r24, 0x44	; 68
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	61 e4       	ldi	r22, 0x41	; 65
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	48 e0       	ldi	r20, 0x08	; 8
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	0e 94 03 0a 	call	0x1406	; 0x1406 <__eewr_block_m128>
				is_exit = 1;

				LCDSendCommand(CLR_DISP);
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
				LCDSendTxt("KEY READED!");
     8be:	87 e9       	ldi	r24, 0x97	; 151
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCDSendTxt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	93 e2       	ldi	r25, 0x23	; 35
     8ca:	a4 ef       	ldi	r26, 0xF4	; 244
     8cc:	81 50       	subi	r24, 0x01	; 1
     8ce:	90 40       	sbci	r25, 0x00	; 0
     8d0:	a0 40       	sbci	r26, 0x00	; 0
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <CheckResset+0xbe>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <CheckResset+0xc8>
     8d6:	00 00       	nop

				_delay_ms(5000);

				LCDSendCommand(CLR_DISP);
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>

				clear_key();
     8de:	0e 94 87 00 	call	0x10e	; 0x10e <clear_key>
				LCDSendCommand(CLR_DISP);
				LCDSendTxt("WRONG KEY READ!");
			}else{										// считанные ключи совпали
				char addr = EEPROMADR_STARTADDR + TEXTLEN * EEPROMADRORDER_KEY;
				eeprom_write_block (keyid, addr, KEYIDLEN);
				is_exit = 1;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	af e3       	ldi	r26, 0x3F	; 63
     8e6:	bc e9       	ldi	r27, 0x9C	; 156
     8e8:	11 97       	sbiw	r26, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <CheckResset+0xda>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <CheckResset+0xe0>
     8ee:	00 00       	nop

		LCDSendCommand(CLR_DISP);
		LCDSendTxt("PUT THE KEY!");

		char is_exit = 0;
		while (!is_exit) {
     8f0:	88 23       	and	r24, r24
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <CheckResset+0xe8>
     8f4:	b9 cf       	rjmp	.-142    	; 0x868 <CheckResset+0x5a>
     8f6:	08 95       	ret

000008f8 <main>:
//---------------------------------------------------------------


int main()
{
	Port_Init();
     8f8:	0e 94 24 03 	call	0x648	; 0x648 <Port_Init>

	LCD_Init();
     8fc:	0e 94 a5 04 	call	0x94a	; 0x94a <LCD_Init>
	LCDSendCommand(DISP_ON);
     900:	8c e0       	ldi	r24, 0x0C	; 12
     902:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
	LCDSendCommand(CLR_DISP);
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>



	CheckResset();
     90c:	0e 94 07 04 	call	0x80e	; 0x80e <CheckResset>

	GetSavedData();
     910:	0e 94 c9 03 	call	0x792	; 0x792 <GetSavedData>


	LCDSendUnsafeCounteredTxt(menu[menu_pos], TEXTLEN);
     914:	80 91 13 02 	lds	r24, 0x0213
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	54 e0       	ldi	r21, 0x04	; 4
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	5a 95       	dec	r21
     922:	e1 f7       	brne	.-8      	; 0x91c <main+0x24>
     924:	8d 55       	subi	r24, 0x5D	; 93
     926:	9e 4f       	sbci	r25, 0xFE	; 254
     928:	60 e1       	ldi	r22, 0x10	; 16
     92a:	0e 94 71 05 	call	0xae2	; 0xae2 <LCDSendUnsafeCounteredTxt>

	SetupTIMER1();
     92e:	0e 94 99 00 	call	0x132	; 0x132 <SetupTIMER1>
	SetupTIMER3();
     932:	0e 94 a4 00 	call	0x148	; 0x148 <SetupTIMER3>
     936:	ff cf       	rjmp	.-2      	; 0x936 <main+0x3e>

00000938 <E_Pulse>:

/*****************************L C D**************************/

void E_Pulse()
{
	LCDPORT = LCDPORT | 0b00000100;	//set E to high
     938:	aa 9a       	sbi	0x15, 2	; 21
     93a:	8f e9       	ldi	r24, 0x9F	; 159
     93c:	9f e0       	ldi	r25, 0x0F	; 15
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	f1 f7       	brne	.-4      	; 0x93e <E_Pulse+0x6>
     942:	00 c0       	rjmp	.+0      	; 0x944 <E_Pulse+0xc>
     944:	00 00       	nop
	_delay_ms(1) ;				//delay ~110ms
	LCDPORT = LCDPORT & 0b11111011;	//set E to low
     946:	aa 98       	cbi	0x15, 2	; 21
}
     948:	08 95       	ret

0000094a <LCD_Init>:

void LCD_Init()
{
     94a:	1f 93       	push	r17
	//LCD initialization
	//step by step (from Gosho) - from DATASHEET

	LCDPORT = LCDPORT & 0b11111110;
     94c:	a8 98       	cbi	0x15, 0	; 21
     94e:	8f ef       	ldi	r24, 0xFF	; 255
     950:	93 ec       	ldi	r25, 0xC3	; 195
     952:	a9 e0       	ldi	r26, 0x09	; 9
     954:	81 50       	subi	r24, 0x01	; 1
     956:	90 40       	sbci	r25, 0x00	; 0
     958:	a0 40       	sbci	r26, 0x00	; 0
     95a:	e1 f7       	brne	.-8      	; 0x954 <LCD_Init+0xa>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <LCD_Init+0x14>
     95e:	00 00       	nop
	
	_delay_ms(200);


	LCDPORT = 0b00110000;						//set D4, D5 port to 1
     960:	10 e3       	ldi	r17, 0x30	; 48
     962:	15 bb       	out	0x15, r17	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     964:	90 e1       	ldi	r25, 0x10	; 16
     966:	9a 95       	dec	r25
     968:	f1 f7       	brne	.-4      	; 0x966 <LCD_Init+0x1c>
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     96a:	0e 94 9c 04 	call	0x938	; 0x938 <E_Pulse>
     96e:	a0 e1       	ldi	r26, 0x10	; 16
     970:	aa 95       	dec	r26
     972:	f1 f7       	brne	.-4      	; 0x970 <LCD_Init+0x26>
	PORTDELAY 

	LCDPORT = 0b00110000;						//set D4, D5 port to 1
     974:	15 bb       	out	0x15, r17	; 21
     976:	b0 e1       	ldi	r27, 0x10	; 16
     978:	ba 95       	dec	r27
     97a:	f1 f7       	brne	.-4      	; 0x978 <LCD_Init+0x2e>
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     97c:	0e 94 9c 04 	call	0x938	; 0x938 <E_Pulse>
     980:	80 e1       	ldi	r24, 0x10	; 16
     982:	8a 95       	dec	r24
     984:	f1 f7       	brne	.-4      	; 0x982 <LCD_Init+0x38>
	PORTDELAY

	LCDPORT = 0b00110000;						//set D4, D5 port to 1
     986:	15 bb       	out	0x15, r17	; 21
     988:	90 e1       	ldi	r25, 0x10	; 16
     98a:	9a 95       	dec	r25
     98c:	f1 f7       	brne	.-4      	; 0x98a <LCD_Init+0x40>
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     98e:	0e 94 9c 04 	call	0x938	; 0x938 <E_Pulse>
     992:	a0 e1       	ldi	r26, 0x10	; 16
     994:	aa 95       	dec	r26
     996:	f1 f7       	brne	.-4      	; 0x994 <LCD_Init+0x4a>
	PORTDELAY

	LCDPORT = 0b00100000;						//set D4 to 0, D5 port to 1
     998:	80 e2       	ldi	r24, 0x20	; 32
     99a:	85 bb       	out	0x15, r24	; 21
     99c:	b0 e1       	ldi	r27, 0x10	; 16
     99e:	ba 95       	dec	r27
     9a0:	f1 f7       	brne	.-4      	; 0x99e <LCD_Init+0x54>
	PORTDELAY
	E_Pulse();								//high->low to E port (pulse)
     9a2:	0e 94 9c 04 	call	0x938	; 0x938 <E_Pulse>
}
     9a6:	1f 91       	pop	r17
     9a8:	08 95       	ret

000009aa <LCDSendCommand>:

void LCDSendCommand(unsigned char a)
{
     9aa:	df 93       	push	r29
     9ac:	cf 93       	push	r28
     9ae:	0f 92       	push	r0
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
	unsigned char data = 0b00001111 | a;					//get high 4 bits
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     9b4:	25 b3       	in	r18, 0x15	; 21
	E_Pulse();								//high->low to E port (pulse)
}

void LCDSendCommand(unsigned char a)
{
	unsigned char data = 0b00001111 | a;					//get high 4 bits
     9b6:	98 2f       	mov	r25, r24
     9b8:	9f 60       	ori	r25, 0x0F	; 15
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     9ba:	20 6f       	ori	r18, 0xF0	; 240
     9bc:	92 23       	and	r25, r18
     9be:	95 bb       	out	0x15, r25	; 21
     9c0:	90 e1       	ldi	r25, 0x10	; 16
     9c2:	9a 95       	dec	r25
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <LCDSendCommand+0x18>
	PORTDELAY
	LCDPORT = LCDPORT & 0b11111110;				//set RS port to 0
     9c6:	a8 98       	cbi	0x15, 0	; 21
     9c8:	e0 e1       	ldi	r30, 0x10	; 16
     9ca:	ea 95       	dec	r30
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <LCDSendCommand+0x20>
	PORTDELAY
	E_Pulse(); 
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	0e 94 9c 04 	call	0x938	; 0x938 <E_Pulse>
     9d4:	ef ec       	ldi	r30, 0xCF	; 207
     9d6:	f7 e0       	ldi	r31, 0x07	; 7
     9d8:	31 97       	sbiw	r30, 0x01	; 1
     9da:	f1 f7       	brne	.-4      	; 0x9d8 <LCDSendCommand+0x2e>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <LCDSendCommand+0x34>
     9de:	00 00       	nop
	
	_delay_us(500);                             //pulse to set D4-D7 bits

	data = a<<4;							//get low 4 bits
	LCDPORT = (LCDPORT & 0b00001111) | data;	//set D4-D7
     9e0:	95 b3       	in	r25, 0x15	; 21
	PORTDELAY
	E_Pulse(); 
	
	_delay_us(500);                             //pulse to set D4-D7 bits

	data = a<<4;							//get low 4 bits
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	82 95       	swap	r24
     9e6:	80 7f       	andi	r24, 0xF0	; 240
	LCDPORT = (LCDPORT & 0b00001111) | data;	//set D4-D7
     9e8:	9f 70       	andi	r25, 0x0F	; 15
     9ea:	89 2b       	or	r24, r25
     9ec:	85 bb       	out	0x15, r24	; 21
     9ee:	f0 e1       	ldi	r31, 0x10	; 16
     9f0:	fa 95       	dec	r31
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <LCDSendCommand+0x46>
	PORTDELAY
	LCDPORT = LCDPORT & 0b11111110;				//set RS port to 0 -> display set to command mode
     9f4:	a8 98       	cbi	0x15, 0	; 21
     9f6:	80 e1       	ldi	r24, 0x10	; 16
     9f8:	8a 95       	dec	r24
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <LCDSendCommand+0x4e>
	PORTDELAY
	E_Pulse();                              //pulse to set d4-d7 bits
     9fc:	0e 94 9c 04 	call	0x938	; 0x938 <E_Pulse>
     a00:	ef ec       	ldi	r30, 0xCF	; 207
     a02:	f7 e0       	ldi	r31, 0x07	; 7
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <LCDSendCommand+0x5a>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <LCDSendCommand+0x60>
     a0a:	00 00       	nop

	_delay_us(500);

}
     a0c:	0f 90       	pop	r0
     a0e:	cf 91       	pop	r28
     a10:	df 91       	pop	r29
     a12:	08 95       	ret

00000a14 <LCDSendChar>:

void LCDSendChar(unsigned char a)
{
     a14:	df 93       	push	r29
     a16:	cf 93       	push	r28
     a18:	0f 92       	push	r0
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
	unsigned char data = 0b00001111 | a;					//get high 4 bits
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     a1e:	25 b3       	in	r18, 0x15	; 21

}

void LCDSendChar(unsigned char a)
{
	unsigned char data = 0b00001111 | a;					//get high 4 bits
     a20:	98 2f       	mov	r25, r24
     a22:	9f 60       	ori	r25, 0x0F	; 15
	LCDPORT = (LCDPORT | 0b11110000) & data;	//set D4-D7
     a24:	20 6f       	ori	r18, 0xF0	; 240
     a26:	92 23       	and	r25, r18
     a28:	95 bb       	out	0x15, r25	; 21
     a2a:	90 e1       	ldi	r25, 0x10	; 16
     a2c:	9a 95       	dec	r25
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <LCDSendChar+0x18>
	PORTDELAY
	LCDPORT = LCDPORT | 0b00000001;				//set RS port to 1
     a30:	a8 9a       	sbi	0x15, 0	; 21
     a32:	e0 e1       	ldi	r30, 0x10	; 16
     a34:	ea 95       	dec	r30
     a36:	f1 f7       	brne	.-4      	; 0xa34 <LCDSendChar+0x20>
	PORTDELAY
	E_Pulse();                              //pulse to set D4-D7 bits
     a38:	89 83       	std	Y+1, r24	; 0x01
     a3a:	0e 94 9c 04 	call	0x938	; 0x938 <E_Pulse>
     a3e:	ef ec       	ldi	r30, 0xCF	; 207
     a40:	f7 e0       	ldi	r31, 0x07	; 7
     a42:	31 97       	sbiw	r30, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <LCDSendChar+0x2e>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <LCDSendChar+0x34>
     a48:	00 00       	nop

	_delay_us(500);

	data = a<<4;							//get low 4 bits
	LCDPORT = (LCDPORT & 0b00001111) | data;	//clear D4-D7
     a4a:	95 b3       	in	r25, 0x15	; 21
	PORTDELAY
	E_Pulse();                              //pulse to set D4-D7 bits

	_delay_us(500);

	data = a<<4;							//get low 4 bits
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	82 95       	swap	r24
     a50:	80 7f       	andi	r24, 0xF0	; 240
	LCDPORT = (LCDPORT & 0b00001111) | data;	//clear D4-D7
     a52:	9f 70       	andi	r25, 0x0F	; 15
     a54:	89 2b       	or	r24, r25
     a56:	85 bb       	out	0x15, r24	; 21
     a58:	f0 e1       	ldi	r31, 0x10	; 16
     a5a:	fa 95       	dec	r31
     a5c:	f1 f7       	brne	.-4      	; 0xa5a <LCDSendChar+0x46>
	PORTDELAY
	LCDPORT = LCDPORT | 0b00000001;				//set RS port to 1 -> display set to command mode
     a5e:	a8 9a       	sbi	0x15, 0	; 21
     a60:	80 e1       	ldi	r24, 0x10	; 16
     a62:	8a 95       	dec	r24
     a64:	f1 f7       	brne	.-4      	; 0xa62 <LCDSendChar+0x4e>
	PORTDELAY
	E_Pulse();                              //pulse to set d4-d7 bits
     a66:	0e 94 9c 04 	call	0x938	; 0x938 <E_Pulse>
     a6a:	ef ec       	ldi	r30, 0xCF	; 207
     a6c:	f7 e0       	ldi	r31, 0x07	; 7
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <LCDSendChar+0x5a>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <LCDSendChar+0x60>
     a74:	00 00       	nop

	_delay_us(500);
}
     a76:	0f 90       	pop	r0
     a78:	cf 91       	pop	r28
     a7a:	df 91       	pop	r29
     a7c:	08 95       	ret

00000a7e <LCDSendTxt>:

void LCDSendTxt(char* a)
{
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ff 92       	push	r15
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	df 93       	push	r29
     a8a:	cf 93       	push	r28
     a8c:	0f 92       	push	r0
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	f8 2e       	mov	r15, r24

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < strlen(a); Temp++)
     a94:	0f 2d       	mov	r16, r15
     a96:	19 2f       	mov	r17, r25
     a98:	cc 24       	eor	r12, r12
     a9a:	dd 24       	eor	r13, r13
     a9c:	0d c0       	rjmp	.+26     	; 0xab8 <LCDSendTxt+0x3a>
  {
    LCDSendChar(a[Temp]);
     a9e:	f8 01       	movw	r30, r16
     aa0:	81 91       	ld	r24, Z+
     aa2:	8f 01       	movw	r16, r30
     aa4:	99 83       	std	Y+1, r25	; 0x01
     aa6:	0e 94 0a 05 	call	0xa14	; 0xa14 <LCDSendChar>
     aaa:	f0 e1       	ldi	r31, 0x10	; 16
     aac:	fa 95       	dec	r31
     aae:	f1 f7       	brne	.-4      	; 0xaac <LCDSendTxt+0x2e>
{

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < strlen(a); Temp++)
     ab0:	08 94       	sec
     ab2:	c1 1c       	adc	r12, r1
     ab4:	d1 1c       	adc	r13, r1
     ab6:	99 81       	ldd	r25, Y+1	; 0x01
     ab8:	af 2d       	mov	r26, r15
     aba:	b9 2f       	mov	r27, r25
     abc:	fd 01       	movw	r30, r26
     abe:	01 90       	ld	r0, Z+
     ac0:	00 20       	and	r0, r0
     ac2:	e9 f7       	brne	.-6      	; 0xabe <LCDSendTxt+0x40>
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	ea 1b       	sub	r30, r26
     ac8:	fb 0b       	sbc	r31, r27
     aca:	ce 16       	cp	r12, r30
     acc:	df 06       	cpc	r13, r31
     ace:	38 f3       	brcs	.-50     	; 0xa9e <LCDSendTxt+0x20>
  {
    LCDSendChar(a[Temp]);
	TEXTDELAY
  }
}
     ad0:	0f 90       	pop	r0
     ad2:	cf 91       	pop	r28
     ad4:	df 91       	pop	r29
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	08 95       	ret

00000ae2 <LCDSendUnsafeCounteredTxt>:

void LCDSendUnsafeCounteredTxt(char* a, char count)
{
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < count; Temp++)
     aee:	08 2f       	mov	r16, r24
     af0:	19 2f       	mov	r17, r25
     af2:	c0 e0       	ldi	r28, 0x00	; 0
     af4:	d0 e0       	ldi	r29, 0x00	; 0
     af6:	e6 2e       	mov	r14, r22
     af8:	ff 24       	eor	r15, r15
     afa:	09 c0       	rjmp	.+18     	; 0xb0e <LCDSendUnsafeCounteredTxt+0x2c>
  {
    LCDSendChar(a[Temp]);
     afc:	f8 01       	movw	r30, r16
     afe:	81 91       	ld	r24, Z+
     b00:	8f 01       	movw	r16, r30
     b02:	0e 94 0a 05 	call	0xa14	; 0xa14 <LCDSendChar>
     b06:	f0 e1       	ldi	r31, 0x10	; 16
     b08:	fa 95       	dec	r31
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <LCDSendUnsafeCounteredTxt+0x26>
{

	//_delay_ms(1);

	int Temp;
	for(Temp=0; Temp < count; Temp++)
     b0c:	21 96       	adiw	r28, 0x01	; 1
     b0e:	ce 15       	cp	r28, r14
     b10:	df 05       	cpc	r29, r15
     b12:	a4 f3       	brlt	.-24     	; 0xafc <LCDSendUnsafeCounteredTxt+0x1a>
  {
    LCDSendChar(a[Temp]);
	TEXTDELAY
  }
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	08 95       	ret

00000b22 <LCDSendInt>:


void LCDSendInt(long a)
{
     b22:	4f 92       	push	r4
     b24:	5f 92       	push	r5
     b26:	6f 92       	push	r6
     b28:	7f 92       	push	r7
     b2a:	8f 92       	push	r8
     b2c:	9f 92       	push	r9
     b2e:	af 92       	push	r10
     b30:	bf 92       	push	r11
     b32:	cf 92       	push	r12
     b34:	df 92       	push	r13
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
     b3a:	1f 93       	push	r17
     b3c:	df 93       	push	r29
     b3e:	cf 93       	push	r28
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	a8 97       	sbiw	r28, 0x28	; 40
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	6b 01       	movw	r12, r22
     b52:	7c 01       	movw	r14, r24
	int C[20];
	unsigned char Temp=0, NumLen = 0;
	if (a < 0)
     b54:	97 ff       	sbrs	r25, 7
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <LCDSendInt+0x4c>
	{
		LCDSendChar('-');
     b58:	8d e2       	ldi	r24, 0x2D	; 45
     b5a:	0e 94 0a 05 	call	0xa14	; 0xa14 <LCDSendChar>
		a = -a;
     b5e:	f0 94       	com	r15
     b60:	e0 94       	com	r14
     b62:	d0 94       	com	r13
     b64:	c0 94       	com	r12
     b66:	c1 1c       	adc	r12, r1
     b68:	d1 1c       	adc	r13, r1
     b6a:	e1 1c       	adc	r14, r1
     b6c:	f1 1c       	adc	r15, r1
  }
}


void LCDSendInt(long a)
{
     b6e:	10 e0       	ldi	r17, 0x00	; 0
		a = -a;
	}
	do
	{	
		Temp++;
		C[Temp] = a % 10;
     b70:	2e 01       	movw	r4, r28
     b72:	08 94       	sec
     b74:	41 1c       	adc	r4, r1
     b76:	51 1c       	adc	r5, r1
     b78:	2a e0       	ldi	r18, 0x0A	; 10
     b7a:	62 2e       	mov	r6, r18
     b7c:	71 2c       	mov	r7, r1
     b7e:	81 2c       	mov	r8, r1
     b80:	91 2c       	mov	r9, r1
		LCDSendChar('-');
		a = -a;
	}
	do
	{	
		Temp++;
     b82:	1f 5f       	subi	r17, 0xFF	; 255
		C[Temp] = a % 10;
     b84:	a1 2e       	mov	r10, r17
     b86:	bb 24       	eor	r11, r11
     b88:	aa 0c       	add	r10, r10
     b8a:	bb 1c       	adc	r11, r11
     b8c:	a4 0c       	add	r10, r4
     b8e:	b5 1c       	adc	r11, r5
     b90:	c7 01       	movw	r24, r14
     b92:	b6 01       	movw	r22, r12
     b94:	a4 01       	movw	r20, r8
     b96:	93 01       	movw	r18, r6
     b98:	0e 94 36 07 	call	0xe6c	; 0xe6c <__divmodsi4>
     b9c:	f5 01       	movw	r30, r10
     b9e:	71 83       	std	Z+1, r23	; 0x01
     ba0:	60 83       	st	Z, r22
		a = a/10;
     ba2:	69 01       	movw	r12, r18
     ba4:	7a 01       	movw	r14, r20
	}
	while (a);
     ba6:	c1 14       	cp	r12, r1
     ba8:	d1 04       	cpc	r13, r1
     baa:	e1 04       	cpc	r14, r1
     bac:	f1 04       	cpc	r15, r1
     bae:	49 f7       	brne	.-46     	; 0xb82 <LCDSendInt+0x60>
     bb0:	0c c0       	rjmp	.+24     	; 0xbca <LCDSendInt+0xa8>
	NumLen = Temp;
	for (Temp = NumLen; Temp>0; Temp--) LCDSendChar(C[Temp] + 48);
     bb2:	e1 2f       	mov	r30, r17
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	ec 0d       	add	r30, r12
     bbc:	fd 1d       	adc	r31, r13
     bbe:	80 81       	ld	r24, Z
     bc0:	80 5d       	subi	r24, 0xD0	; 208
     bc2:	0e 94 0a 05 	call	0xa14	; 0xa14 <LCDSendChar>
     bc6:	11 50       	subi	r17, 0x01	; 1
     bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <LCDSendInt+0xb0>
     bca:	6e 01       	movw	r12, r28
     bcc:	08 94       	sec
     bce:	c1 1c       	adc	r12, r1
     bd0:	d1 1c       	adc	r13, r1
     bd2:	11 23       	and	r17, r17
     bd4:	71 f7       	brne	.-36     	; 0xbb2 <LCDSendInt+0x90>
}
     bd6:	a8 96       	adiw	r28, 0x28	; 40
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	1f 91       	pop	r17
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	7f 90       	pop	r7
     bfa:	6f 90       	pop	r6
     bfc:	5f 90       	pop	r5
     bfe:	4f 90       	pop	r4
     c00:	08 95       	ret

00000c02 <LCDSendInt_Old>:

void LCDSendInt_Old(int a)
{
     c02:	1f 93       	push	r17
  int h = 0;
  int l = 0;

  l = a%10;
  h = a/10;
     c04:	6a e0       	ldi	r22, 0x0A	; 10
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	0e 94 23 07 	call	0xe46	; 0xe46 <__divmodhi4>
     c0c:	18 2f       	mov	r17, r24

  LCDSendChar(h+48);
     c0e:	86 2f       	mov	r24, r22
     c10:	80 5d       	subi	r24, 0xD0	; 208
     c12:	0e 94 0a 05 	call	0xa14	; 0xa14 <LCDSendChar>
  LCDSendChar(l+48);
     c16:	81 2f       	mov	r24, r17
     c18:	80 5d       	subi	r24, 0xD0	; 208
     c1a:	0e 94 0a 05 	call	0xa14	; 0xa14 <LCDSendChar>
}
     c1e:	1f 91       	pop	r17
     c20:	08 95       	ret

00000c22 <SmartUp>:

void SmartUp(void)
{
	int Temp;
	for(Temp=0; Temp<1; Temp++) LCDSendCommand(CUR_UP);
     c22:	80 e8       	ldi	r24, 0x80	; 128
     c24:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
}
     c28:	08 95       	ret

00000c2a <SmartDown>:

void SmartDown(void)
{
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	c8 e2       	ldi	r28, 0x28	; 40
     c30:	d0 e0       	ldi	r29, 0x00	; 0
	int Temp;
	for(Temp=0; Temp<40; Temp++) LCDSendCommand(CUR_DOWN);
     c32:	80 ec       	ldi	r24, 0xC0	; 192
     c34:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCDSendCommand>
     c38:	21 97       	sbiw	r28, 0x01	; 1
     c3a:	d9 f7       	brne	.-10     	; 0xc32 <SmartDown+0x8>
}
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	08 95       	ret

00000c42 <Light>:

void Light(short a)
{
  if(a == 1)
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	91 05       	cpc	r25, r1
     c46:	29 f4       	brne	.+10     	; 0xc52 <Light+0x10>
  {
	LCDPORT = LCDPORT | 0b00100000;
     c48:	ad 9a       	sbi	0x15, 5	; 21
	DDRC = LCDPORT | 0b00100000;
     c4a:	85 b3       	in	r24, 0x15	; 21
     c4c:	80 62       	ori	r24, 0x20	; 32
     c4e:	84 bb       	out	0x14, r24	; 20
     c50:	08 95       	ret

    //IO0SET_bit.P0_25 = 1;
    //IO0DIR_bit.P0_25 = 1;
  }
  if(a == 0)
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	11 f4       	brne	.+4      	; 0xc5a <Light+0x18>
  {
    LCDPORT = LCDPORT & 0b11011111;
     c56:	ad 98       	cbi	0x15, 5	; 21
    DDRC = DDRC & 0b11011111;
     c58:	a5 98       	cbi	0x14, 5	; 20
     c5a:	08 95       	ret

00000c5c <send_ds1990_command>:

//Функция пересылки команд

void send_ds1990_command(unsigned char command)
{
cli();
     c5c:	f8 94       	cli
unsigned char data=command;
   for(i=0;i<8;i++)
     c5e:	10 92 76 02 	sts	0x0276, r1
     c62:	2d c0       	rjmp	.+90     	; 0xcbe <send_ds1990_command+0x62>
   {
   data=data<<7;        //Сдвиг на i разрядов влево
     c64:	98 2f       	mov	r25, r24
     c66:	97 95       	ror	r25
     c68:	99 27       	eor	r25, r25
     c6a:	97 95       	ror	r25
   command=command>>1;  //Сдвиг передаваемого байта
     c6c:	86 95       	lsr	r24
     if(data==0x00)       //Передача лог.0
     c6e:	99 23       	and	r25, r25
     c70:	a1 f4       	brne	.+40     	; 0xc9a <send_ds1990_command+0x3e>
     {
     DDRB&=~_BV(0);
     c72:	b8 98       	cbi	0x17, 0	; 23
     PORTB&=~_BV(0);          
     c74:	c0 98       	cbi	0x18, 0	; 24
     c76:	90 e5       	ldi	r25, 0x50	; 80
     c78:	9a 95       	dec	r25
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <send_ds1990_command+0x1c>
     _delay_us(15);  //10 мкс
     DDRB|=_BV(0);
     c7c:	b8 9a       	sbi	0x17, 0	; 23
     PORTB&=~_BV(0);
     c7e:	c0 98       	cbi	0x18, 0	; 24
     c80:	ef e8       	ldi	r30, 0x8F	; 143
     c82:	f1 e0       	ldi	r31, 0x01	; 1
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <send_ds1990_command+0x28>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <send_ds1990_command+0x2e>
     c8a:	00 00       	nop
     _delay_us(100);  //60 мкс
     DDRB|=_BV(0);
     c8c:	b8 9a       	sbi	0x17, 0	; 23
     PORTB|=_BV(0);     
     c8e:	c0 9a       	sbi	0x18, 0	; 24
     c90:	fa e0       	ldi	r31, 0x0A	; 10
     c92:	fa 95       	dec	r31
     c94:	f1 f7       	brne	.-4      	; 0xc92 <send_ds1990_command+0x36>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <send_ds1990_command+0x3c>
     c98:	0d c0       	rjmp	.+26     	; 0xcb4 <send_ds1990_command+0x58>
     _delay_us(6);   //Задержка примерно на 6 мкс
     DDRB&=~_BV(0);  
     PORTB&=~_BV(0);    
     _delay_us(10);   //Задержка примерно на 64 мкс */
	 
     DDRB&=~_BV(0);
     c9a:	b8 98       	cbi	0x17, 0	; 23
     PORTB&=~_BV(0);          
     c9c:	c0 98       	cbi	0x18, 0	; 24
     c9e:	90 e5       	ldi	r25, 0x50	; 80
     ca0:	9a 95       	dec	r25
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <send_ds1990_command+0x44>
     _delay_us(15);  //10 мкс
     DDRB|=_BV(0);
     ca4:	b8 9a       	sbi	0x17, 0	; 23
     PORTB|=_BV(0);     
     ca6:	c0 9a       	sbi	0x18, 0	; 24
     ca8:	ef e8       	ldi	r30, 0x8F	; 143
     caa:	f1 e0       	ldi	r31, 0x01	; 1
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <send_ds1990_command+0x50>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <send_ds1990_command+0x56>
     cb2:	00 00       	nop

void send_ds1990_command(unsigned char command)
{
cli();
unsigned char data=command;
   for(i=0;i<8;i++)
     cb4:	90 91 76 02 	lds	r25, 0x0276
     cb8:	9f 5f       	subi	r25, 0xFF	; 255
     cba:	90 93 76 02 	sts	0x0276, r25
     cbe:	90 91 76 02 	lds	r25, 0x0276
     cc2:	98 30       	cpi	r25, 0x08	; 8
     cc4:	78 f2       	brcs	.-98     	; 0xc64 <send_ds1990_command+0x8>
     _delay_us(100);   //Задержка примерно на 6 мкс
 	  
     }
   data=command;        //Новое значение для сдвига
   };
sei();
     cc6:	78 94       	sei
}
     cc8:	08 95       	ret

00000cca <check_key_id>:


//-------------------------------------------------------------------

char check_key_id(char* keyid, char keylen)
{
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
//LCDSendCommand(CLR_DISP);

	unsigned char bt = 0;
	for (int n = 0; n < keylen; n++)
     cd6:	28 2f       	mov	r18, r24
     cd8:	39 2f       	mov	r19, r25
     cda:	d9 01       	movw	r26, r18
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	70 e0       	ldi	r23, 0x00	; 0
	{
		bt = 0;
	    for(int n2 = 0;n2 < 8; n2++)
	    {
	 		if (buffer[n][n2]) {
				bt |= (1 << n2);
     ce2:	41 e0       	ldi	r20, 0x01	; 1
     ce4:	50 e0       	ldi	r21, 0x00	; 0
char check_key_id(char* keyid, char keylen)
{
//LCDSendCommand(CLR_DISP);

	unsigned char bt = 0;
	for (int n = 0; n < keylen; n++)
     ce6:	12 c0       	rjmp	.+36     	; 0xd0c <check_key_id+0x42>
	{
		bt = 0;
	    for(int n2 = 0;n2 < 8; n2++)
	    {
	 		if (buffer[n][n2]) {
     ce8:	01 91       	ld	r16, Z+
     cea:	00 23       	and	r16, r16
     cec:	41 f0       	breq	.+16     	; 0xcfe <check_key_id+0x34>
				bt |= (1 << n2);
     cee:	ea 01       	movw	r28, r20
     cf0:	02 2e       	mov	r0, r18
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <check_key_id+0x2e>
     cf4:	cc 0f       	add	r28, r28
     cf6:	dd 1f       	adc	r29, r29
     cf8:	0a 94       	dec	r0
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <check_key_id+0x2a>
     cfc:	1c 2b       	or	r17, r28

	unsigned char bt = 0;
	for (int n = 0; n < keylen; n++)
	{
		bt = 0;
	    for(int n2 = 0;n2 < 8; n2++)
     cfe:	2f 5f       	subi	r18, 0xFF	; 255
     d00:	3f 4f       	sbci	r19, 0xFF	; 255
     d02:	28 30       	cpi	r18, 0x08	; 8
     d04:	31 05       	cpc	r19, r1
     d06:	81 f7       	brne	.-32     	; 0xce8 <check_key_id+0x1e>
	    {
	 		if (buffer[n][n2]) {
				bt |= (1 << n2);
			}
	    }
		keyid[n]=bt;
     d08:	1d 93       	st	X+, r17
char check_key_id(char* keyid, char keylen)
{
//LCDSendCommand(CLR_DISP);

	unsigned char bt = 0;
	for (int n = 0; n < keylen; n++)
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	86 17       	cp	r24, r22
     d0e:	97 07       	cpc	r25, r23
     d10:	64 f4       	brge	.+24     	; 0xd2a <check_key_id+0x60>
char buffer[8][8];


//-------------------------------------------------------------------

char check_key_id(char* keyid, char keylen)
     d12:	fc 01       	movw	r30, r24
     d14:	23 e0       	ldi	r18, 0x03	; 3
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	2a 95       	dec	r18
     d1c:	e1 f7       	brne	.-8      	; 0xd16 <check_key_id+0x4c>
     d1e:	e9 58       	subi	r30, 0x89	; 137
     d20:	fd 4f       	sbci	r31, 0xFD	; 253
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	10 e0       	ldi	r17, 0x00	; 0
     d28:	df cf       	rjmp	.-66     	; 0xce8 <check_key_id+0x1e>
	    }
		keyid[n]=bt;
		//LCDSendUnsafeCounteredTxt(bt, 1);
	}    
	return 1;
}
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	08 95       	ret

00000d3a <read_ds1990>:

//Чтение

void read_ds1990(char* keyid, char keylen)
{ 
	cli(); 
     d3a:	f8 94       	cli
	  for(i = 0; i < 8; i++) // байтовый цикл
     d3c:	10 92 76 02 	sts	0x0276, r1
	    _delay_us(6); // ждем 9 мкс

	 
	            if(PINB & (1 << PINB0))
	            {
	            buffer[i][tcnt] = 1;
     d40:	41 e0       	ldi	r20, 0x01	; 1
//Чтение

void read_ds1990(char* keyid, char keylen)
{ 
	cli(); 
	  for(i = 0; i < 8; i++) // байтовый цикл
     d42:	3d c0       	rjmp	.+122    	; 0xdbe <read_ds1990+0x84>
	  {

	    for(tcnt = 0; tcnt < 8; tcnt++)          // битовый цикл
     d44:	10 92 75 02 	sts	0x0275, r1
     d48:	31 c0       	rjmp	.+98     	; 0xdac <read_ds1990+0x72>
	    {

	    DDRB|=_BV(0);
     d4a:	b8 9a       	sbi	0x17, 0	; 23
	    PORTB&=~_BV(0);
     d4c:	c0 98       	cbi	0x18, 0	; 24
     d4e:	30 e1       	ldi	r19, 0x10	; 16
     d50:	3a 95       	dec	r19
     d52:	f1 f7       	brne	.-4      	; 0xd50 <read_ds1990+0x16>
	    _delay_us(3);// ждем 6 мкс
	    PORTB&=~_BV(0);
     d54:	c0 98       	cbi	0x18, 0	; 24
	    DDRB&=~_BV(0);
     d56:	b8 98       	cbi	0x17, 0	; 23
     d58:	e0 e2       	ldi	r30, 0x20	; 32
     d5a:	ea 95       	dec	r30
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <read_ds1990+0x20>
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	e0 91 76 02 	lds	r30, 0x0276
	    _delay_us(6); // ждем 9 мкс

	 
	            if(PINB & (1 << PINB0))
     d64:	b0 9b       	sbis	0x16, 0	; 22
     d66:	0c c0       	rjmp	.+24     	; 0xd80 <read_ds1990+0x46>
	            {
	            buffer[i][tcnt] = 1;
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	73 e0       	ldi	r23, 0x03	; 3
     d6c:	ee 0f       	add	r30, r30
     d6e:	ff 1f       	adc	r31, r31
     d70:	7a 95       	dec	r23
     d72:	e1 f7       	brne	.-8      	; 0xd6c <read_ds1990+0x32>
     d74:	e2 0f       	add	r30, r18
     d76:	f3 1f       	adc	r31, r19
     d78:	e9 58       	subi	r30, 0x89	; 137
     d7a:	fd 4f       	sbci	r31, 0xFD	; 253
     d7c:	40 83       	st	Z, r20
     d7e:	0b c0       	rjmp	.+22     	; 0xd96 <read_ds1990+0x5c>
	            }
	            else
	            {
	            buffer[i][tcnt] = 0;
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	53 e0       	ldi	r21, 0x03	; 3
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	5a 95       	dec	r21
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <read_ds1990+0x4a>
     d8c:	e2 0f       	add	r30, r18
     d8e:	f3 1f       	adc	r31, r19
     d90:	e9 58       	subi	r30, 0x89	; 137
     d92:	fd 4f       	sbci	r31, 0xFD	; 253
     d94:	10 82       	st	Z, r1
     d96:	ef ed       	ldi	r30, 0xDF	; 223
     d98:	f1 e0       	ldi	r31, 0x01	; 1
     d9a:	31 97       	sbiw	r30, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <read_ds1990+0x60>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <read_ds1990+0x66>
     da0:	00 00       	nop
{ 
	cli(); 
	  for(i = 0; i < 8; i++) // байтовый цикл
	  {

	    for(tcnt = 0; tcnt < 8; tcnt++)          // битовый цикл
     da2:	20 91 75 02 	lds	r18, 0x0275
     da6:	2f 5f       	subi	r18, 0xFF	; 255
     da8:	20 93 75 02 	sts	0x0275, r18
     dac:	20 91 75 02 	lds	r18, 0x0275
     db0:	28 30       	cpi	r18, 0x08	; 8
     db2:	58 f2       	brcs	.-106    	; 0xd4a <read_ds1990+0x10>
//Чтение

void read_ds1990(char* keyid, char keylen)
{ 
	cli(); 
	  for(i = 0; i < 8; i++) // байтовый цикл
     db4:	20 91 76 02 	lds	r18, 0x0276
     db8:	2f 5f       	subi	r18, 0xFF	; 255
     dba:	20 93 76 02 	sts	0x0276, r18
     dbe:	20 91 76 02 	lds	r18, 0x0276
     dc2:	28 30       	cpi	r18, 0x08	; 8
     dc4:	08 f4       	brcc	.+2      	; 0xdc8 <read_ds1990+0x8e>
     dc6:	be cf       	rjmp	.-132    	; 0xd44 <read_ds1990+0xa>
		_delay_us(120);
	    }
	    //_delay_ms(0.044);
	 }

	sei();
     dc8:	78 94       	sei
    return check_key_id(keyid, keylen);
     dca:	0e 94 65 06 	call	0xcca	; 0xcca <check_key_id>
}
     dce:	08 95       	ret

00000dd0 <reset_ds1990>:
//-------------------------------------------------------------------

//Функция сброса DS1990

char reset_ds1990(char* keyid, char keylen)
{
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	0f 92       	push	r0
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	8c 01       	movw	r16, r24
	DDRB|=_BV(0);        // Вывод порта настраиваем как выход
     de0:	b8 9a       	sbi	0x17, 0	; 23
	PORTB&=~_BV(0);
     de2:	c0 98       	cbi	0x18, 0	; 24

	cli();
     de4:	f8 94       	cli
     de6:	8f e0       	ldi	r24, 0x0F	; 15
     de8:	99 e0       	ldi	r25, 0x09	; 9
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <reset_ds1990+0x1a>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <reset_ds1990+0x20>
     df0:	00 00       	nop
	_delay_us(580); //Устанавливаем 0 в теч. около 480 мкс

	DDRB&=~_BV(0);       //Вывод порта настраиваем как вход
     df2:	b8 98       	cbi	0x17, 0	; 23
     df4:	e7 e1       	ldi	r30, 0x17	; 23
     df6:	f1 e0       	ldi	r31, 0x01	; 1
     df8:	31 97       	sbiw	r30, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <reset_ds1990+0x28>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <reset_ds1990+0x2e>
     dfe:	00 00       	nop
	_delay_us(70);  //Ожидание сигнала присутствия 70 мкс
   	if(PINB & (1<<PINB0))  //Если 1 - нет сигнала присутствия
     e00:	b0 9b       	sbis	0x16, 0	; 22
     e02:	09 c0       	rjmp	.+18     	; 0xe16 <reset_ds1990+0x46>
     e04:	87 e6       	ldi	r24, 0x67	; 103
     e06:	96 e0       	ldi	r25, 0x06	; 6
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <reset_ds1990+0x38>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <reset_ds1990+0x3e>
     e0e:	00 00       	nop
   	{
   		_delay_us(410); //410 мкс
   		sei();
     e10:	78 94       	sei
		return 0;
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	12 c0       	rjmp	.+36     	; 0xe3a <reset_ds1990+0x6a>
     e16:	e7 e6       	ldi	r30, 0x67	; 103
     e18:	f6 e0       	ldi	r31, 0x06	; 6
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <reset_ds1990+0x4a>
     e1e:	00 c0       	rjmp	.+0      	; 0xe20 <reset_ds1990+0x50>
     e20:	00 00       	nop
   	}   
  	else
  	{
  		_delay_us(410); //410 мкс
  		sei();
     e22:	78 94       	sei
  		send_ds1990_command(0x33);
     e24:	83 e3       	ldi	r24, 0x33	; 51
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	69 83       	std	Y+1, r22	; 0x01
     e2a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <send_ds1990_command>
  		read_ds1990(keyid, keylen);
     e2e:	c8 01       	movw	r24, r16
     e30:	69 81       	ldd	r22, Y+1	; 0x01
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	0e 94 9d 06 	call	0xd3a	; 0xd3a <read_ds1990>
		return 1;
     e38:	81 e0       	ldi	r24, 0x01	; 1
  	}
}
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	08 95       	ret

00000e46 <__divmodhi4>:
     e46:	97 fb       	bst	r25, 7
     e48:	09 2e       	mov	r0, r25
     e4a:	07 26       	eor	r0, r23
     e4c:	0a d0       	rcall	.+20     	; 0xe62 <__divmodhi4_neg1>
     e4e:	77 fd       	sbrc	r23, 7
     e50:	04 d0       	rcall	.+8      	; 0xe5a <__divmodhi4_neg2>
     e52:	27 d0       	rcall	.+78     	; 0xea2 <__udivmodhi4>
     e54:	06 d0       	rcall	.+12     	; 0xe62 <__divmodhi4_neg1>
     e56:	00 20       	and	r0, r0
     e58:	1a f4       	brpl	.+6      	; 0xe60 <__divmodhi4_exit>

00000e5a <__divmodhi4_neg2>:
     e5a:	70 95       	com	r23
     e5c:	61 95       	neg	r22
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255

00000e60 <__divmodhi4_exit>:
     e60:	08 95       	ret

00000e62 <__divmodhi4_neg1>:
     e62:	f6 f7       	brtc	.-4      	; 0xe60 <__divmodhi4_exit>
     e64:	90 95       	com	r25
     e66:	81 95       	neg	r24
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	08 95       	ret

00000e6c <__divmodsi4>:
     e6c:	97 fb       	bst	r25, 7
     e6e:	09 2e       	mov	r0, r25
     e70:	05 26       	eor	r0, r21
     e72:	0e d0       	rcall	.+28     	; 0xe90 <__divmodsi4_neg1>
     e74:	57 fd       	sbrc	r21, 7
     e76:	04 d0       	rcall	.+8      	; 0xe80 <__divmodsi4_neg2>
     e78:	28 d0       	rcall	.+80     	; 0xeca <__udivmodsi4>
     e7a:	0a d0       	rcall	.+20     	; 0xe90 <__divmodsi4_neg1>
     e7c:	00 1c       	adc	r0, r0
     e7e:	38 f4       	brcc	.+14     	; 0xe8e <__divmodsi4_exit>

00000e80 <__divmodsi4_neg2>:
     e80:	50 95       	com	r21
     e82:	40 95       	com	r20
     e84:	30 95       	com	r19
     e86:	21 95       	neg	r18
     e88:	3f 4f       	sbci	r19, 0xFF	; 255
     e8a:	4f 4f       	sbci	r20, 0xFF	; 255
     e8c:	5f 4f       	sbci	r21, 0xFF	; 255

00000e8e <__divmodsi4_exit>:
     e8e:	08 95       	ret

00000e90 <__divmodsi4_neg1>:
     e90:	f6 f7       	brtc	.-4      	; 0xe8e <__divmodsi4_exit>
     e92:	90 95       	com	r25
     e94:	80 95       	com	r24
     e96:	70 95       	com	r23
     e98:	61 95       	neg	r22
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	8f 4f       	sbci	r24, 0xFF	; 255
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	08 95       	ret

00000ea2 <__udivmodhi4>:
     ea2:	aa 1b       	sub	r26, r26
     ea4:	bb 1b       	sub	r27, r27
     ea6:	51 e1       	ldi	r21, 0x11	; 17
     ea8:	07 c0       	rjmp	.+14     	; 0xeb8 <__udivmodhi4_ep>

00000eaa <__udivmodhi4_loop>:
     eaa:	aa 1f       	adc	r26, r26
     eac:	bb 1f       	adc	r27, r27
     eae:	a6 17       	cp	r26, r22
     eb0:	b7 07       	cpc	r27, r23
     eb2:	10 f0       	brcs	.+4      	; 0xeb8 <__udivmodhi4_ep>
     eb4:	a6 1b       	sub	r26, r22
     eb6:	b7 0b       	sbc	r27, r23

00000eb8 <__udivmodhi4_ep>:
     eb8:	88 1f       	adc	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	5a 95       	dec	r21
     ebe:	a9 f7       	brne	.-22     	; 0xeaa <__udivmodhi4_loop>
     ec0:	80 95       	com	r24
     ec2:	90 95       	com	r25
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	08 95       	ret

00000eca <__udivmodsi4>:
     eca:	a1 e2       	ldi	r26, 0x21	; 33
     ecc:	1a 2e       	mov	r1, r26
     ece:	aa 1b       	sub	r26, r26
     ed0:	bb 1b       	sub	r27, r27
     ed2:	fd 01       	movw	r30, r26
     ed4:	0d c0       	rjmp	.+26     	; 0xef0 <__udivmodsi4_ep>

00000ed6 <__udivmodsi4_loop>:
     ed6:	aa 1f       	adc	r26, r26
     ed8:	bb 1f       	adc	r27, r27
     eda:	ee 1f       	adc	r30, r30
     edc:	ff 1f       	adc	r31, r31
     ede:	a2 17       	cp	r26, r18
     ee0:	b3 07       	cpc	r27, r19
     ee2:	e4 07       	cpc	r30, r20
     ee4:	f5 07       	cpc	r31, r21
     ee6:	20 f0       	brcs	.+8      	; 0xef0 <__udivmodsi4_ep>
     ee8:	a2 1b       	sub	r26, r18
     eea:	b3 0b       	sbc	r27, r19
     eec:	e4 0b       	sbc	r30, r20
     eee:	f5 0b       	sbc	r31, r21

00000ef0 <__udivmodsi4_ep>:
     ef0:	66 1f       	adc	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	1a 94       	dec	r1
     efa:	69 f7       	brne	.-38     	; 0xed6 <__udivmodsi4_loop>
     efc:	60 95       	com	r22
     efe:	70 95       	com	r23
     f00:	80 95       	com	r24
     f02:	90 95       	com	r25
     f04:	9b 01       	movw	r18, r22
     f06:	ac 01       	movw	r20, r24
     f08:	bd 01       	movw	r22, r26
     f0a:	cf 01       	movw	r24, r30
     f0c:	08 95       	ret

00000f0e <atoi>:
     f0e:	fc 01       	movw	r30, r24
     f10:	88 27       	eor	r24, r24
     f12:	99 27       	eor	r25, r25
     f14:	e8 94       	clt
     f16:	21 91       	ld	r18, Z+
     f18:	20 32       	cpi	r18, 0x20	; 32
     f1a:	e9 f3       	breq	.-6      	; 0xf16 <atoi+0x8>
     f1c:	29 30       	cpi	r18, 0x09	; 9
     f1e:	10 f0       	brcs	.+4      	; 0xf24 <atoi+0x16>
     f20:	2e 30       	cpi	r18, 0x0E	; 14
     f22:	c8 f3       	brcs	.-14     	; 0xf16 <atoi+0x8>
     f24:	2b 32       	cpi	r18, 0x2B	; 43
     f26:	41 f0       	breq	.+16     	; 0xf38 <atoi+0x2a>
     f28:	2d 32       	cpi	r18, 0x2D	; 45
     f2a:	39 f4       	brne	.+14     	; 0xf3a <atoi+0x2c>
     f2c:	68 94       	set
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <atoi+0x2a>
     f30:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulhi_const_10>
     f34:	82 0f       	add	r24, r18
     f36:	91 1d       	adc	r25, r1
     f38:	21 91       	ld	r18, Z+
     f3a:	20 53       	subi	r18, 0x30	; 48
     f3c:	2a 30       	cpi	r18, 0x0A	; 10
     f3e:	c0 f3       	brcs	.-16     	; 0xf30 <atoi+0x22>
     f40:	1e f4       	brtc	.+6      	; 0xf48 <atoi+0x3a>
     f42:	90 95       	com	r25
     f44:	81 95       	neg	r24
     f46:	9f 4f       	sbci	r25, 0xFF	; 255
     f48:	08 95       	ret

00000f4a <__mulhi_const_10>:
     f4a:	7a e0       	ldi	r23, 0x0A	; 10
     f4c:	97 9f       	mul	r25, r23
     f4e:	90 2d       	mov	r25, r0
     f50:	87 9f       	mul	r24, r23
     f52:	80 2d       	mov	r24, r0
     f54:	91 0d       	add	r25, r1
     f56:	11 24       	eor	r1, r1
     f58:	08 95       	ret

00000f5a <sprintf>:
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	2e 97       	sbiw	r28, 0x0e	; 14
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	0d 89       	ldd	r16, Y+21	; 0x15
     f74:	1e 89       	ldd	r17, Y+22	; 0x16
     f76:	86 e0       	ldi	r24, 0x06	; 6
     f78:	8c 83       	std	Y+4, r24	; 0x04
     f7a:	1a 83       	std	Y+2, r17	; 0x02
     f7c:	09 83       	std	Y+1, r16	; 0x01
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	9f e7       	ldi	r25, 0x7F	; 127
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
     f86:	9e 01       	movw	r18, r28
     f88:	27 5e       	subi	r18, 0xE7	; 231
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	ce 01       	movw	r24, r28
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	6f 89       	ldd	r22, Y+23	; 0x17
     f92:	78 8d       	ldd	r23, Y+24	; 0x18
     f94:	a9 01       	movw	r20, r18
     f96:	0e 94 dd 07 	call	0xfba	; 0xfba <vfprintf>
     f9a:	ef 81       	ldd	r30, Y+7	; 0x07
     f9c:	f8 85       	ldd	r31, Y+8	; 0x08
     f9e:	e0 0f       	add	r30, r16
     fa0:	f1 1f       	adc	r31, r17
     fa2:	10 82       	st	Z, r1
     fa4:	2e 96       	adiw	r28, 0x0e	; 14
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	08 95       	ret

00000fba <vfprintf>:
     fba:	2f 92       	push	r2
     fbc:	3f 92       	push	r3
     fbe:	4f 92       	push	r4
     fc0:	5f 92       	push	r5
     fc2:	6f 92       	push	r6
     fc4:	7f 92       	push	r7
     fc6:	8f 92       	push	r8
     fc8:	9f 92       	push	r9
     fca:	af 92       	push	r10
     fcc:	bf 92       	push	r11
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	2c 97       	sbiw	r28, 0x0c	; 12
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	6c 01       	movw	r12, r24
     ff0:	1b 01       	movw	r2, r22
     ff2:	8a 01       	movw	r16, r20
     ff4:	fc 01       	movw	r30, r24
     ff6:	17 82       	std	Z+7, r1	; 0x07
     ff8:	16 82       	std	Z+6, r1	; 0x06
     ffa:	83 81       	ldd	r24, Z+3	; 0x03
     ffc:	81 ff       	sbrs	r24, 1
     ffe:	d1 c1       	rjmp	.+930    	; 0x13a2 <__stack+0x2a3>
    1000:	2e 01       	movw	r4, r28
    1002:	08 94       	sec
    1004:	41 1c       	adc	r4, r1
    1006:	51 1c       	adc	r5, r1
    1008:	f6 01       	movw	r30, r12
    100a:	93 81       	ldd	r25, Z+3	; 0x03
    100c:	f1 01       	movw	r30, r2
    100e:	93 fd       	sbrc	r25, 3
    1010:	85 91       	lpm	r24, Z+
    1012:	93 ff       	sbrs	r25, 3
    1014:	81 91       	ld	r24, Z+
    1016:	1f 01       	movw	r2, r30
    1018:	88 23       	and	r24, r24
    101a:	09 f4       	brne	.+2      	; 0x101e <vfprintf+0x64>
    101c:	be c1       	rjmp	.+892    	; 0x139a <__stack+0x29b>
    101e:	85 32       	cpi	r24, 0x25	; 37
    1020:	39 f4       	brne	.+14     	; 0x1030 <vfprintf+0x76>
    1022:	93 fd       	sbrc	r25, 3
    1024:	85 91       	lpm	r24, Z+
    1026:	93 ff       	sbrs	r25, 3
    1028:	81 91       	ld	r24, Z+
    102a:	1f 01       	movw	r2, r30
    102c:	85 32       	cpi	r24, 0x25	; 37
    102e:	29 f4       	brne	.+10     	; 0x103a <vfprintf+0x80>
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	b6 01       	movw	r22, r12
    1034:	0e 94 3d 0a 	call	0x147a	; 0x147a <fputc>
    1038:	e7 cf       	rjmp	.-50     	; 0x1008 <vfprintf+0x4e>
    103a:	ee 24       	eor	r14, r14
    103c:	ff 24       	eor	r15, r15
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	20 32       	cpi	r18, 0x20	; 32
    1042:	b0 f4       	brcc	.+44     	; 0x1070 <vfprintf+0xb6>
    1044:	8b 32       	cpi	r24, 0x2B	; 43
    1046:	69 f0       	breq	.+26     	; 0x1062 <vfprintf+0xa8>
    1048:	8c 32       	cpi	r24, 0x2C	; 44
    104a:	28 f4       	brcc	.+10     	; 0x1056 <vfprintf+0x9c>
    104c:	80 32       	cpi	r24, 0x20	; 32
    104e:	51 f0       	breq	.+20     	; 0x1064 <vfprintf+0xaa>
    1050:	83 32       	cpi	r24, 0x23	; 35
    1052:	71 f4       	brne	.+28     	; 0x1070 <vfprintf+0xb6>
    1054:	0b c0       	rjmp	.+22     	; 0x106c <vfprintf+0xb2>
    1056:	8d 32       	cpi	r24, 0x2D	; 45
    1058:	39 f0       	breq	.+14     	; 0x1068 <vfprintf+0xae>
    105a:	80 33       	cpi	r24, 0x30	; 48
    105c:	49 f4       	brne	.+18     	; 0x1070 <vfprintf+0xb6>
    105e:	21 60       	ori	r18, 0x01	; 1
    1060:	2c c0       	rjmp	.+88     	; 0x10ba <vfprintf+0x100>
    1062:	22 60       	ori	r18, 0x02	; 2
    1064:	24 60       	ori	r18, 0x04	; 4
    1066:	29 c0       	rjmp	.+82     	; 0x10ba <vfprintf+0x100>
    1068:	28 60       	ori	r18, 0x08	; 8
    106a:	27 c0       	rjmp	.+78     	; 0x10ba <vfprintf+0x100>
    106c:	20 61       	ori	r18, 0x10	; 16
    106e:	25 c0       	rjmp	.+74     	; 0x10ba <vfprintf+0x100>
    1070:	27 fd       	sbrc	r18, 7
    1072:	2c c0       	rjmp	.+88     	; 0x10cc <vfprintf+0x112>
    1074:	38 2f       	mov	r19, r24
    1076:	30 53       	subi	r19, 0x30	; 48
    1078:	3a 30       	cpi	r19, 0x0A	; 10
    107a:	98 f4       	brcc	.+38     	; 0x10a2 <vfprintf+0xe8>
    107c:	26 ff       	sbrs	r18, 6
    107e:	08 c0       	rjmp	.+16     	; 0x1090 <vfprintf+0xd6>
    1080:	8e 2d       	mov	r24, r14
    1082:	88 0f       	add	r24, r24
    1084:	e8 2e       	mov	r14, r24
    1086:	ee 0c       	add	r14, r14
    1088:	ee 0c       	add	r14, r14
    108a:	e8 0e       	add	r14, r24
    108c:	e3 0e       	add	r14, r19
    108e:	15 c0       	rjmp	.+42     	; 0x10ba <vfprintf+0x100>
    1090:	8f 2d       	mov	r24, r15
    1092:	88 0f       	add	r24, r24
    1094:	f8 2e       	mov	r15, r24
    1096:	ff 0c       	add	r15, r15
    1098:	ff 0c       	add	r15, r15
    109a:	f8 0e       	add	r15, r24
    109c:	f3 0e       	add	r15, r19
    109e:	20 62       	ori	r18, 0x20	; 32
    10a0:	0c c0       	rjmp	.+24     	; 0x10ba <vfprintf+0x100>
    10a2:	8e 32       	cpi	r24, 0x2E	; 46
    10a4:	21 f4       	brne	.+8      	; 0x10ae <vfprintf+0xf4>
    10a6:	26 fd       	sbrc	r18, 6
    10a8:	78 c1       	rjmp	.+752    	; 0x139a <__stack+0x29b>
    10aa:	20 64       	ori	r18, 0x40	; 64
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <vfprintf+0x100>
    10ae:	8c 36       	cpi	r24, 0x6C	; 108
    10b0:	11 f4       	brne	.+4      	; 0x10b6 <vfprintf+0xfc>
    10b2:	20 68       	ori	r18, 0x80	; 128
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <vfprintf+0x100>
    10b6:	88 36       	cpi	r24, 0x68	; 104
    10b8:	49 f4       	brne	.+18     	; 0x10cc <vfprintf+0x112>
    10ba:	f1 01       	movw	r30, r2
    10bc:	93 fd       	sbrc	r25, 3
    10be:	85 91       	lpm	r24, Z+
    10c0:	93 ff       	sbrs	r25, 3
    10c2:	81 91       	ld	r24, Z+
    10c4:	1f 01       	movw	r2, r30
    10c6:	88 23       	and	r24, r24
    10c8:	09 f0       	breq	.+2      	; 0x10cc <vfprintf+0x112>
    10ca:	ba cf       	rjmp	.-140    	; 0x1040 <vfprintf+0x86>
    10cc:	98 2f       	mov	r25, r24
    10ce:	95 54       	subi	r25, 0x45	; 69
    10d0:	93 30       	cpi	r25, 0x03	; 3
    10d2:	18 f0       	brcs	.+6      	; 0x10da <vfprintf+0x120>
    10d4:	90 52       	subi	r25, 0x20	; 32
    10d6:	93 30       	cpi	r25, 0x03	; 3
    10d8:	28 f4       	brcc	.+10     	; 0x10e4 <vfprintf+0x12a>
    10da:	0c 5f       	subi	r16, 0xFC	; 252
    10dc:	1f 4f       	sbci	r17, 0xFF	; 255
    10de:	ff e3       	ldi	r31, 0x3F	; 63
    10e0:	f9 83       	std	Y+1, r31	; 0x01
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <vfprintf+0x144>
    10e4:	83 36       	cpi	r24, 0x63	; 99
    10e6:	31 f0       	breq	.+12     	; 0x10f4 <vfprintf+0x13a>
    10e8:	83 37       	cpi	r24, 0x73	; 115
    10ea:	71 f0       	breq	.+28     	; 0x1108 <__stack+0x9>
    10ec:	83 35       	cpi	r24, 0x53	; 83
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <vfprintf+0x138>
    10f0:	60 c0       	rjmp	.+192    	; 0x11b2 <__stack+0xb3>
    10f2:	22 c0       	rjmp	.+68     	; 0x1138 <__stack+0x39>
    10f4:	f8 01       	movw	r30, r16
    10f6:	80 81       	ld	r24, Z
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	0e 5f       	subi	r16, 0xFE	; 254
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	42 01       	movw	r8, r4
    1100:	71 e0       	ldi	r23, 0x01	; 1
    1102:	a7 2e       	mov	r10, r23
    1104:	b1 2c       	mov	r11, r1
    1106:	16 c0       	rjmp	.+44     	; 0x1134 <__stack+0x35>
    1108:	62 e0       	ldi	r22, 0x02	; 2
    110a:	66 2e       	mov	r6, r22
    110c:	71 2c       	mov	r7, r1
    110e:	60 0e       	add	r6, r16
    1110:	71 1e       	adc	r7, r17
    1112:	f8 01       	movw	r30, r16
    1114:	80 80       	ld	r8, Z
    1116:	91 80       	ldd	r9, Z+1	; 0x01
    1118:	26 ff       	sbrs	r18, 6
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <__stack+0x23>
    111c:	6e 2d       	mov	r22, r14
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <__stack+0x27>
    1122:	6f ef       	ldi	r22, 0xFF	; 255
    1124:	7f ef       	ldi	r23, 0xFF	; 255
    1126:	c4 01       	movw	r24, r8
    1128:	2c 87       	std	Y+12, r18	; 0x0c
    112a:	0e 94 32 0a 	call	0x1464	; 0x1464 <strnlen>
    112e:	5c 01       	movw	r10, r24
    1130:	83 01       	movw	r16, r6
    1132:	2c 85       	ldd	r18, Y+12	; 0x0c
    1134:	2f 77       	andi	r18, 0x7F	; 127
    1136:	17 c0       	rjmp	.+46     	; 0x1166 <__stack+0x67>
    1138:	52 e0       	ldi	r21, 0x02	; 2
    113a:	65 2e       	mov	r6, r21
    113c:	71 2c       	mov	r7, r1
    113e:	60 0e       	add	r6, r16
    1140:	71 1e       	adc	r7, r17
    1142:	f8 01       	movw	r30, r16
    1144:	80 80       	ld	r8, Z
    1146:	91 80       	ldd	r9, Z+1	; 0x01
    1148:	26 ff       	sbrs	r18, 6
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <__stack+0x53>
    114c:	6e 2d       	mov	r22, r14
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <__stack+0x57>
    1152:	6f ef       	ldi	r22, 0xFF	; 255
    1154:	7f ef       	ldi	r23, 0xFF	; 255
    1156:	c4 01       	movw	r24, r8
    1158:	2c 87       	std	Y+12, r18	; 0x0c
    115a:	0e 94 27 0a 	call	0x144e	; 0x144e <strnlen_P>
    115e:	5c 01       	movw	r10, r24
    1160:	2c 85       	ldd	r18, Y+12	; 0x0c
    1162:	20 68       	ori	r18, 0x80	; 128
    1164:	83 01       	movw	r16, r6
    1166:	23 fd       	sbrc	r18, 3
    1168:	20 c0       	rjmp	.+64     	; 0x11aa <__stack+0xab>
    116a:	08 c0       	rjmp	.+16     	; 0x117c <__stack+0x7d>
    116c:	80 e2       	ldi	r24, 0x20	; 32
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	b6 01       	movw	r22, r12
    1172:	2c 87       	std	Y+12, r18	; 0x0c
    1174:	0e 94 3d 0a 	call	0x147a	; 0x147a <fputc>
    1178:	fa 94       	dec	r15
    117a:	2c 85       	ldd	r18, Y+12	; 0x0c
    117c:	8f 2d       	mov	r24, r15
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a8 16       	cp	r10, r24
    1182:	b9 06       	cpc	r11, r25
    1184:	98 f3       	brcs	.-26     	; 0x116c <__stack+0x6d>
    1186:	11 c0       	rjmp	.+34     	; 0x11aa <__stack+0xab>
    1188:	f4 01       	movw	r30, r8
    118a:	27 fd       	sbrc	r18, 7
    118c:	85 91       	lpm	r24, Z+
    118e:	27 ff       	sbrs	r18, 7
    1190:	81 91       	ld	r24, Z+
    1192:	4f 01       	movw	r8, r30
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	b6 01       	movw	r22, r12
    1198:	2c 87       	std	Y+12, r18	; 0x0c
    119a:	0e 94 3d 0a 	call	0x147a	; 0x147a <fputc>
    119e:	2c 85       	ldd	r18, Y+12	; 0x0c
    11a0:	f1 10       	cpse	r15, r1
    11a2:	fa 94       	dec	r15
    11a4:	08 94       	sec
    11a6:	a1 08       	sbc	r10, r1
    11a8:	b1 08       	sbc	r11, r1
    11aa:	a1 14       	cp	r10, r1
    11ac:	b1 04       	cpc	r11, r1
    11ae:	61 f7       	brne	.-40     	; 0x1188 <__stack+0x89>
    11b0:	f1 c0       	rjmp	.+482    	; 0x1394 <__stack+0x295>
    11b2:	84 36       	cpi	r24, 0x64	; 100
    11b4:	11 f0       	breq	.+4      	; 0x11ba <__stack+0xbb>
    11b6:	89 36       	cpi	r24, 0x69	; 105
    11b8:	49 f5       	brne	.+82     	; 0x120c <__stack+0x10d>
    11ba:	27 ff       	sbrs	r18, 7
    11bc:	08 c0       	rjmp	.+16     	; 0x11ce <__stack+0xcf>
    11be:	f8 01       	movw	r30, r16
    11c0:	60 81       	ld	r22, Z
    11c2:	71 81       	ldd	r23, Z+1	; 0x01
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	0c 5f       	subi	r16, 0xFC	; 252
    11ca:	1f 4f       	sbci	r17, 0xFF	; 255
    11cc:	09 c0       	rjmp	.+18     	; 0x11e0 <__stack+0xe1>
    11ce:	f8 01       	movw	r30, r16
    11d0:	60 81       	ld	r22, Z
    11d2:	71 81       	ldd	r23, Z+1	; 0x01
    11d4:	88 27       	eor	r24, r24
    11d6:	77 fd       	sbrc	r23, 7
    11d8:	80 95       	com	r24
    11da:	98 2f       	mov	r25, r24
    11dc:	0e 5f       	subi	r16, 0xFE	; 254
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	4f e6       	ldi	r20, 0x6F	; 111
    11e2:	b4 2e       	mov	r11, r20
    11e4:	b2 22       	and	r11, r18
    11e6:	97 ff       	sbrs	r25, 7
    11e8:	09 c0       	rjmp	.+18     	; 0x11fc <__stack+0xfd>
    11ea:	90 95       	com	r25
    11ec:	80 95       	com	r24
    11ee:	70 95       	com	r23
    11f0:	61 95       	neg	r22
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	8f 4f       	sbci	r24, 0xFF	; 255
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	f0 e8       	ldi	r31, 0x80	; 128
    11fa:	bf 2a       	or	r11, r31
    11fc:	a2 01       	movw	r20, r4
    11fe:	2a e0       	ldi	r18, 0x0A	; 10
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__ultoa_invert>
    1206:	78 2e       	mov	r7, r24
    1208:	74 18       	sub	r7, r4
    120a:	45 c0       	rjmp	.+138    	; 0x1296 <__stack+0x197>
    120c:	85 37       	cpi	r24, 0x75	; 117
    120e:	31 f4       	brne	.+12     	; 0x121c <__stack+0x11d>
    1210:	3f ee       	ldi	r19, 0xEF	; 239
    1212:	b3 2e       	mov	r11, r19
    1214:	b2 22       	and	r11, r18
    1216:	2a e0       	ldi	r18, 0x0A	; 10
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	25 c0       	rjmp	.+74     	; 0x1266 <__stack+0x167>
    121c:	99 ef       	ldi	r25, 0xF9	; 249
    121e:	b9 2e       	mov	r11, r25
    1220:	b2 22       	and	r11, r18
    1222:	8f 36       	cpi	r24, 0x6F	; 111
    1224:	c1 f0       	breq	.+48     	; 0x1256 <__stack+0x157>
    1226:	80 37       	cpi	r24, 0x70	; 112
    1228:	20 f4       	brcc	.+8      	; 0x1232 <__stack+0x133>
    122a:	88 35       	cpi	r24, 0x58	; 88
    122c:	09 f0       	breq	.+2      	; 0x1230 <__stack+0x131>
    122e:	b5 c0       	rjmp	.+362    	; 0x139a <__stack+0x29b>
    1230:	0d c0       	rjmp	.+26     	; 0x124c <__stack+0x14d>
    1232:	80 37       	cpi	r24, 0x70	; 112
    1234:	21 f0       	breq	.+8      	; 0x123e <__stack+0x13f>
    1236:	88 37       	cpi	r24, 0x78	; 120
    1238:	09 f0       	breq	.+2      	; 0x123c <__stack+0x13d>
    123a:	af c0       	rjmp	.+350    	; 0x139a <__stack+0x29b>
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <__stack+0x143>
    123e:	20 e1       	ldi	r18, 0x10	; 16
    1240:	b2 2a       	or	r11, r18
    1242:	b4 fe       	sbrs	r11, 4
    1244:	0b c0       	rjmp	.+22     	; 0x125c <__stack+0x15d>
    1246:	84 e0       	ldi	r24, 0x04	; 4
    1248:	b8 2a       	or	r11, r24
    124a:	08 c0       	rjmp	.+16     	; 0x125c <__stack+0x15d>
    124c:	b4 fe       	sbrs	r11, 4
    124e:	09 c0       	rjmp	.+18     	; 0x1262 <__stack+0x163>
    1250:	e6 e0       	ldi	r30, 0x06	; 6
    1252:	be 2a       	or	r11, r30
    1254:	06 c0       	rjmp	.+12     	; 0x1262 <__stack+0x163>
    1256:	28 e0       	ldi	r18, 0x08	; 8
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	05 c0       	rjmp	.+10     	; 0x1266 <__stack+0x167>
    125c:	20 e1       	ldi	r18, 0x10	; 16
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <__stack+0x167>
    1262:	20 e1       	ldi	r18, 0x10	; 16
    1264:	32 e0       	ldi	r19, 0x02	; 2
    1266:	b7 fe       	sbrs	r11, 7
    1268:	08 c0       	rjmp	.+16     	; 0x127a <__stack+0x17b>
    126a:	f8 01       	movw	r30, r16
    126c:	60 81       	ld	r22, Z
    126e:	71 81       	ldd	r23, Z+1	; 0x01
    1270:	82 81       	ldd	r24, Z+2	; 0x02
    1272:	93 81       	ldd	r25, Z+3	; 0x03
    1274:	0c 5f       	subi	r16, 0xFC	; 252
    1276:	1f 4f       	sbci	r17, 0xFF	; 255
    1278:	07 c0       	rjmp	.+14     	; 0x1288 <__stack+0x189>
    127a:	f8 01       	movw	r30, r16
    127c:	60 81       	ld	r22, Z
    127e:	71 81       	ldd	r23, Z+1	; 0x01
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 5f       	subi	r16, 0xFE	; 254
    1286:	1f 4f       	sbci	r17, 0xFF	; 255
    1288:	a2 01       	movw	r20, r4
    128a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__ultoa_invert>
    128e:	78 2e       	mov	r7, r24
    1290:	74 18       	sub	r7, r4
    1292:	ff e7       	ldi	r31, 0x7F	; 127
    1294:	bf 22       	and	r11, r31
    1296:	b6 fe       	sbrs	r11, 6
    1298:	0b c0       	rjmp	.+22     	; 0x12b0 <__stack+0x1b1>
    129a:	2e ef       	ldi	r18, 0xFE	; 254
    129c:	b2 22       	and	r11, r18
    129e:	7e 14       	cp	r7, r14
    12a0:	38 f4       	brcc	.+14     	; 0x12b0 <__stack+0x1b1>
    12a2:	b4 fe       	sbrs	r11, 4
    12a4:	07 c0       	rjmp	.+14     	; 0x12b4 <__stack+0x1b5>
    12a6:	b2 fc       	sbrc	r11, 2
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <__stack+0x1b5>
    12aa:	8f ee       	ldi	r24, 0xEF	; 239
    12ac:	b8 22       	and	r11, r24
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <__stack+0x1b5>
    12b0:	a7 2c       	mov	r10, r7
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <__stack+0x1b7>
    12b4:	ae 2c       	mov	r10, r14
    12b6:	8b 2d       	mov	r24, r11
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	b4 fe       	sbrs	r11, 4
    12bc:	0d c0       	rjmp	.+26     	; 0x12d8 <__stack+0x1d9>
    12be:	fe 01       	movw	r30, r28
    12c0:	e7 0d       	add	r30, r7
    12c2:	f1 1d       	adc	r31, r1
    12c4:	20 81       	ld	r18, Z
    12c6:	20 33       	cpi	r18, 0x30	; 48
    12c8:	19 f4       	brne	.+6      	; 0x12d0 <__stack+0x1d1>
    12ca:	e9 ee       	ldi	r30, 0xE9	; 233
    12cc:	be 22       	and	r11, r30
    12ce:	09 c0       	rjmp	.+18     	; 0x12e2 <__stack+0x1e3>
    12d0:	a3 94       	inc	r10
    12d2:	b2 fe       	sbrs	r11, 2
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <__stack+0x1e3>
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <__stack+0x1e1>
    12d8:	86 78       	andi	r24, 0x86	; 134
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	09 f0       	breq	.+2      	; 0x12e2 <__stack+0x1e3>
    12e0:	a3 94       	inc	r10
    12e2:	8b 2c       	mov	r8, r11
    12e4:	99 24       	eor	r9, r9
    12e6:	b3 fc       	sbrc	r11, 3
    12e8:	14 c0       	rjmp	.+40     	; 0x1312 <__stack+0x213>
    12ea:	b0 fe       	sbrs	r11, 0
    12ec:	0f c0       	rjmp	.+30     	; 0x130c <__stack+0x20d>
    12ee:	af 14       	cp	r10, r15
    12f0:	28 f4       	brcc	.+10     	; 0x12fc <__stack+0x1fd>
    12f2:	e7 2c       	mov	r14, r7
    12f4:	ef 0c       	add	r14, r15
    12f6:	ea 18       	sub	r14, r10
    12f8:	af 2c       	mov	r10, r15
    12fa:	08 c0       	rjmp	.+16     	; 0x130c <__stack+0x20d>
    12fc:	e7 2c       	mov	r14, r7
    12fe:	06 c0       	rjmp	.+12     	; 0x130c <__stack+0x20d>
    1300:	80 e2       	ldi	r24, 0x20	; 32
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	b6 01       	movw	r22, r12
    1306:	0e 94 3d 0a 	call	0x147a	; 0x147a <fputc>
    130a:	a3 94       	inc	r10
    130c:	af 14       	cp	r10, r15
    130e:	c0 f3       	brcs	.-16     	; 0x1300 <__stack+0x201>
    1310:	04 c0       	rjmp	.+8      	; 0x131a <__stack+0x21b>
    1312:	af 14       	cp	r10, r15
    1314:	10 f4       	brcc	.+4      	; 0x131a <__stack+0x21b>
    1316:	fa 18       	sub	r15, r10
    1318:	01 c0       	rjmp	.+2      	; 0x131c <__stack+0x21d>
    131a:	ff 24       	eor	r15, r15
    131c:	84 fe       	sbrs	r8, 4
    131e:	0f c0       	rjmp	.+30     	; 0x133e <__stack+0x23f>
    1320:	80 e3       	ldi	r24, 0x30	; 48
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	b6 01       	movw	r22, r12
    1326:	0e 94 3d 0a 	call	0x147a	; 0x147a <fputc>
    132a:	82 fe       	sbrs	r8, 2
    132c:	1f c0       	rjmp	.+62     	; 0x136c <__stack+0x26d>
    132e:	81 fe       	sbrs	r8, 1
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <__stack+0x239>
    1332:	88 e5       	ldi	r24, 0x58	; 88
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	10 c0       	rjmp	.+32     	; 0x1358 <__stack+0x259>
    1338:	88 e7       	ldi	r24, 0x78	; 120
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0d c0       	rjmp	.+26     	; 0x1358 <__stack+0x259>
    133e:	c4 01       	movw	r24, r8
    1340:	86 78       	andi	r24, 0x86	; 134
    1342:	90 70       	andi	r25, 0x00	; 0
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	91 f0       	breq	.+36     	; 0x136c <__stack+0x26d>
    1348:	81 fc       	sbrc	r8, 1
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <__stack+0x251>
    134c:	80 e2       	ldi	r24, 0x20	; 32
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <__stack+0x253>
    1350:	8b e2       	ldi	r24, 0x2B	; 43
    1352:	b7 fc       	sbrc	r11, 7
    1354:	8d e2       	ldi	r24, 0x2D	; 45
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	b6 01       	movw	r22, r12
    135a:	0e 94 3d 0a 	call	0x147a	; 0x147a <fputc>
    135e:	06 c0       	rjmp	.+12     	; 0x136c <__stack+0x26d>
    1360:	80 e3       	ldi	r24, 0x30	; 48
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	b6 01       	movw	r22, r12
    1366:	0e 94 3d 0a 	call	0x147a	; 0x147a <fputc>
    136a:	ea 94       	dec	r14
    136c:	7e 14       	cp	r7, r14
    136e:	c0 f3       	brcs	.-16     	; 0x1360 <__stack+0x261>
    1370:	7a 94       	dec	r7
    1372:	f2 01       	movw	r30, r4
    1374:	e7 0d       	add	r30, r7
    1376:	f1 1d       	adc	r31, r1
    1378:	80 81       	ld	r24, Z
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	b6 01       	movw	r22, r12
    137e:	0e 94 3d 0a 	call	0x147a	; 0x147a <fputc>
    1382:	77 20       	and	r7, r7
    1384:	a9 f7       	brne	.-22     	; 0x1370 <__stack+0x271>
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <__stack+0x295>
    1388:	80 e2       	ldi	r24, 0x20	; 32
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	b6 01       	movw	r22, r12
    138e:	0e 94 3d 0a 	call	0x147a	; 0x147a <fputc>
    1392:	fa 94       	dec	r15
    1394:	ff 20       	and	r15, r15
    1396:	c1 f7       	brne	.-16     	; 0x1388 <__stack+0x289>
    1398:	37 ce       	rjmp	.-914    	; 0x1008 <vfprintf+0x4e>
    139a:	f6 01       	movw	r30, r12
    139c:	26 81       	ldd	r18, Z+6	; 0x06
    139e:	37 81       	ldd	r19, Z+7	; 0x07
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <__stack+0x2a7>
    13a2:	2f ef       	ldi	r18, 0xFF	; 255
    13a4:	3f ef       	ldi	r19, 0xFF	; 255
    13a6:	c9 01       	movw	r24, r18
    13a8:	2c 96       	adiw	r28, 0x0c	; 12
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	df 90       	pop	r13
    13c2:	cf 90       	pop	r12
    13c4:	bf 90       	pop	r11
    13c6:	af 90       	pop	r10
    13c8:	9f 90       	pop	r9
    13ca:	8f 90       	pop	r8
    13cc:	7f 90       	pop	r7
    13ce:	6f 90       	pop	r6
    13d0:	5f 90       	pop	r5
    13d2:	4f 90       	pop	r4
    13d4:	3f 90       	pop	r3
    13d6:	2f 90       	pop	r2
    13d8:	08 95       	ret

000013da <__eerd_block_m128>:
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22

000013de <__eerd_blraw_m128>:
    13de:	fc 01       	movw	r30, r24
    13e0:	e1 99       	sbic	0x1c, 1	; 28
    13e2:	fe cf       	rjmp	.-4      	; 0x13e0 <__eerd_blraw_m128+0x2>
    13e4:	06 c0       	rjmp	.+12     	; 0x13f2 <__eerd_blraw_m128+0x14>
    13e6:	ff bb       	out	0x1f, r31	; 31
    13e8:	ee bb       	out	0x1e, r30	; 30
    13ea:	e0 9a       	sbi	0x1c, 0	; 28
    13ec:	31 96       	adiw	r30, 0x01	; 1
    13ee:	0d b2       	in	r0, 0x1d	; 29
    13f0:	0d 92       	st	X+, r0
    13f2:	41 50       	subi	r20, 0x01	; 1
    13f4:	50 40       	sbci	r21, 0x00	; 0
    13f6:	b8 f7       	brcc	.-18     	; 0x13e6 <__eerd_blraw_m128+0x8>
    13f8:	08 95       	ret

000013fa <__eerd_dword_m128>:
    13fa:	a6 e1       	ldi	r26, 0x16	; 22
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	44 e0       	ldi	r20, 0x04	; 4
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__eerd_blraw_m128>

00001406 <__eewr_block_m128>:
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <__eewr_block_m128+0xc>
    140c:	2d 91       	ld	r18, X+
    140e:	0e 94 0e 0a 	call	0x141c	; 0x141c <__eewr_r18_m128>
    1412:	41 50       	subi	r20, 0x01	; 1
    1414:	50 40       	sbci	r21, 0x00	; 0
    1416:	d0 f7       	brcc	.-12     	; 0x140c <__eewr_block_m128+0x6>
    1418:	08 95       	ret

0000141a <__eewr_byte_m128>:
    141a:	26 2f       	mov	r18, r22

0000141c <__eewr_r18_m128>:
    141c:	e1 99       	sbic	0x1c, 1	; 28
    141e:	fe cf       	rjmp	.-4      	; 0x141c <__eewr_r18_m128>
    1420:	9f bb       	out	0x1f, r25	; 31
    1422:	8e bb       	out	0x1e, r24	; 30
    1424:	2d bb       	out	0x1d, r18	; 29
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	e2 9a       	sbi	0x1c, 2	; 28
    142c:	e1 9a       	sbi	0x1c, 1	; 28
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	08 95       	ret

00001434 <__eewr_dword_m128>:
    1434:	24 2f       	mov	r18, r20
    1436:	0e 94 0e 0a 	call	0x141c	; 0x141c <__eewr_r18_m128>
    143a:	25 2f       	mov	r18, r21
    143c:	0e 94 0e 0a 	call	0x141c	; 0x141c <__eewr_r18_m128>
    1440:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__eewr_word_m128>

00001444 <__eewr_word_m128>:
    1444:	0e 94 0d 0a 	call	0x141a	; 0x141a <__eewr_byte_m128>
    1448:	27 2f       	mov	r18, r23
    144a:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__eewr_r18_m128>

0000144e <strnlen_P>:
    144e:	fc 01       	movw	r30, r24
    1450:	05 90       	lpm	r0, Z+
    1452:	61 50       	subi	r22, 0x01	; 1
    1454:	70 40       	sbci	r23, 0x00	; 0
    1456:	01 10       	cpse	r0, r1
    1458:	d8 f7       	brcc	.-10     	; 0x1450 <strnlen_P+0x2>
    145a:	80 95       	com	r24
    145c:	90 95       	com	r25
    145e:	8e 0f       	add	r24, r30
    1460:	9f 1f       	adc	r25, r31
    1462:	08 95       	ret

00001464 <strnlen>:
    1464:	fc 01       	movw	r30, r24
    1466:	61 50       	subi	r22, 0x01	; 1
    1468:	70 40       	sbci	r23, 0x00	; 0
    146a:	01 90       	ld	r0, Z+
    146c:	01 10       	cpse	r0, r1
    146e:	d8 f7       	brcc	.-10     	; 0x1466 <strnlen+0x2>
    1470:	80 95       	com	r24
    1472:	90 95       	com	r25
    1474:	8e 0f       	add	r24, r30
    1476:	9f 1f       	adc	r25, r31
    1478:	08 95       	ret

0000147a <fputc>:
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	8c 01       	movw	r16, r24
    1484:	eb 01       	movw	r28, r22
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	81 ff       	sbrs	r24, 1
    148a:	1b c0       	rjmp	.+54     	; 0x14c2 <fputc+0x48>
    148c:	82 ff       	sbrs	r24, 2
    148e:	0d c0       	rjmp	.+26     	; 0x14aa <fputc+0x30>
    1490:	2e 81       	ldd	r18, Y+6	; 0x06
    1492:	3f 81       	ldd	r19, Y+7	; 0x07
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	9d 81       	ldd	r25, Y+5	; 0x05
    1498:	28 17       	cp	r18, r24
    149a:	39 07       	cpc	r19, r25
    149c:	64 f4       	brge	.+24     	; 0x14b6 <fputc+0x3c>
    149e:	e8 81       	ld	r30, Y
    14a0:	f9 81       	ldd	r31, Y+1	; 0x01
    14a2:	01 93       	st	Z+, r16
    14a4:	f9 83       	std	Y+1, r31	; 0x01
    14a6:	e8 83       	st	Y, r30
    14a8:	06 c0       	rjmp	.+12     	; 0x14b6 <fputc+0x3c>
    14aa:	e8 85       	ldd	r30, Y+8	; 0x08
    14ac:	f9 85       	ldd	r31, Y+9	; 0x09
    14ae:	80 2f       	mov	r24, r16
    14b0:	09 95       	icall
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	31 f4       	brne	.+12     	; 0x14c2 <fputc+0x48>
    14b6:	8e 81       	ldd	r24, Y+6	; 0x06
    14b8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	9f 83       	std	Y+7, r25	; 0x07
    14be:	8e 83       	std	Y+6, r24	; 0x06
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <fputc+0x4c>
    14c2:	0f ef       	ldi	r16, 0xFF	; 255
    14c4:	1f ef       	ldi	r17, 0xFF	; 255
    14c6:	c8 01       	movw	r24, r16
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <__ultoa_invert>:
    14d2:	fa 01       	movw	r30, r20
    14d4:	aa 27       	eor	r26, r26
    14d6:	28 30       	cpi	r18, 0x08	; 8
    14d8:	51 f1       	breq	.+84     	; 0x152e <__ultoa_invert+0x5c>
    14da:	20 31       	cpi	r18, 0x10	; 16
    14dc:	81 f1       	breq	.+96     	; 0x153e <__ultoa_invert+0x6c>
    14de:	e8 94       	clt
    14e0:	6f 93       	push	r22
    14e2:	6e 7f       	andi	r22, 0xFE	; 254
    14e4:	6e 5f       	subi	r22, 0xFE	; 254
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	af 4f       	sbci	r26, 0xFF	; 255
    14ee:	b1 e0       	ldi	r27, 0x01	; 1
    14f0:	3e d0       	rcall	.+124    	; 0x156e <__ultoa_invert+0x9c>
    14f2:	b4 e0       	ldi	r27, 0x04	; 4
    14f4:	3c d0       	rcall	.+120    	; 0x156e <__ultoa_invert+0x9c>
    14f6:	67 0f       	add	r22, r23
    14f8:	78 1f       	adc	r23, r24
    14fa:	89 1f       	adc	r24, r25
    14fc:	9a 1f       	adc	r25, r26
    14fe:	a1 1d       	adc	r26, r1
    1500:	68 0f       	add	r22, r24
    1502:	79 1f       	adc	r23, r25
    1504:	8a 1f       	adc	r24, r26
    1506:	91 1d       	adc	r25, r1
    1508:	a1 1d       	adc	r26, r1
    150a:	6a 0f       	add	r22, r26
    150c:	71 1d       	adc	r23, r1
    150e:	81 1d       	adc	r24, r1
    1510:	91 1d       	adc	r25, r1
    1512:	a1 1d       	adc	r26, r1
    1514:	20 d0       	rcall	.+64     	; 0x1556 <__ultoa_invert+0x84>
    1516:	09 f4       	brne	.+2      	; 0x151a <__ultoa_invert+0x48>
    1518:	68 94       	set
    151a:	3f 91       	pop	r19
    151c:	2a e0       	ldi	r18, 0x0A	; 10
    151e:	26 9f       	mul	r18, r22
    1520:	11 24       	eor	r1, r1
    1522:	30 19       	sub	r19, r0
    1524:	30 5d       	subi	r19, 0xD0	; 208
    1526:	31 93       	st	Z+, r19
    1528:	de f6       	brtc	.-74     	; 0x14e0 <__ultoa_invert+0xe>
    152a:	cf 01       	movw	r24, r30
    152c:	08 95       	ret
    152e:	46 2f       	mov	r20, r22
    1530:	47 70       	andi	r20, 0x07	; 7
    1532:	40 5d       	subi	r20, 0xD0	; 208
    1534:	41 93       	st	Z+, r20
    1536:	b3 e0       	ldi	r27, 0x03	; 3
    1538:	0f d0       	rcall	.+30     	; 0x1558 <__ultoa_invert+0x86>
    153a:	c9 f7       	brne	.-14     	; 0x152e <__ultoa_invert+0x5c>
    153c:	f6 cf       	rjmp	.-20     	; 0x152a <__ultoa_invert+0x58>
    153e:	46 2f       	mov	r20, r22
    1540:	4f 70       	andi	r20, 0x0F	; 15
    1542:	40 5d       	subi	r20, 0xD0	; 208
    1544:	4a 33       	cpi	r20, 0x3A	; 58
    1546:	18 f0       	brcs	.+6      	; 0x154e <__ultoa_invert+0x7c>
    1548:	49 5d       	subi	r20, 0xD9	; 217
    154a:	31 fd       	sbrc	r19, 1
    154c:	40 52       	subi	r20, 0x20	; 32
    154e:	41 93       	st	Z+, r20
    1550:	02 d0       	rcall	.+4      	; 0x1556 <__ultoa_invert+0x84>
    1552:	a9 f7       	brne	.-22     	; 0x153e <__ultoa_invert+0x6c>
    1554:	ea cf       	rjmp	.-44     	; 0x152a <__ultoa_invert+0x58>
    1556:	b4 e0       	ldi	r27, 0x04	; 4
    1558:	a6 95       	lsr	r26
    155a:	97 95       	ror	r25
    155c:	87 95       	ror	r24
    155e:	77 95       	ror	r23
    1560:	67 95       	ror	r22
    1562:	ba 95       	dec	r27
    1564:	c9 f7       	brne	.-14     	; 0x1558 <__ultoa_invert+0x86>
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	61 05       	cpc	r22, r1
    156a:	71 05       	cpc	r23, r1
    156c:	08 95       	ret
    156e:	9b 01       	movw	r18, r22
    1570:	ac 01       	movw	r20, r24
    1572:	0a 2e       	mov	r0, r26
    1574:	06 94       	lsr	r0
    1576:	57 95       	ror	r21
    1578:	47 95       	ror	r20
    157a:	37 95       	ror	r19
    157c:	27 95       	ror	r18
    157e:	ba 95       	dec	r27
    1580:	c9 f7       	brne	.-14     	; 0x1574 <__ultoa_invert+0xa2>
    1582:	62 0f       	add	r22, r18
    1584:	73 1f       	adc	r23, r19
    1586:	84 1f       	adc	r24, r20
    1588:	95 1f       	adc	r25, r21
    158a:	a0 1d       	adc	r26, r0
    158c:	08 95       	ret

0000158e <_exit>:
    158e:	f8 94       	cli

00001590 <__stop_program>:
    1590:	ff cf       	rjmp	.-2      	; 0x1590 <__stop_program>
